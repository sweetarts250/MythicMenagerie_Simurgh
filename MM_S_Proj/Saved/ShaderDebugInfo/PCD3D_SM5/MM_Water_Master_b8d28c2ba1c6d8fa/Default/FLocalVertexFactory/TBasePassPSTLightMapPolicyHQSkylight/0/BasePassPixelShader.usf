#line 1 "DumpShaderDefinesAsCommentedCode"
// #define __SHADER_TARGET_MAJOR 5

#line 2 "DumpShaderDefinesAsCommentedCode"
// #define __SHADER_TARGET_MINOR 0

#line 3 "DumpShaderDefinesAsCommentedCode"
// #define ALLOW_STATIC_LIGHTING 1

#line 4 "DumpShaderDefinesAsCommentedCode"
// #define ALWAYS_EVALUATE_WORLD_POSITION_OFFSET 0

#line 5 "DumpShaderDefinesAsCommentedCode"
// #define AMPLIFICATIONSHADER 0

#line 6 "DumpShaderDefinesAsCommentedCode"
// #define CLEAR_COAT_BOTTOM_NORMAL 0

#line 7 "DumpShaderDefinesAsCommentedCode"
// #define COMPILE_SHADERS_FOR_DEVELOPMENT 1

#line 8 "DumpShaderDefinesAsCommentedCode"
// #define COMPILER_DEFINE #define

#line 9 "DumpShaderDefinesAsCommentedCode"
// #define COMPILER_DXC 0

#line 10 "DumpShaderDefinesAsCommentedCode"
// #define COMPUTESHADER 0

#line 11 "DumpShaderDefinesAsCommentedCode"
// #define DISTORTION_ACCOUNT_FOR_COVERAGE 0

#line 12 "DumpShaderDefinesAsCommentedCode"
// #define DO_CHECK 1

#line 13 "DumpShaderDefinesAsCommentedCode"
// #define DO_GUARD_SLOW 0

#line 14 "DumpShaderDefinesAsCommentedCode"
// #define DUAL_SOURCE_COLOR_BLENDING_ENABLED 0

#line 15 "DumpShaderDefinesAsCommentedCode"
// #define DXT5_NORMALMAPS 0

#line 16 "DumpShaderDefinesAsCommentedCode"
// #define EARLY_Z_PASS_ONLY_MATERIAL_MASKING 0

#line 17 "DumpShaderDefinesAsCommentedCode"
// #define ENABLE_DBUFFER_TEXTURES 1

#line 18 "DumpShaderDefinesAsCommentedCode"
// #define ENABLE_NON_NANITE_VSM 1

#line 19 "DumpShaderDefinesAsCommentedCode"
// #define ENABLE_SKY_LIGHT 1

#line 20 "DumpShaderDefinesAsCommentedCode"
// #define FORWARD_SHADING 0

#line 21 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_HAS_DIFFUSE_SAMPLE_OCCLUSION 0

#line 22 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_HAS_VELOCITY 0

#line 23 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_LAYOUT 0

#line 24 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_REFACTOR 1

#line 25 "DumpShaderDefinesAsCommentedCode"
// #define GENERATE_SPHERICAL_PARTICLE_NORMALS 0

#line 26 "DumpShaderDefinesAsCommentedCode"
// #define GEOMETRYSHADER 0

#line 27 "DumpShaderDefinesAsCommentedCode"
// #define HAS_INVERTED_Z_BUFFER 1

#line 28 "DumpShaderDefinesAsCommentedCode"
// #define HAS_PRIMITIVE_UNIFORM_BUFFER 1

#line 29 "DumpShaderDefinesAsCommentedCode"
// #define HQ_TEXTURE_LIGHTMAP 1

#line 30 "DumpShaderDefinesAsCommentedCode"
// #define INDEX_NONE -1

#line 31 "DumpShaderDefinesAsCommentedCode"
// #define INSTANCED_STEREO 0

#line 32 "DumpShaderDefinesAsCommentedCode"
// #define INTERPOLATE_VERTEX_COLOR 1

#line 33 "DumpShaderDefinesAsCommentedCode"
// #define IRIS_NORMAL 0

#line 34 "DumpShaderDefinesAsCommentedCode"
// #define IS_BASE_PASS 1

#line 35 "DumpShaderDefinesAsCommentedCode"
// #define IS_MATERIAL_SHADER 1

#line 36 "DumpShaderDefinesAsCommentedCode"
// #define IS_MOBILE_BASE_PASS 0

#line 37 "DumpShaderDefinesAsCommentedCode"
// #define LEGACY_MATERIAL_ENERGYCONSERVATION 0

#line 38 "DumpShaderDefinesAsCommentedCode"
// #define LIGHTMAP_VT_ENABLED 0

#line 39 "DumpShaderDefinesAsCommentedCode"
// #define LOCAL_LIGHT_DATA_STRIDE 6

#line 40 "DumpShaderDefinesAsCommentedCode"
// #define MANUAL_VERTEX_FETCH 1

#line 41 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ALLOW_NEGATIVE_EMISSIVECOLOR 0

#line 42 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_COMPUTE_FOG_PER_PIXEL 0

#line 43 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_CONTACT_SHADOWS 0

#line 44 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_DECAL_READ_MASK 7

#line 45 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_DITHER_OPACITY_MASK 0

#line 46 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_DOMAIN_SURFACE 1

#line 47 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ENABLE_TRANSLUCENCY_CLOUD_FOGGING 0

#line 48 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ENABLE_TRANSLUCENCY_FOGGING 1

#line 49 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_FORWARD_BLENDS_SKYLIGHT_CUBEMAPS 0

#line 50 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_FULLY_ROUGH 0

#line 51 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_HQ_FORWARD_REFLECTION_CAPTURES 0

#line 52 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_IS_SKY 0

#line 53 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_IS_STRATA 0

#line 54 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ISTHINSURFACE 0

#line 55 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_NONMETAL 0

#line 56 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_NORMAL_CURVATURE_TO_ROUGHNESS 0

#line 57 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_OUTPUT_OPACITY_AS_ALPHA 0

#line 58 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_PATH_TRACING_BUFFER_READ 0

#line 59 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_PLANAR_FORWARD_REFLECTIONS 0

#line 60 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ROUGHDIFFUSE 0

#line 61 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_SHADINGMODEL_DEFAULT_LIT 1

#line 62 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_SINGLE_SHADINGMODEL 1

#line 63 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_SKY_ATMOSPHERE 0

#line 64 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_SSR 1

#line 65 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_TANGENTSPACENORMAL 1

#line 66 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_TWOSIDED 0

#line 67 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USE_ALPHA_TO_COVERAGE 0

#line 68 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USE_LM_DIRECTIONALITY 1

#line 69 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USE_PREINTEGRATED_GF 0

#line 70 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USES_ANISOTROPY 0

#line 71 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USES_DECAL_LOOKUP 0

#line 72 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USES_SCENE_COLOR_COPY 0

#line 73 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_VIRTUALTEXTURE_FEEDBACK 0

#line 74 "DumpShaderDefinesAsCommentedCode"
// #define MATERIALBLENDING_TRANSLUCENT 1

#line 75 "DumpShaderDefinesAsCommentedCode"
// #define MATERIALDECALRESPONSEMASK 7

#line 76 "DumpShaderDefinesAsCommentedCode"
// #define MATERIALDOMAIN_SURFACE 1

#line 77 "DumpShaderDefinesAsCommentedCode"
// #define MAX_NUM_LIGHTMAP_COEF 2

#line 78 "DumpShaderDefinesAsCommentedCode"
// #define MAX_PAGE_AREA_DIAGNOSTIC_SLOTS 32

#line 79 "DumpShaderDefinesAsCommentedCode"
// #define MESHSHADER 0

#line 80 "DumpShaderDefinesAsCommentedCode"
// #define MOBILE_HIGH_QUALITY_BRDF 0

#line 81 "DumpShaderDefinesAsCommentedCode"
// #define MOBILE_MULTI_VIEW 0

#line 82 "DumpShaderDefinesAsCommentedCode"
// #define MULTI_VIEW 0

#line 83 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_INSTANCE_LOCAL_TO_WORLD_PS 0

#line 84 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_INSTANCE_WORLD_TO_LOCAL_PS 0

#line 85 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_PARTICLE_COLOR 0

#line 86 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_PARTICLE_LOCAL_TO_WORLD 0

#line 87 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_PARTICLE_WORLD_TO_LOCAL 0

#line 88 "DumpShaderDefinesAsCommentedCode"
// #define NUM_CULLED_GRID_PRIMITIVE_TYPES 2

#line 89 "DumpShaderDefinesAsCommentedCode"
// #define NUM_CULLED_LIGHTS_GRID_STRIDE 2

#line 90 "DumpShaderDefinesAsCommentedCode"
// #define NUM_LIGHTMAP_COEFFICIENTS 2

#line 91 "DumpShaderDefinesAsCommentedCode"
// #define NUM_VIRTUALTEXTURE_SAMPLES 0

#line 92 "DumpShaderDefinesAsCommentedCode"
// #define PIXELSHADER 1

#line 93 "DumpShaderDefinesAsCommentedCode"
// #define PIXELSHADEROUTPUT_MRT0 1

#line 94 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_ALLOW_SCENE_DATA_COMPRESSED_TRANSFORMS 1

#line 95 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_FORCE_SIMPLE_SKY_DIFFUSE 0

#line 96 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_BINDLESS 0

#line 97 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_BUFFER_LOAD_TYPE_CONVERSION 1

#line 98 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_CLIP_DISTANCE 1

#line 99 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_DISTANCE_FIELDS 1

#line 100 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER0 0

#line 101 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER1 0

#line 102 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_PER_PIXEL_DBUFFER_MASK 0

#line 103 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK 0

#line 104 "DumpShaderDefinesAsCommentedCode"
// #define POST_PROCESS_ALPHA 0

#line 105 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_ALLOW_GLOBAL_CLIP_PLANE 0

#line 106 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_MOBILE_DISABLE_VERTEX_FOG 1

#line 107 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_OIT 0

#line 108 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_STRATA_BACKCOMPATIBILITY 0

#line 109 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE 1

#line 110 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE_AFFECTS_HEIGHFOG 1

#line 111 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_SUPPORTS_LUMEN 1

#line 112 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_VERTEX_FOGGING_FOR_OPAQUE 0

#line 113 "DumpShaderDefinesAsCommentedCode"
// #define RAY_TRACING_DYNAMIC_MESH_IN_LOCAL_SPACE 1

#line 114 "DumpShaderDefinesAsCommentedCode"
// #define RAYCALLABLESHADER 0

#line 115 "DumpShaderDefinesAsCommentedCode"
// #define RAYGENSHADER 0

#line 116 "DumpShaderDefinesAsCommentedCode"
// #define RAYHITGROUPSHADER 0

#line 117 "DumpShaderDefinesAsCommentedCode"
// #define RAYMISSSHADER 0

#line 118 "DumpShaderDefinesAsCommentedCode"
// #define REFRACTION_ROOT_NODE_OVERRIDES_DEFAULT 0

#line 119 "DumpShaderDefinesAsCommentedCode"
// #define REFRACTION_USE_NONE 1

#line 120 "DumpShaderDefinesAsCommentedCode"
// #define SCENE_TEXTURES_DISABLED 0

#line 121 "DumpShaderDefinesAsCommentedCode"
// #define SELECTIVE_BASEPASS_OUTPUTS 0

#line 122 "DumpShaderDefinesAsCommentedCode"
// #define SHADING_PATH_DEFERRED 1

#line 123 "DumpShaderDefinesAsCommentedCode"
// #define SM5_PROFILE 1

#line 124 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_ADVANCED_DEBUG_ENABLED 0

#line 125 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_ENABLED 0

#line 126 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_INLINE_SHADING 1

#line 127 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_OPAQUE_ROUGH_REFRACTION_ENABLED 0

#line 128 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_PREMULTIPLIED_ALPHA_OPACITY_OVERRIDEN 0

#line 129 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_CLOUD_SHADOW_ON_FORWARD_LIT_TRANSLUCENT 0

#line 130 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_CLOUD_SHADOW_ON_SINGLE_LAYER_WATER 0

#line 131 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_GPUSKIN_PASSTHROUGH 0

#line 132 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_RECTLIGHT_ON_FORWARD_LIT_TRANSLUCENT 0

#line 133 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_VSM_FOWARD_QUALITY 0

#line 134 "DumpShaderDefinesAsCommentedCode"
// #define TEXTURE_SAMPLE_DEBUG 0

#line 135 "DumpShaderDefinesAsCommentedCode"
// #define TRANSLUCENCY_LIGHTING_SURFACE_LIGHTINGVOLUME 1

#line 136 "DumpShaderDefinesAsCommentedCode"
// #define TRANSLUCENT_SHADOW_WITH_MASKED_OPACITY 0

#line 137 "DumpShaderDefinesAsCommentedCode"
// #define TRANSLUCENT_WRITING_FRONT_LAYER_TRANSPARENCY 1

#line 138 "DumpShaderDefinesAsCommentedCode"
// #define TRANSLUCENT_WRITING_VELOCITY 0

#line 139 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE 2097152.00f

#line 140 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_2PI 0.673652053f

#line 141 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_PI 0.673652053f

#line 142 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_RCP 4.76837158e-07f

#line 143 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_RSQRT 0.000690533954f

#line 144 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_SQRT 1448.15466f

#line 145 "DumpShaderDefinesAsCommentedCode"
// #define USE_DBUFFER 1

#line 146 "DumpShaderDefinesAsCommentedCode"
// #define USE_DITHERED_LOD_TRANSITION_FROM_MATERIAL 0

#line 147 "DumpShaderDefinesAsCommentedCode"
// #define USE_STENCIL_LOD_DITHER_DEFAULT 0

#line 148 "DumpShaderDefinesAsCommentedCode"
// #define USES_DISPLACEMENT 0

#line 149 "DumpShaderDefinesAsCommentedCode"
// #define USES_DISTORTION 0

#line 150 "DumpShaderDefinesAsCommentedCode"
// #define USES_EMISSIVE_COLOR 1

#line 151 "DumpShaderDefinesAsCommentedCode"
// #define USES_PER_INSTANCE_CUSTOM_DATA 0

#line 152 "DumpShaderDefinesAsCommentedCode"
// #define USES_PER_INSTANCE_RANDOM 0

#line 153 "DumpShaderDefinesAsCommentedCode"
// #define USES_TRANSFORM_VECTOR 1

#line 154 "DumpShaderDefinesAsCommentedCode"
// #define USES_VERTEX_INTERPOLATOR 0

#line 155 "DumpShaderDefinesAsCommentedCode"
// #define USES_WORLD_POSITION_OFFSET 0

#line 156 "DumpShaderDefinesAsCommentedCode"
// #define VELOCITY_ENCODE_DEPTH 1

#line 157 "DumpShaderDefinesAsCommentedCode"
// #define VERTEXSHADER 0

#line 158 "DumpShaderDefinesAsCommentedCode"
// #define VF_SUPPORTS_PRIMITIVE_SCENE_DATA 1

#line 159 "DumpShaderDefinesAsCommentedCode"
// #define VF_SUPPORTS_SPEEDTREE_WIND 1

#line 160 "DumpShaderDefinesAsCommentedCode"
// #define VIRTUAL_SHADOW_MAP 1

#line 161 "DumpShaderDefinesAsCommentedCode"
// #define VIRTUAL_TEXTURE_ANISOTROPIC_FILTERING 0

#line 162 "DumpShaderDefinesAsCommentedCode"
// #define VSM_LEVEL0_DIM_PAGES_XY 128

#line 163 "DumpShaderDefinesAsCommentedCode"
// #define VSM_LOG2_LEVEL0_DIM_PAGES_XY 7

#line 164 "DumpShaderDefinesAsCommentedCode"
// #define VSM_LOG2_PAGE_SIZE 7

#line 165 "DumpShaderDefinesAsCommentedCode"
// #define VSM_MAX_MIP_LEVELS 8

#line 166 "DumpShaderDefinesAsCommentedCode"
// #define VSM_NUM_STATS 32

#line 167 "DumpShaderDefinesAsCommentedCode"
// #define VSM_PAGE_SIZE 128

#line 168 "DumpShaderDefinesAsCommentedCode"
// #define VSM_PAGE_SIZE_MASK 127

#line 169 "DumpShaderDefinesAsCommentedCode"
// #define VSM_PAGE_TABLE_SIZE 21845

#line 170 "DumpShaderDefinesAsCommentedCode"
// #define VSM_RASTER_WINDOW_PAGES 4

#line 171 "DumpShaderDefinesAsCommentedCode"
// #define VSM_VIRTUAL_MAX_RESOLUTION_XY 16384

#line 172 "DumpShaderDefinesAsCommentedCode"
// #define WANT_PIXEL_DEPTH_OFFSET 0

#line 173 "DumpShaderDefinesAsCommentedCode"
// #define WORKING_COLOR_SPACE_IS_SRGB 1

#line 860 "/Engine/Public/Platform.ush"
float min3(float a, float b, float c)
{
	return min(a, min(b, c));
}

#line 865 "/Engine/Public/Platform.ush"
int min3(int a, int b, int c)
{
	return min(a, min(b, c));
}

#line 870 "/Engine/Public/Platform.ush"
uint min3(uint a, uint b, uint c)
{
	return min(a, min(b, c));
}

#line 875 "/Engine/Public/Platform.ush"
float2 min3 ( float2 a, float2 b, float2 c) { return float2( min3 (a.x , b.x , c.x ), min3 (a.y , b.y , c.y )); }

#line 875 "/Engine/Public/Platform.ush"
float3 min3 ( float3 a, float3 b, float3 c) { return float3( min3 (a.xy, b.xy, c.xy), min3 (a.z , b.z , c.z )); }

#line 875 "/Engine/Public/Platform.ush"
float4 min3 ( float4 a, float4 b, float4 c) { return float4( min3 (a.xy, b.xy, c.xy), min3 (a.zw, b.zw, c.zw)); }

#line 876 "/Engine/Public/Platform.ush"
int2 min3 ( int2 a, int2 b, int2 c) { return int2( min3 (a.x , b.x , c.x ), min3 (a.y , b.y , c.y )); }

#line 876 "/Engine/Public/Platform.ush"
int3 min3 ( int3 a, int3 b, int3 c) { return int3( min3 (a.xy, b.xy, c.xy), min3 (a.z , b.z , c.z )); }

#line 876 "/Engine/Public/Platform.ush"
int4 min3 ( int4 a, int4 b, int4 c) { return int4( min3 (a.xy, b.xy, c.xy), min3 (a.zw, b.zw, c.zw)); }

#line 877 "/Engine/Public/Platform.ush"
uint2 min3 ( uint2 a, uint2 b, uint2 c) { return uint2( min3 (a.x , b.x , c.x ), min3 (a.y , b.y , c.y )); }

#line 877 "/Engine/Public/Platform.ush"
uint3 min3 ( uint3 a, uint3 b, uint3 c) { return uint3( min3 (a.xy, b.xy, c.xy), min3 (a.z , b.z , c.z )); }

#line 877 "/Engine/Public/Platform.ush"
uint4 min3 ( uint4 a, uint4 b, uint4 c) { return uint4( min3 (a.xy, b.xy, c.xy), min3 (a.zw, b.zw, c.zw)); }

#line 879 "/Engine/Public/Platform.ush"
float max3(float a, float b, float c)
{
	return max(a, max(b, c));
}

#line 884 "/Engine/Public/Platform.ush"
int max3(int a, int b, int c)
{
	return max(a, max(b, c));
}

#line 889 "/Engine/Public/Platform.ush"
uint max3(uint a, uint b, uint c)
{
	return max(a, max(b, c));
}

#line 894 "/Engine/Public/Platform.ush"
float2 max3 ( float2 a, float2 b, float2 c) { return float2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); }

#line 894 "/Engine/Public/Platform.ush"
float3 max3 ( float3 a, float3 b, float3 c) { return float3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); }

#line 894 "/Engine/Public/Platform.ush"
float4 max3 ( float4 a, float4 b, float4 c) { return float4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }

#line 895 "/Engine/Public/Platform.ush"
int2 max3 ( int2 a, int2 b, int2 c) { return int2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); }

#line 895 "/Engine/Public/Platform.ush"
int3 max3 ( int3 a, int3 b, int3 c) { return int3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); }

#line 895 "/Engine/Public/Platform.ush"
int4 max3 ( int4 a, int4 b, int4 c) { return int4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }

#line 896 "/Engine/Public/Platform.ush"
uint2 max3 ( uint2 a, uint2 b, uint2 c) { return uint2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); }

#line 896 "/Engine/Public/Platform.ush"
uint3 max3 ( uint3 a, uint3 b, uint3 c) { return uint3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); }

#line 896 "/Engine/Public/Platform.ush"
uint4 max3 ( uint4 a, uint4 b, uint4 c) { return uint4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }

#line 973 "/Engine/Public/Platform.ush"
bool select_internal(bool    c, bool a, bool b) { return bool (c   ? a.x : b.x); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool    c, bool a, bool2 b) { return bool2(c   ? a   : b.x, c   ? a   : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool    c, bool2 a, bool b) { return bool2(c   ? a.x : b  , c   ? a.y : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool    c, bool2 a, bool2 b) { return bool2(c   ? a.x : b.x, c   ? a.y : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool a, bool b) { return bool2(c.x ? a   : b  , c.y ? a   : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool a, bool2 b) { return bool2(c.x ? a   : b.x, c.y ? a   : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool2 a, bool b) { return bool2(c.x ? a.x : b  , c.y ? a.y : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool2 a, bool2 b) { return bool2(c.x ? a.x : b.x, c.y ? a.y : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool    c, bool a, bool3 b) { return bool3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool    c, bool3 a, bool b) { return bool3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool    c, bool3 a, bool3 b) { return bool3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool a, bool b) { return bool3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool a, bool3 b) { return bool3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool3 a, bool b) { return bool3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool3 a, bool3 b) { return bool3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool    c, bool a, bool4 b) { return bool4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool    c, bool4 a, bool b) { return bool4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool    c, bool4 a, bool4 b) { return bool4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool a, bool b) { return bool4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool a, bool4 b) { return bool4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool4 a, bool b) { return bool4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool4 a, bool4 b) { return bool4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int select_internal(bool    c, int a, int b) { return int (c   ? a.x : b.x); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool    c, int a, int2 b) { return int2(c   ? a   : b.x, c   ? a   : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool    c, int2 a, int b) { return int2(c   ? a.x : b  , c   ? a.y : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool    c, int2 a, int2 b) { return int2(c   ? a.x : b.x, c   ? a.y : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int a, int b) { return int2(c.x ? a   : b  , c.y ? a   : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int a, int2 b) { return int2(c.x ? a   : b.x, c.y ? a   : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int2 a, int b) { return int2(c.x ? a.x : b  , c.y ? a.y : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int2 a, int2 b) { return int2(c.x ? a.x : b.x, c.y ? a.y : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool    c, int a, int3 b) { return int3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool    c, int3 a, int b) { return int3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool    c, int3 a, int3 b) { return int3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int a, int b) { return int3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int a, int3 b) { return int3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int3 a, int b) { return int3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int3 a, int3 b) { return int3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool    c, int a, int4 b) { return int4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool    c, int4 a, int b) { return int4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool    c, int4 a, int4 b) { return int4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int a, int b) { return int4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int a, int4 b) { return int4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int4 a, int b) { return int4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int4 a, int4 b) { return int4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float select_internal(bool    c, float a, float b) { return float (c   ? a.x : b.x); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool    c, float a, float2 b) { return float2(c   ? a   : b.x, c   ? a   : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool    c, float2 a, float b) { return float2(c   ? a.x : b  , c   ? a.y : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool    c, float2 a, float2 b) { return float2(c   ? a.x : b.x, c   ? a.y : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float a, float b) { return float2(c.x ? a   : b  , c.y ? a   : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float a, float2 b) { return float2(c.x ? a   : b.x, c.y ? a   : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float2 a, float b) { return float2(c.x ? a.x : b  , c.y ? a.y : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float2 a, float2 b) { return float2(c.x ? a.x : b.x, c.y ? a.y : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool    c, float a, float3 b) { return float3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool    c, float3 a, float b) { return float3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool    c, float3 a, float3 b) { return float3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float a, float b) { return float3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float a, float3 b) { return float3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float3 a, float b) { return float3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float3 a, float3 b) { return float3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool    c, float a, float4 b) { return float4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool    c, float4 a, float b) { return float4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool    c, float4 a, float4 b) { return float4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float a, float b) { return float4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float a, float4 b) { return float4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float4 a, float b) { return float4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float4 a, float4 b) { return float4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }

#line 1027 "/Engine/Public/Platform.ush"
float  CondMask(bool Cond, float  Src0, float  Src1) { return Cond ? Src0 : Src1; }

#line 1028 "/Engine/Public/Platform.ush"
float2 CondMask(bool Cond, float2 Src0, float2 Src1) { return Cond ? Src0 : Src1; }

#line 1029 "/Engine/Public/Platform.ush"
float3 CondMask(bool Cond, float3 Src0, float3 Src1) { return Cond ? Src0 : Src1; }

#line 1030 "/Engine/Public/Platform.ush"
float4 CondMask(bool Cond, float4 Src0, float4 Src1) { return Cond ? Src0 : Src1; }

#line 1032 "/Engine/Public/Platform.ush"
int  CondMask(bool Cond, int  Src0, int  Src1) { return Cond ? Src0 : Src1; }

#line 1033 "/Engine/Public/Platform.ush"
int2 CondMask(bool Cond, int2 Src0, int2 Src1) { return Cond ? Src0 : Src1; }

#line 1034 "/Engine/Public/Platform.ush"
int3 CondMask(bool Cond, int3 Src0, int3 Src1) { return Cond ? Src0 : Src1; }

#line 1035 "/Engine/Public/Platform.ush"
int4 CondMask(bool Cond, int4 Src0, int4 Src1) { return Cond ? Src0 : Src1; }

#line 1037 "/Engine/Public/Platform.ush"
uint  CondMask(bool Cond, uint  Src0, uint  Src1) { return Cond ? Src0 : Src1; }

#line 1038 "/Engine/Public/Platform.ush"
uint2 CondMask(bool Cond, uint2 Src0, uint2 Src1) { return Cond ? Src0 : Src1; }

#line 1039 "/Engine/Public/Platform.ush"
uint3 CondMask(bool Cond, uint3 Src0, uint3 Src1) { return Cond ? Src0 : Src1; }

#line 1040 "/Engine/Public/Platform.ush"
uint4 CondMask(bool Cond, uint4 Src0, uint4 Src1) { return Cond ? Src0 : Src1; }

#line 45 "/Engine/Private/Common.ush"
struct FloatDeriv2
{
	float2 Value;
	float2 Ddx;
	float2 Ddy;
};

#line 116 "/Engine/Private/Common.ush"
const static float PI = 3.1415926535897932f;

#line 119 "/Engine/Private/Common.ush"
const static float Max10BitsFloat = 64512.0f;

#line 5 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCScalar
{
	float Tile;
	float Offset;
};

#line 11 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector2
{
	float2 Tile;
	float2 Offset;
};

#line 17 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector3
{
	float3 Tile;
	float3 Offset;
};

#line 23 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector4
{
	float4 Tile;
	float4 Offset;
};

#line 58 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCMatrix
{
	float4x4 M;
	float3 Tile; 
};

#line 65 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCInverseMatrix
{
	float4x4 M;
	float3 Tile; 
	int Dummy; 
};

#line 75 "/Engine/Private/LargeWorldCoordinates.ush"
float LWCGetTileOffset(FLWCScalar V) { return  (( V ).Tile) * 2097152.00f; }

#line 76 "/Engine/Private/LargeWorldCoordinates.ush"
float2 LWCGetTileOffset(FLWCVector2 V) { return  (( V ).Tile) * 2097152.00f; }

#line 77 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCGetTileOffset(FLWCVector3 V) { return  (( V ).Tile) * 2097152.00f; }

#line 78 "/Engine/Private/LargeWorldCoordinates.ush"
float4 LWCGetTileOffset(FLWCVector4 V) { return  (( V ).Tile) * 2097152.00f; }

#line 79 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCGetTileOffset(FLWCMatrix V) { return  (( V ).Tile) * 2097152.00f; }

#line 80 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCGetTileOffset(FLWCInverseMatrix V) { return  (( V ).Tile) * 2097152.00f; }

#line 82 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 Make4x3Matrix(float4x4 M)
{
	
	float4x4 Result;
	Result[0] = float4(M[0].xyz, 0.0f);
	Result[1] = float4(M[1].xyz, 0.0f);
	Result[2] = float4(M[2].xyz, 0.0f);
	Result[3] = float4(M[3].xyz, 1.0f);
	return Result;
}

#line 93 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 MakeTranslationMatrix(float3 Offset)
{
	float4x4 Result;
	Result[0] = float4(1.0f, 0.0f, 0.0f, 0.0f);
	Result[1] = float4(0.0f, 1.0f, 0.0f, 0.0f);
	Result[2] = float4(0.0f, 0.0f, 1.0f, 0.0f);
	Result[3] = float4(Offset, 1.0f);
	return Result;
}

#line 103 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar MakeLWCScalar(float Tile, float Offset)
{
	FLWCScalar Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 111 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector2 MakeLWCVector2(float2 Tile, float2 Offset)
{
	FLWCVector2 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 119 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 MakeLWCVector3(float3 Tile, float3 Offset)
{
	FLWCVector3 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 127 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(float4 Tile, float4 Offset)
{
	FLWCVector4 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 135 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(float3 Tile, float4 Offset)
{
	return MakeLWCVector4(float4(Tile, 0), Offset);
}

#line 140 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(FLWCVector3 XYZ, float W)
{
	return MakeLWCVector4( (( XYZ ).Tile), float4(XYZ.Offset, W));
}

#line 161 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix MakeLWCMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	 ( Result ).Tile = ( Tile );
	Result.M = InMatrix;
	return Result;
}

#line 169 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix MakeLWCMatrix4x3(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	 ( Result ).Tile = ( Tile );
	Result.M = Make4x3Matrix(InMatrix);
	return Result;
}

#line 177 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCInverseMatrix MakeLWCInverseMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	 ( Result ).Tile = ( -Tile );
	Result.M = InMatrix;
	Result.Dummy = 0;
	return Result;
}

#line 186 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCInverseMatrix MakeLWCInverseMatrix4x3(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	 ( Result ).Tile = ( -Tile );
	Result.M = Make4x3Matrix(InMatrix);
	Result.Dummy = 0;
	return Result;
}

#line 197 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCGetComponent(FLWCScalar V, int C) { return V; }

#line 198 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCGetComponent(FLWCVector2 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }

#line 199 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCGetComponent(FLWCVector3 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }

#line 200 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCGetComponent(FLWCVector4 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }

#line 227 "/Engine/Private/LargeWorldCoordinates.ush"
float LWCToFloat(FLWCScalar Value)   { return LWCGetTileOffset(Value) + Value.Offset; }

#line 228 "/Engine/Private/LargeWorldCoordinates.ush"
float2 LWCToFloat(FLWCVector2 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

#line 229 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCToFloat(FLWCVector3 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

#line 230 "/Engine/Private/LargeWorldCoordinates.ush"
float4 LWCToFloat(FLWCVector4 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

#line 232 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCToFloat(FLWCMatrix Value)
{
	float4x4 Result = Value.M;
	Result[3].xyz = LWCGetTileOffset(Value) + Result[3].xyz;
	return Result;
}

#line 239 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCToFloat(FLWCInverseMatrix Value)
{
	float4x4 TileOffset = MakeTranslationMatrix(LWCGetTileOffset(Value));
	return mul(TileOffset, Value.M);
}

#line 256 "/Engine/Private/LargeWorldCoordinates.ush"
float LWCToFloat(float Value) { return Value; }

#line 257 "/Engine/Private/LargeWorldCoordinates.ush"
float2 LWCToFloat(float2 Value) { return Value; }

#line 258 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCToFloat(float3 Value) { return Value; }

#line 259 "/Engine/Private/LargeWorldCoordinates.ush"
float4 LWCToFloat(float4 Value) { return Value; }

#line 260 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCToFloat(float4x4 Value) { return Value; }

#line 277 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 LWCMultiply(float3 Position, FLWCMatrix InMatrix)
{
	
	float3 Offset = (Position.xxx * InMatrix.M[0].xyz + Position.yyy * InMatrix.M[1].xyz + Position.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
	return MakeLWCVector3( (( InMatrix ).Tile), Offset);
}

#line 284 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 LWCMultiply(float4 Position, FLWCMatrix InMatrix)
{
	float4 Offset = mul(Position, InMatrix.M);
	return MakeLWCVector4( (( InMatrix ).Tile), Offset);
}

#line 290 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCMultiply(FLWCVector3 Position, FLWCInverseMatrix InMatrix)
{
	float3 LocalPosition = LWCToFloat(MakeLWCVector3( (( Position ).Tile) +  (( InMatrix ).Tile), Position.Offset));
	return (LocalPosition.xxx * InMatrix.M[0].xyz + LocalPosition.yyy * InMatrix.M[1].xyz + LocalPosition.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
}

#line 296 "/Engine/Private/LargeWorldCoordinates.ush"
float4 LWCMultiply(FLWCVector4 Position, FLWCInverseMatrix InMatrix)
{
	float4 LocalPosition = LWCToFloat(MakeLWCVector4( (( Position ).Tile) + float4( (( InMatrix ).Tile), 0), Position.Offset));
	return mul(LocalPosition, InMatrix.M);
}

#line 312 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix LWCMultiply(float4x4 Lhs, FLWCMatrix Rhs)
{
	float4x4 ResultMatrix = mul(Lhs, Rhs.M);
	return MakeLWCMatrix( (( Rhs ).Tile), ResultMatrix);
}

#line 318 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCInverseMatrix LWCMultiply(FLWCInverseMatrix Lhs, float4x4 Rhs)
{
	float4x4 ResultMatrix = mul(Lhs.M, Rhs);
	return MakeLWCInverseMatrix(- (( Lhs ).Tile), ResultMatrix);
}

#line 324 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCMultiply(FLWCMatrix Lhs, FLWCInverseMatrix Rhs)
{
	
	float4x4 Result = Lhs.M;
	Result = mul(Result, MakeTranslationMatrix(( (( Lhs ).Tile) +  (( Rhs ).Tile)) * 2097152.00f));
	Result = mul(Result, Rhs.M);
	return Result;
}

#line 20 "/Engine/Private/LWCOperations.ush"
float LWCRcpUnscaled(FLWCScalar V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }

#line 23 "/Engine/Private/LWCOperations.ush"
float LWCRcpScaled(FLWCScalar V, float Scale) { return LWCRcpUnscaled(V) * Scale; }

#line 26 "/Engine/Private/LWCOperations.ush"
float LWCRcp(FLWCScalar V) { return LWCRcpScaled(V, 4.76837158e-07f); }

#line 52 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCAdd(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }

#line 53 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCAdd(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Rhs ).Tile), Lhs + Rhs.Offset); }

#line 54 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCAdd(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset + Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSubtract(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSubtract(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSubtract(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 91 "/Engine/Private/LWCOperations.ush"
float LWCFrac(FLWCScalar V)
{
	float FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}

#line 107 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCMultiply(FLWCScalar Lhs, FLWCScalar Rhs)
{
	return MakeLWCScalar( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}

#line 111 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCMultiply(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }

#line 112 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCMultiply(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

#line 114 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCDivide(FLWCScalar Lhs, FLWCScalar Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }

#line 115 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCDivide(FLWCScalar Lhs, float Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }

#line 116 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCDivide(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar((float)0, Lhs * LWCRcp(Rhs)); }

#line 20 "/Engine/Private/LWCOperations.ush"
float2 LWCRcpUnscaled(FLWCVector2 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }

#line 23 "/Engine/Private/LWCOperations.ush"
float2 LWCRcpScaled(FLWCVector2 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }

#line 26 "/Engine/Private/LWCOperations.ush"
float2 LWCRcp(FLWCVector2 V) { return LWCRcpScaled(V, 4.76837158e-07f); }

#line 52 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCAdd(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }

#line 53 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCAdd(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Rhs ).Tile), Lhs + Rhs.Offset); }

#line 54 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCAdd(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset + Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSubtract(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 91 "/Engine/Private/LWCOperations.ush"
float2 LWCFrac(FLWCVector2 V)
{
	float2 FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}

#line 107 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCMultiply(FLWCVector2 Lhs, FLWCVector2 Rhs)
{
	return MakeLWCVector2( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}

#line 111 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCMultiply(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }

#line 112 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCMultiply(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

#line 114 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCDivide(FLWCVector2 Lhs, FLWCVector2 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }

#line 115 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCDivide(FLWCVector2 Lhs, float2 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }

#line 116 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCDivide(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2((float2)0, Lhs * LWCRcp(Rhs)); }

#line 20 "/Engine/Private/LWCOperations.ush"
float3 LWCRcpUnscaled(FLWCVector3 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }

#line 23 "/Engine/Private/LWCOperations.ush"
float3 LWCRcpScaled(FLWCVector3 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }

#line 26 "/Engine/Private/LWCOperations.ush"
float3 LWCRcp(FLWCVector3 V) { return LWCRcpScaled(V, 4.76837158e-07f); }

#line 52 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCAdd(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }

#line 53 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCAdd(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Rhs ).Tile), Lhs + Rhs.Offset); }

#line 54 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCAdd(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset + Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSubtract(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 91 "/Engine/Private/LWCOperations.ush"
float3 LWCFrac(FLWCVector3 V)
{
	float3 FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}

#line 107 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCMultiply(FLWCVector3 Lhs, FLWCVector3 Rhs)
{
	return MakeLWCVector3( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}

#line 111 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCMultiply(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }

#line 112 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCMultiply(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

#line 114 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCDivide(FLWCVector3 Lhs, FLWCVector3 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }

#line 115 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCDivide(FLWCVector3 Lhs, float3 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }

#line 116 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCDivide(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3((float3)0, Lhs * LWCRcp(Rhs)); }

#line 20 "/Engine/Private/LWCOperations.ush"
float4 LWCRcpUnscaled(FLWCVector4 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }

#line 23 "/Engine/Private/LWCOperations.ush"
float4 LWCRcpScaled(FLWCVector4 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }

#line 26 "/Engine/Private/LWCOperations.ush"
float4 LWCRcp(FLWCVector4 V) { return LWCRcpScaled(V, 4.76837158e-07f); }

#line 52 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCAdd(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }

#line 53 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCAdd(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Rhs ).Tile), Lhs + Rhs.Offset); }

#line 54 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCAdd(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset + Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSubtract(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 91 "/Engine/Private/LWCOperations.ush"
float4 LWCFrac(FLWCVector4 V)
{
	float4 FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}

#line 107 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCMultiply(FLWCVector4 Lhs, FLWCVector4 Rhs)
{
	return MakeLWCVector4( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}

#line 111 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCMultiply(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }

#line 112 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCMultiply(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

#line 114 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCDivide(FLWCVector4 Lhs, FLWCVector4 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }

#line 115 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCDivide(FLWCVector4 Lhs, float4 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }

#line 116 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCDivide(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4((float4)0, Lhs * LWCRcp(Rhs)); }

#line 423 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCVectorSum(FLWCScalar V) { return V; }

#line 424 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCVectorSum(FLWCVector2 V) { return LWCAdd( LWCGetComponent( V , 0),  LWCGetComponent( V , 1)); }

#line 425 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCVectorSum(FLWCVector3 V) { return LWCAdd(LWCAdd( LWCGetComponent( V , 0),  LWCGetComponent( V , 1)),  LWCGetComponent( V , 2)); }

#line 426 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCVectorSum(FLWCVector4 V) { return LWCAdd(LWCAdd(LWCAdd( LWCGetComponent( V , 0),  LWCGetComponent( V , 1)),  LWCGetComponent( V , 2)),  LWCGetComponent( V , 3)); }

#line 428 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCScalar Lhs, FLWCScalar Rhs) { return LWCMultiply(Lhs, Rhs); }

#line 429 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCScalar Lhs, float Rhs) { return LWCMultiply(Lhs, Rhs); }

#line 430 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCVector2 Lhs, FLWCVector2 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }

#line 431 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCVector2 Lhs, float2 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }

#line 432 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCVector3 Lhs, FLWCVector3 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }

#line 433 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCVector3 Lhs, float3 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }

#line 434 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCVector4 Lhs, FLWCVector4 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }

#line 435 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCVector4 Lhs, float4 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }

#line 3 "/Engine/Generated/UniformBuffers/View.ush"
cbuffer   View 
{
	 float4x4  View_TranslatedWorldToClip;
	 float4x4  View_RelativeWorldToClip;
	 float4x4  View_ClipToRelativeWorld;
	 float4x4  View_TranslatedWorldToView;
	 float4x4  View_ViewToTranslatedWorld;
	 float4x4  View_TranslatedWorldToCameraView;
	 float4x4  View_CameraViewToTranslatedWorld;
	 float4x4  View_ViewToClip;
	 float4x4  View_ViewToClipNoAA;
	 float4x4  View_ClipToView;
	 float4x4  View_ClipToTranslatedWorld;
	 float4x4  View_SVPositionToTranslatedWorld;
	 float4x4  View_ScreenToRelativeWorld;
	 float4x4  View_ScreenToTranslatedWorld;
	 float4x4  View_MobileMultiviewShadowTransform;
	 float3  View_ViewTilePosition;
	 float  PrePadding_View_972;
	 float3  View_MatrixTilePosition;
	 float  PrePadding_View_988;
	 float3  View_ViewForward;
	 float  PrePadding_View_1004;
	 float3  View_ViewUp;
	 float  PrePadding_View_1020;
	 float3  View_ViewRight;
	 float  PrePadding_View_1036;
	 float3  View_HMDViewNoRollUp;
	 float  PrePadding_View_1052;
	 float3  View_HMDViewNoRollRight;
	 float  PrePadding_View_1068;
	 float4  View_InvDeviceZToWorldZTransform;
	 float4  View_ScreenPositionScaleBias;
	 float3  View_RelativeWorldCameraOrigin;
	 float  PrePadding_View_1116;
	 float3  View_TranslatedWorldCameraOrigin;
	 float  PrePadding_View_1132;
	 float3  View_RelativeWorldViewOrigin;
	 float  PrePadding_View_1148;
	 float3  View_RelativePreViewTranslation;
	 float  PrePadding_View_1164;
	 float4x4  View_PrevViewToClip;
	 float4x4  View_PrevClipToView;
	 float4x4  View_PrevTranslatedWorldToClip;
	 float4x4  View_PrevTranslatedWorldToView;
	 float4x4  View_PrevViewToTranslatedWorld;
	 float4x4  View_PrevTranslatedWorldToCameraView;
	 float4x4  View_PrevCameraViewToTranslatedWorld;
	 float3  View_PrevTranslatedWorldCameraOrigin;
	 float  PrePadding_View_1628;
	 float3  View_PrevRelativeWorldCameraOrigin;
	 float  PrePadding_View_1644;
	 float3  View_PrevRelativeWorldViewOrigin;
	 float  PrePadding_View_1660;
	 float3  View_RelativePrevPreViewTranslation;
	 float  PrePadding_View_1676;
	 float4x4  View_PrevClipToRelativeWorld;
	 float4x4  View_PrevScreenToTranslatedWorld;
	 float4x4  View_ClipToPrevClip;
	 float4x4  View_ClipToPrevClipWithAA;
	 float4  View_TemporalAAJitter;
	 float4  View_GlobalClippingPlane;
	 float2  View_FieldOfViewWideAngles;
	 float2  View_PrevFieldOfViewWideAngles;
	 float4  View_ViewRectMin;
	 float4  View_ViewSizeAndInvSize;
	 uint4  View_ViewRectMinAndSize;
	 float4  View_LightProbeSizeRatioAndInvSizeRatio;
	 float4  View_BufferSizeAndInvSize;
	 float4  View_BufferBilinearUVMinMax;
	 float4  View_ScreenToViewSpace;
	 float2  View_BufferToSceneTextureScale;
	 float2  View_ResolutionFractionAndInv;
	 int  View_NumSceneColorMSAASamples;
	 float  View_ProjectionDepthThicknessScale;
	 float  View_PreExposure;
	 float  View_OneOverPreExposure;
	 float4  View_DiffuseOverrideParameter;
	 float4  View_SpecularOverrideParameter;
	 float4  View_NormalOverrideParameter;
	 float2  View_RoughnessOverrideParameter;
	 float  View_PrevFrameGameTime;
	 float  View_PrevFrameRealTime;
	 float  View_OutOfBoundsMask;
	 float  PrePadding_View_2196;
	 float  PrePadding_View_2200;
	 float  PrePadding_View_2204;
	 float3  View_WorldCameraMovementSinceLastFrame;
	 float  View_CullingSign;
	 float  View_NearPlane;
	 float  View_GameTime;
	 float  View_RealTime;
	 float  View_DeltaTime;
	 float  View_MaterialTextureMipBias;
	 float  View_MaterialTextureDerivativeMultiply;
	 uint  View_Random;
	 uint  View_FrameNumber;
	 uint  View_FrameCounter;
	 uint  View_StateFrameIndexMod8;
	 uint  View_StateFrameIndex;
	 uint  View_DebugViewModeMask;
	 uint  View_WorldIsPaused;
	 float  View_CameraCut;
	 float  View_UnlitViewmodeMask;
	 float  PrePadding_View_2284;
	 float4  View_DirectionalLightColor;
	 float3  View_DirectionalLightDirection;
	 float  PrePadding_View_2316;
	 float4  View_TranslucencyLightingVolumeMin[2];
	 float4  View_TranslucencyLightingVolumeInvSize[2];
	 float4  View_TemporalAAParams;
	 float4  View_CircleDOFParams;
	 float  View_DepthOfFieldSensorWidth;
	 float  View_DepthOfFieldFocalDistance;
	 float  View_DepthOfFieldScale;
	 float  View_DepthOfFieldFocalLength;
	 float  View_DepthOfFieldFocalRegion;
	 float  View_DepthOfFieldNearTransitionRegion;
	 float  View_DepthOfFieldFarTransitionRegion;
	 float  View_MotionBlurNormalizedToPixel;
	 float  View_GeneralPurposeTweak;
	 float  View_GeneralPurposeTweak2;
	 float  View_DemosaicVposOffset;
	 float  View_DecalDepthBias;
	 float3  View_IndirectLightingColorScale;
	 float  PrePadding_View_2476;
	 float3  View_PrecomputedIndirectLightingColorScale;
	 float  PrePadding_View_2492;
	 float3  View_PrecomputedIndirectSpecularColorScale;
	 float  PrePadding_View_2508;
	 float4  View_AtmosphereLightDirection[2];
	 float4  View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	 float4  View_AtmosphereLightIlluminanceOuterSpace[2];
	 float4  View_AtmosphereLightDiscLuminance[2];
	 float4  View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	 float4  View_SkyViewLutSizeAndInvSize;
	 float3  View_SkyCameraTranslatedWorldOrigin;
	 float  PrePadding_View_2700;
	 float4  View_SkyPlanetTranslatedWorldCenterAndViewHeight;
	 float4x4  View_SkyViewLutReferential;
	 float4  View_SkyAtmosphereSkyLuminanceFactor;
	 float  View_SkyAtmospherePresentInScene;
	 float  View_SkyAtmosphereHeightFogContribution;
	 float  View_SkyAtmosphereBottomRadiusKm;
	 float  View_SkyAtmosphereTopRadiusKm;
	 float4  View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	 float  View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	 float  View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	 float  PrePadding_View_2856;
	 float  PrePadding_View_2860;
	 float3  View_NormalCurvatureToRoughnessScaleBias;
	 float  View_RenderingReflectionCaptureMask;
	 float  View_RealTimeReflectionCapture;
	 float  View_RealTimeReflectionCapturePreExposure;
	 float  PrePadding_View_2888;
	 float  PrePadding_View_2892;
	 float4  View_AmbientCubemapTint;
	 float  View_AmbientCubemapIntensity;
	 float  View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	 float  View_SkyLightAffectReflectionFlag;
	 float  View_SkyLightAffectGlobalIlluminationFlag;
	 float4  View_SkyLightColor;
	 float4  View_MobileSkyIrradianceEnvironmentMap[8];
	 float  View_MobilePreviewMode;
	 float  View_HMDEyePaddingOffset;
	 float  View_ReflectionCubemapMaxMip;
	 float  View_ShowDecalsMask;
	 uint  View_DistanceFieldAOSpecularOcclusionMode;
	 float  View_IndirectCapsuleSelfShadowingIntensity;
	 float  PrePadding_View_3096;
	 float  PrePadding_View_3100;
	 float3  View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	 int  View_StereoPassIndex;
	 float4  View_GlobalVolumeTranslatedCenterAndExtent[6];
	 float4  View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	 float4  View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	 float4  View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	 float  View_GlobalDistanceFieldMipFactor;
	 float  View_GlobalDistanceFieldMipTransition;
	 int  View_GlobalDistanceFieldClipmapSizeInPages;
	 int  PrePadding_View_3516;
	 float3  View_GlobalDistanceFieldInvPageAtlasSize;
	 float  PrePadding_View_3532;
	 float3  View_GlobalDistanceFieldInvCoverageAtlasSize;
	 float  View_GlobalVolumeDimension;
	 float  View_GlobalVolumeTexelSize;
	 float  View_MaxGlobalDFAOConeDistance;
	 uint  View_NumGlobalSDFClipmaps;
	 float  View_CoveredExpandSurfaceScale;
	 float  View_NotCoveredExpandSurfaceScale;
	 float  View_NotCoveredMinStepScale;
	 float  View_DitheredTransparencyStepThreshold;
	 float  View_DitheredTransparencyTraceThreshold;
	 int2  View_CursorPosition;
	 float  View_bCheckerboardSubsurfaceProfileRendering;
	 float  PrePadding_View_3596;
	 float3  View_VolumetricFogInvGridSize;
	 float  PrePadding_View_3612;
	 float3  View_VolumetricFogGridZParams;
	 float  PrePadding_View_3628;
	 float2  View_VolumetricFogSVPosToVolumeUV;
	 float2  View_VolumetricFogViewGridUVToPrevViewRectUV;
	 float2  View_VolumetricFogPrevViewGridRectUVToResourceUV;
	 float2  View_VolumetricFogPrevUVMax;
	 float2  View_VolumetricFogScreenToResourceUV;
	 float2  View_VolumetricFogUVMax;
	 float  View_VolumetricFogMaxDistance;
	 float  PrePadding_View_3684;
	 float  PrePadding_View_3688;
	 float  PrePadding_View_3692;
	 float3  View_VolumetricLightmapWorldToUVScale;
	 float  PrePadding_View_3708;
	 float3  View_VolumetricLightmapWorldToUVAdd;
	 float  PrePadding_View_3724;
	 float3  View_VolumetricLightmapIndirectionTextureSize;
	 float  View_VolumetricLightmapBrickSize;
	 float3  View_VolumetricLightmapBrickTexelSize;
	 float  View_IndirectLightingCacheShowFlag;
	 float  View_EyeToPixelSpreadAngle;
	 float  PrePadding_View_3764;
	 float  PrePadding_View_3768;
	 float  PrePadding_View_3772;
	 float4  View_XRPassthroughCameraUVs[2];
	 float  View_GlobalVirtualTextureMipBias;
	 uint  View_VirtualTextureFeedbackShift;
	 uint  View_VirtualTextureFeedbackMask;
	 uint  View_VirtualTextureFeedbackStride;
	 uint  View_VirtualTextureFeedbackJitterOffset;
	 uint  View_VirtualTextureFeedbackSampleOffset;
	 uint  PrePadding_View_3832;
	 uint  PrePadding_View_3836;
	 float4  View_RuntimeVirtualTextureMipLevel;
	 float2  View_RuntimeVirtualTexturePackHeight;
	 float  PrePadding_View_3864;
	 float  PrePadding_View_3868;
	 float4  View_RuntimeVirtualTextureDebugParams;
	 float  View_OverrideLandscapeLOD;
	 int  View_FarShadowStaticMeshLODBias;
	 float  View_MinRoughness;
	 float  PrePadding_View_3900;
	 float4  View_HairRenderInfo;
	 uint  View_EnableSkyLight;
	 uint  View_HairRenderInfoBits;
	 uint  View_HairComponents;
	 float  View_bSubsurfacePostprocessEnabled;
	 float4  View_SSProfilesTextureSizeAndInvSize;
	 float4  View_SSProfilesPreIntegratedTextureSizeAndInvSize;
	 float4  View_SpecularProfileTextureSizeAndInvSize;
	 float3  View_PhysicsFieldClipmapCenter;
	 float  View_PhysicsFieldClipmapDistance;
	 int  View_PhysicsFieldClipmapResolution;
	 int  View_PhysicsFieldClipmapExponent;
	 int  View_PhysicsFieldClipmapCount;
	 int  View_PhysicsFieldTargetCount;
	 int4  View_PhysicsFieldTargets[32];
	 uint  View_GPUSceneViewId;
	 float  View_ViewResolutionFraction;
	 float  View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	 float  PrePadding_View_4540;
	 float4  View_TanAndInvTanHalfFOV;
	 float4  View_PrevTanAndInvTanHalfFOV;
	 float4  View_GlintLUTParameters0;
	 float4  View_GlintLUTParameters1;
	 uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler ;
	 uint  PrePadding_View_4612;
	 uint BindlessSampler_View_MaterialTextureBilinearClampedSampler ;
	 uint  PrePadding_View_4620;
	 uint BindlessResource_View_VolumetricLightmapIndirectionTexture ;
	 uint  PrePadding_View_4628;
	 uint BindlessResource_View_VolumetricLightmapBrickAmbientVector ;
	 uint  PrePadding_View_4636;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0 ;
	 uint  PrePadding_View_4644;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1 ;
	 uint  PrePadding_View_4652;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2 ;
	 uint  PrePadding_View_4660;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3 ;
	 uint  PrePadding_View_4668;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4 ;
	 uint  PrePadding_View_4676;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5 ;
	 uint  PrePadding_View_4684;
	 uint BindlessResource_View_SkyBentNormalBrickTexture ;
	 uint  PrePadding_View_4692;
	 uint BindlessResource_View_DirectionalLightShadowingBrickTexture ;
	 uint  PrePadding_View_4700;
	 uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler ;
	 uint  PrePadding_View_4708;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler0 ;
	 uint  PrePadding_View_4716;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler1 ;
	 uint  PrePadding_View_4724;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler2 ;
	 uint  PrePadding_View_4732;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler3 ;
	 uint  PrePadding_View_4740;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler4 ;
	 uint  PrePadding_View_4748;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler5 ;
	 uint  PrePadding_View_4756;
	 uint BindlessSampler_View_SkyBentNormalTextureSampler ;
	 uint  PrePadding_View_4764;
	 uint BindlessSampler_View_DirectionalLightShadowingTextureSampler ;
	 uint  PrePadding_View_4772;
	 uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture ;
	 uint  PrePadding_View_4780;
	 uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture ;
	 uint  PrePadding_View_4788;
	 uint BindlessResource_View_GlobalDistanceFieldPageTableTexture ;
	 uint  PrePadding_View_4796;
	 uint BindlessResource_View_GlobalDistanceFieldMipTexture ;
	 uint  PrePadding_View_4804;
	 uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler ;
	 uint  PrePadding_View_4812;
	 uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler ;
	 uint  PrePadding_View_4820;
	 uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler ;
	 uint  PrePadding_View_4828;
	 uint BindlessResource_View_AtmosphereTransmittanceTexture ;
	 uint  PrePadding_View_4836;
	 uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler ;
	 uint  PrePadding_View_4844;
	 uint BindlessResource_View_AtmosphereIrradianceTexture ;
	 uint  PrePadding_View_4852;
	 uint BindlessSampler_View_AtmosphereIrradianceTextureSampler ;
	 uint  PrePadding_View_4860;
	 uint BindlessResource_View_AtmosphereInscatterTexture ;
	 uint  PrePadding_View_4868;
	 uint BindlessSampler_View_AtmosphereInscatterTextureSampler ;
	 uint  PrePadding_View_4876;
	 uint BindlessResource_View_PerlinNoiseGradientTexture ;
	 uint  PrePadding_View_4884;
	 uint BindlessSampler_View_PerlinNoiseGradientTextureSampler ;
	 uint  PrePadding_View_4892;
	 uint BindlessResource_View_PerlinNoise3DTexture ;
	 uint  PrePadding_View_4900;
	 uint BindlessSampler_View_PerlinNoise3DTextureSampler ;
	 uint  PrePadding_View_4908;
	 uint BindlessResource_View_SobolSamplingTexture ;
	 uint  PrePadding_View_4916;
	 uint BindlessSampler_View_SharedPointWrappedSampler ;
	 uint  PrePadding_View_4924;
	 uint BindlessSampler_View_SharedPointClampedSampler ;
	 uint  PrePadding_View_4932;
	 uint BindlessSampler_View_SharedBilinearWrappedSampler ;
	 uint  PrePadding_View_4940;
	 uint BindlessSampler_View_SharedBilinearClampedSampler ;
	 uint  PrePadding_View_4948;
	 uint BindlessSampler_View_SharedBilinearAnisoClampedSampler ;
	 uint  PrePadding_View_4956;
	 uint BindlessSampler_View_SharedTrilinearWrappedSampler ;
	 uint  PrePadding_View_4964;
	 uint BindlessSampler_View_SharedTrilinearClampedSampler ;
	 uint  PrePadding_View_4972;
	 uint BindlessResource_View_PreIntegratedBRDF ;
	 uint  PrePadding_View_4980;
	 uint BindlessSampler_View_PreIntegratedBRDFSampler ;
	 uint  PrePadding_View_4988;
	 uint BindlessResource_View_SkyIrradianceEnvironmentMap ;
	 uint  PrePadding_View_4996;
	 uint BindlessResource_View_TransmittanceLutTexture ;
	 uint  PrePadding_View_5004;
	 uint BindlessSampler_View_TransmittanceLutTextureSampler ;
	 uint  PrePadding_View_5012;
	 uint BindlessResource_View_SkyViewLutTexture ;
	 uint  PrePadding_View_5020;
	 uint BindlessSampler_View_SkyViewLutTextureSampler ;
	 uint  PrePadding_View_5028;
	 uint BindlessResource_View_DistantSkyLightLutTexture ;
	 uint  PrePadding_View_5036;
	 uint BindlessSampler_View_DistantSkyLightLutTextureSampler ;
	 uint  PrePadding_View_5044;
	 uint BindlessResource_View_CameraAerialPerspectiveVolume ;
	 uint  PrePadding_View_5052;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler ;
	 uint  PrePadding_View_5060;
	 uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly ;
	 uint  PrePadding_View_5068;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler ;
	 uint  PrePadding_View_5076;
	 uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly ;
	 uint  PrePadding_View_5084;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler ;
	 uint  PrePadding_View_5092;
	 uint BindlessResource_View_HairScatteringLUTTexture ;
	 uint  PrePadding_View_5100;
	 uint BindlessSampler_View_HairScatteringLUTSampler ;
	 uint  PrePadding_View_5108;
	 uint BindlessResource_View_GGXLTCMatTexture ;
	 uint  PrePadding_View_5116;
	 uint BindlessSampler_View_GGXLTCMatSampler ;
	 uint  PrePadding_View_5124;
	 uint BindlessResource_View_GGXLTCAmpTexture ;
	 uint  PrePadding_View_5132;
	 uint BindlessSampler_View_GGXLTCAmpSampler ;
	 uint  PrePadding_View_5140;
	 uint BindlessResource_View_SheenLTCTexture ;
	 uint  PrePadding_View_5148;
	 uint BindlessSampler_View_SheenLTCSampler ;
	 uint  PrePadding_View_5156;
	 uint  View_bShadingEnergyConservation;
	 uint  View_bShadingEnergyPreservation;
	 uint BindlessResource_View_ShadingEnergyGGXSpecTexture ;
	 uint  PrePadding_View_5172;
	 uint BindlessResource_View_ShadingEnergyGGXGlassTexture ;
	 uint  PrePadding_View_5180;
	 uint BindlessResource_View_ShadingEnergyClothSpecTexture ;
	 uint  PrePadding_View_5188;
	 uint BindlessResource_View_ShadingEnergyDiffuseTexture ;
	 uint  PrePadding_View_5196;
	 uint BindlessSampler_View_ShadingEnergySampler ;
	 uint  PrePadding_View_5204;
	 uint BindlessResource_View_GlintTexture ;
	 uint  PrePadding_View_5212;
	 uint BindlessSampler_View_GlintSampler ;
	 uint  PrePadding_View_5220;
	 uint BindlessResource_View_SimpleVolumeTexture ;
	 uint  PrePadding_View_5228;
	 uint BindlessSampler_View_SimpleVolumeTextureSampler ;
	 uint  PrePadding_View_5236;
	 uint BindlessResource_View_SimpleVolumeEnvTexture ;
	 uint  PrePadding_View_5244;
	 uint BindlessSampler_View_SimpleVolumeEnvTextureSampler ;
	 uint  PrePadding_View_5252;
	 uint BindlessResource_View_SSProfilesTexture ;
	 uint  PrePadding_View_5260;
	 uint BindlessSampler_View_SSProfilesSampler ;
	 uint  PrePadding_View_5268;
	 uint BindlessSampler_View_SSProfilesTransmissionSampler ;
	 uint  PrePadding_View_5276;
	 uint BindlessResource_View_SSProfilesPreIntegratedTexture ;
	 uint  PrePadding_View_5284;
	 uint BindlessSampler_View_SSProfilesPreIntegratedSampler ;
	 uint  PrePadding_View_5292;
	 uint BindlessResource_View_SpecularProfileTexture ;
	 uint  PrePadding_View_5300;
	 uint BindlessSampler_View_SpecularProfileSampler ;
	 uint  PrePadding_View_5308;
	 uint BindlessResource_View_WaterIndirection ;
	 uint  PrePadding_View_5316;
	 uint BindlessResource_View_WaterData ;
	 uint  PrePadding_View_5324;
	 float4  View_RectLightAtlasSizeAndInvSize;
	 float  View_RectLightAtlasMaxMipLevel;
	 float  PrePadding_View_5348;
	 uint BindlessResource_View_RectLightAtlasTexture ;
	 uint  PrePadding_View_5356;
	 uint BindlessSampler_View_RectLightAtlasSampler ;
	 uint  PrePadding_View_5364;
	 uint  PrePadding_View_5368;
	 uint  PrePadding_View_5372;
	 float4  View_IESAtlasSizeAndInvSize;
	 uint BindlessResource_View_IESAtlasTexture ;
	 uint  PrePadding_View_5396;
	 uint BindlessSampler_View_IESAtlasSampler ;
	 uint  PrePadding_View_5404;
	 uint BindlessSampler_View_LandscapeWeightmapSampler ;
	 uint  PrePadding_View_5412;
	 uint BindlessResource_View_LandscapeIndirection ;
	 uint  PrePadding_View_5420;
	 uint BindlessResource_View_LandscapePerComponentData ;
	 uint  PrePadding_View_5428;
	 uint BindlessResource_View_VTFeedbackBuffer ;
	 uint  PrePadding_View_5436;
	 uint BindlessResource_View_PhysicsFieldClipmapBuffer ;
	 uint  PrePadding_View_5444;
	 uint  PrePadding_View_5448;
	 uint  PrePadding_View_5452;
	 float3  View_TLASRelativePreViewTranslation;
	 float  PrePadding_View_5468;
	 float3  View_TLASViewTilePosition;
}

#line 501 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_GlobalDistanceFieldPageAtlasTexture;

#line 503 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D<uint>  View_GlobalDistanceFieldPageTableTexture;

#line 520 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedPointClampedSampler;

#line 522 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedBilinearClampedSampler;

#line 524 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedTrilinearWrappedSampler;

#line 528 "/Engine/Generated/UniformBuffers/View.ush"
StructuredBuffer<float4>  View_SkyIrradianceEnvironmentMap;

#line 3 "/Engine/Generated/UniformBuffers/Primitive.ush"
cbuffer   Primitive 
{
	 uint  Primitive_Flags;
	 uint  Primitive_InstanceSceneDataOffset;
	 uint  Primitive_NumInstanceSceneDataEntries;
	 int  Primitive_SingleCaptureIndex;
	 float3  Primitive_TilePosition;
	 uint  Primitive_PrimitiveComponentId;
	 float4x4  Primitive_LocalToRelativeWorld;
	 float4x4  Primitive_RelativeWorldToLocal;
	 float4x4  Primitive_PreviousLocalToRelativeWorld;
	 float4x4  Primitive_PreviousRelativeWorldToLocal;
	 float4x4  Primitive_WorldToPreviousWorld;
	 float3  Primitive_InvNonUniformScale;
	 float  Primitive_ObjectBoundsX;
	 float4  Primitive_ObjectRelativeWorldPositionAndRadius;
	 float3  Primitive_ActorRelativeWorldPosition;
	 uint  Primitive_LightmapUVIndex;
	 float3  Primitive_ObjectOrientation;
	 uint  Primitive_LightmapDataIndex;
	 float4  Primitive_NonUniformScale;
	 float3  Primitive_PreSkinnedLocalBoundsMin;
	 uint  Primitive_NaniteResourceID;
	 float3  Primitive_PreSkinnedLocalBoundsMax;
	 uint  Primitive_NaniteHierarchyOffset;
	 float3  Primitive_LocalObjectBoundsMin;
	 float  Primitive_ObjectBoundsY;
	 float3  Primitive_LocalObjectBoundsMax;
	 float  Primitive_ObjectBoundsZ;
	 float3  Primitive_InstanceLocalBoundsCenter;
	 uint  Primitive_InstancePayloadDataOffset;
	 float3  Primitive_InstanceLocalBoundsExtent;
	 uint  Primitive_InstancePayloadDataStride;
	 uint  Primitive_InstancePayloadExtensionSize;
	 uint  PrePadding_Primitive_532;
	 uint  PrePadding_Primitive_536;
	 uint  PrePadding_Primitive_540;
	 float3  Primitive_WireframeColor;
	 uint  Primitive_PackedNaniteFlags;
	 float3  Primitive_LevelColor;
	 int  Primitive_PersistentPrimitiveIndex;
	 float2  Primitive_InstanceDrawDistanceMinMaxSquared;
	 float  Primitive_InstanceWPODisableDistanceSquared;
	 uint  Primitive_NaniteRayTracingDataOffset;
	 float  Primitive_MaxWPOExtent;
	 float  Primitive_MinMaterialDisplacement;
	 float  Primitive_MaxMaterialDisplacement;
	 uint  Primitive_CustomStencilValueAndMask;
	 uint  Primitive_VisibilityFlags;
	 uint  PrePadding_Primitive_612;
	 uint  PrePadding_Primitive_616;
	 uint  PrePadding_Primitive_620;
	 float4  Primitive_CustomPrimitiveData[9];
}

#line 22 "/Engine/Generated/UniformBuffers/Scene.ush"
StructuredBuffer<float4>  Scene_GPUScene_GPUScenePrimitiveSceneData;

#line 23 "/Engine/Generated/UniformBuffers/Scene.ush"
StructuredBuffer<float4>  Scene_GPUScene_GPUSceneLightmapData;

#line 3 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
cbuffer   TranslucentBasePass 
{
	 uint  TranslucentBasePass_Shared_Forward_NumLocalLights;
	 uint  TranslucentBasePass_Shared_Forward_NumReflectionCaptures;
	 uint  TranslucentBasePass_Shared_Forward_HasDirectionalLight;
	 uint  TranslucentBasePass_Shared_Forward_NumGridCells;
	 int3  TranslucentBasePass_Shared_Forward_CulledGridSize;
	 uint  TranslucentBasePass_Shared_Forward_MaxCulledLightsPerCell;
	 uint  TranslucentBasePass_Shared_Forward_LightGridPixelSizeShift;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_36;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_40;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_44;
	 float3  TranslucentBasePass_Shared_Forward_LightGridZParams;
	 float  PrePadding_TranslucentBasePass_Shared_Forward_60;
	 float3  TranslucentBasePass_Shared_Forward_DirectionalLightDirection;
	 float  TranslucentBasePass_Shared_Forward_DirectionalLightSourceRadius;
	 float3  TranslucentBasePass_Shared_Forward_DirectionalLightColor;
	 float  TranslucentBasePass_Shared_Forward_DirectionalLightVolumetricScatteringIntensity;
	 uint  TranslucentBasePass_Shared_Forward_DirectionalLightShadowMapChannelMask;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_100;
	 float2  TranslucentBasePass_Shared_Forward_DirectionalLightDistanceFadeMAD;
	 uint  TranslucentBasePass_Shared_Forward_NumDirectionalLightCascades;
	 int  TranslucentBasePass_Shared_Forward_DirectionalLightVSM;
	 int  PrePadding_TranslucentBasePass_Shared_Forward_120;
	 int  PrePadding_TranslucentBasePass_Shared_Forward_124;
	 float4  TranslucentBasePass_Shared_Forward_CascadeEndDepths;
	 float4x4  TranslucentBasePass_Shared_Forward_DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapMinMax[4];
	 float4  TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapAtlasBufferSize;
	 float  TranslucentBasePass_Shared_Forward_DirectionalLightDepthBias;
	 uint  TranslucentBasePass_Shared_Forward_DirectionalLightUseStaticShadowing;
	 uint  TranslucentBasePass_Shared_Forward_SimpleLightsEndIndex;
	 uint  TranslucentBasePass_Shared_Forward_ClusteredDeferredSupportedEndIndex;
	 uint  TranslucentBasePass_Shared_Forward_LumenSupportedStartIndex;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_500;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_504;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_508;
	 float4  TranslucentBasePass_Shared_Forward_DirectionalLightStaticShadowBufferSize;
	 float4x4  TranslucentBasePass_Shared_Forward_DirectionalLightTranslatedWorldToStaticShadow;
	 uint  TranslucentBasePass_Shared_Forward_DirectLightingShowFlag;
	 float  PrePadding_TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_596;
	 float  PrePadding_TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_600;
	 float  PrePadding_TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_604;
	 float  TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_ScreenRayLength;
	 int  TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTRayCount;
	 int  TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTSamplesPerRay;
	 float  TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTRayLengthScale;
	 float  TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;
	 float  TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTTexelDitherScale;
	 float  TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;
	 float  TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;
	 uint  TranslucentBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_644;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_648;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_652;
	 uint BindlessResource_TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapAtlas ;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_660;
	 uint BindlessSampler_TranslucentBasePass_Shared_Forward_ShadowmapSampler ;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_668;
	 uint BindlessResource_TranslucentBasePass_Shared_Forward_DirectionalLightStaticShadowmap ;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_676;
	 uint BindlessSampler_TranslucentBasePass_Shared_Forward_StaticShadowmapSampler ;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_684;
	 uint BindlessResource_TranslucentBasePass_Shared_Forward_ForwardLocalLightBuffer ;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_692;
	 uint BindlessResource_TranslucentBasePass_Shared_Forward_NumCulledLightsGrid ;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_700;
	 uint BindlessResource_TranslucentBasePass_Shared_Forward_CulledLightDataGrid32Bit ;
	 uint  PrePadding_TranslucentBasePass_Shared_Forward_708;
	 uint BindlessResource_TranslucentBasePass_Shared_Forward_CulledLightDataGrid16Bit ;
	 float  PrePadding_TranslucentBasePass_Shared_ForwardISR_716;
	 uint  TranslucentBasePass_Shared_ForwardISR_NumLocalLights;
	 uint  TranslucentBasePass_Shared_ForwardISR_NumReflectionCaptures;
	 uint  TranslucentBasePass_Shared_ForwardISR_HasDirectionalLight;
	 uint  TranslucentBasePass_Shared_ForwardISR_NumGridCells;
	 int3  TranslucentBasePass_Shared_ForwardISR_CulledGridSize;
	 uint  TranslucentBasePass_Shared_ForwardISR_MaxCulledLightsPerCell;
	 uint  TranslucentBasePass_Shared_ForwardISR_LightGridPixelSizeShift;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_756;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_760;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_764;
	 float3  TranslucentBasePass_Shared_ForwardISR_LightGridZParams;
	 float  PrePadding_TranslucentBasePass_Shared_ForwardISR_780;
	 float3  TranslucentBasePass_Shared_ForwardISR_DirectionalLightDirection;
	 float  TranslucentBasePass_Shared_ForwardISR_DirectionalLightSourceRadius;
	 float3  TranslucentBasePass_Shared_ForwardISR_DirectionalLightColor;
	 float  TranslucentBasePass_Shared_ForwardISR_DirectionalLightVolumetricScatteringIntensity;
	 uint  TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowMapChannelMask;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_820;
	 float2  TranslucentBasePass_Shared_ForwardISR_DirectionalLightDistanceFadeMAD;
	 uint  TranslucentBasePass_Shared_ForwardISR_NumDirectionalLightCascades;
	 int  TranslucentBasePass_Shared_ForwardISR_DirectionalLightVSM;
	 int  PrePadding_TranslucentBasePass_Shared_ForwardISR_840;
	 int  PrePadding_TranslucentBasePass_Shared_ForwardISR_844;
	 float4  TranslucentBasePass_Shared_ForwardISR_CascadeEndDepths;
	 float4x4  TranslucentBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapMinMax[4];
	 float4  TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlasBufferSize;
	 float  TranslucentBasePass_Shared_ForwardISR_DirectionalLightDepthBias;
	 uint  TranslucentBasePass_Shared_ForwardISR_DirectionalLightUseStaticShadowing;
	 uint  TranslucentBasePass_Shared_ForwardISR_SimpleLightsEndIndex;
	 uint  TranslucentBasePass_Shared_ForwardISR_ClusteredDeferredSupportedEndIndex;
	 uint  TranslucentBasePass_Shared_ForwardISR_LumenSupportedStartIndex;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1220;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1224;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1228;
	 float4  TranslucentBasePass_Shared_ForwardISR_DirectionalLightStaticShadowBufferSize;
	 float4x4  TranslucentBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToStaticShadow;
	 uint  TranslucentBasePass_Shared_ForwardISR_DirectLightingShowFlag;
	 float  PrePadding_TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1316;
	 float  PrePadding_TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1320;
	 float  PrePadding_TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1324;
	 float  TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_ScreenRayLength;
	 int  TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTRayCount;
	 int  TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTSamplesPerRay;
	 float  TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTRayLengthScale;
	 float  TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;
	 float  TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTTexelDitherScale;
	 float  TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;
	 float  TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;
	 uint  TranslucentBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1364;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1368;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1372;
	 uint BindlessResource_TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas ;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1380;
	 uint BindlessSampler_TranslucentBasePass_Shared_ForwardISR_ShadowmapSampler ;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1388;
	 uint BindlessResource_TranslucentBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap ;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1396;
	 uint BindlessSampler_TranslucentBasePass_Shared_ForwardISR_StaticShadowmapSampler ;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1404;
	 uint BindlessResource_TranslucentBasePass_Shared_ForwardISR_ForwardLocalLightBuffer ;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1412;
	 uint BindlessResource_TranslucentBasePass_Shared_ForwardISR_NumCulledLightsGrid ;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1420;
	 uint BindlessResource_TranslucentBasePass_Shared_ForwardISR_CulledLightDataGrid32Bit ;
	 uint  PrePadding_TranslucentBasePass_Shared_ForwardISR_1428;
	 uint BindlessResource_TranslucentBasePass_Shared_ForwardISR_CulledLightDataGrid16Bit ;
	 float  PrePadding_TranslucentBasePass_Shared_Reflection_1436;
	 float4  TranslucentBasePass_Shared_Reflection_SkyLightParameters;
	 uint BindlessResource_TranslucentBasePass_Shared_Reflection_SkyLightCubemap ;
	 uint  PrePadding_TranslucentBasePass_Shared_Reflection_1460;
	 uint BindlessSampler_TranslucentBasePass_Shared_Reflection_SkyLightCubemapSampler ;
	 uint  PrePadding_TranslucentBasePass_Shared_Reflection_1468;
	 uint BindlessResource_TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap ;
	 uint  PrePadding_TranslucentBasePass_Shared_Reflection_1476;
	 uint BindlessSampler_TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler ;
	 uint  PrePadding_TranslucentBasePass_Shared_Reflection_1484;
	 uint BindlessResource_TranslucentBasePass_Shared_Reflection_ReflectionCubemap ;
	 uint  PrePadding_TranslucentBasePass_Shared_Reflection_1492;
	 uint BindlessSampler_TranslucentBasePass_Shared_Reflection_ReflectionCubemapSampler ;
	 uint  PrePadding_TranslucentBasePass_Shared_Reflection_1500;
	 uint BindlessResource_TranslucentBasePass_Shared_Reflection_PreIntegratedGF ;
	 uint  PrePadding_TranslucentBasePass_Shared_Reflection_1508;
	 uint BindlessSampler_TranslucentBasePass_Shared_Reflection_PreIntegratedGFSampler ;
	 float  PrePadding_TranslucentBasePass_Shared_PlanarReflection_1516;
	 float4  TranslucentBasePass_Shared_PlanarReflection_ReflectionPlane;
	 float4  TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionOrigin;
	 float4  TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionXAxis;
	 float4  TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionYAxis;
	 float3x4  TranslucentBasePass_Shared_PlanarReflection_InverseTransposeMirrorMatrix;
	 float3  TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionParameters;
	 float  PrePadding_TranslucentBasePass_Shared_PlanarReflection_1644;
	 float2  TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionParameters2;
	 float  PrePadding_TranslucentBasePass_Shared_PlanarReflection_1656;
	 float  PrePadding_TranslucentBasePass_Shared_PlanarReflection_1660;
	 float4x4  TranslucentBasePass_Shared_PlanarReflection_ProjectionWithExtraFOV[2];
	 float4  TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionScreenScaleBias[2];
	 float2  TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionScreenBound;
	 uint  TranslucentBasePass_Shared_PlanarReflection_bIsStereo;
	 uint  PrePadding_TranslucentBasePass_Shared_PlanarReflection_1836;
	 uint BindlessResource_TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionTexture ;
	 uint  PrePadding_TranslucentBasePass_Shared_PlanarReflection_1844;
	 uint BindlessSampler_TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionSampler ;
	 float  PrePadding_TranslucentBasePass_Shared_Fog_1852;
	 float4  TranslucentBasePass_Shared_Fog_ExponentialFogParameters;
	 float4  TranslucentBasePass_Shared_Fog_ExponentialFogParameters2;
	 float4  TranslucentBasePass_Shared_Fog_ExponentialFogColorParameter;
	 float4  TranslucentBasePass_Shared_Fog_ExponentialFogParameters3;
	 float4  TranslucentBasePass_Shared_Fog_SkyAtmosphereAmbientContributionColorScale;
	 float4  TranslucentBasePass_Shared_Fog_InscatteringLightDirection;
	 float4  TranslucentBasePass_Shared_Fog_DirectionalInscatteringColor;
	 float2  TranslucentBasePass_Shared_Fog_SinCosInscatteringColorCubemapRotation;
	 float  PrePadding_TranslucentBasePass_Shared_Fog_1976;
	 float  PrePadding_TranslucentBasePass_Shared_Fog_1980;
	 float3  TranslucentBasePass_Shared_Fog_FogInscatteringTextureParameters;
	 float  TranslucentBasePass_Shared_Fog_ApplyVolumetricFog;
	 float  TranslucentBasePass_Shared_Fog_VolumetricFogStartDistance;
	 float  TranslucentBasePass_Shared_Fog_VolumetricFogNearFadeInDistanceInv;
	 uint BindlessResource_TranslucentBasePass_Shared_Fog_FogInscatteringColorCubemap ;
	 uint  PrePadding_TranslucentBasePass_Shared_Fog_2012;
	 uint BindlessSampler_TranslucentBasePass_Shared_Fog_FogInscatteringColorSampler ;
	 uint  PrePadding_TranslucentBasePass_Shared_Fog_2020;
	 uint BindlessResource_TranslucentBasePass_Shared_Fog_IntegratedLightScattering ;
	 uint  PrePadding_TranslucentBasePass_Shared_Fog_2028;
	 uint BindlessSampler_TranslucentBasePass_Shared_Fog_IntegratedLightScatteringSampler ;
	 float  PrePadding_TranslucentBasePass_Shared_FogISR_2036;
	 float  PrePadding_TranslucentBasePass_Shared_FogISR_2040;
	 float  PrePadding_TranslucentBasePass_Shared_FogISR_2044;
	 float4  TranslucentBasePass_Shared_FogISR_ExponentialFogParameters;
	 float4  TranslucentBasePass_Shared_FogISR_ExponentialFogParameters2;
	 float4  TranslucentBasePass_Shared_FogISR_ExponentialFogColorParameter;
	 float4  TranslucentBasePass_Shared_FogISR_ExponentialFogParameters3;
	 float4  TranslucentBasePass_Shared_FogISR_SkyAtmosphereAmbientContributionColorScale;
	 float4  TranslucentBasePass_Shared_FogISR_InscatteringLightDirection;
	 float4  TranslucentBasePass_Shared_FogISR_DirectionalInscatteringColor;
	 float2  TranslucentBasePass_Shared_FogISR_SinCosInscatteringColorCubemapRotation;
	 float  PrePadding_TranslucentBasePass_Shared_FogISR_2168;
	 float  PrePadding_TranslucentBasePass_Shared_FogISR_2172;
	 float3  TranslucentBasePass_Shared_FogISR_FogInscatteringTextureParameters;
	 float  TranslucentBasePass_Shared_FogISR_ApplyVolumetricFog;
	 float  TranslucentBasePass_Shared_FogISR_VolumetricFogStartDistance;
	 float  TranslucentBasePass_Shared_FogISR_VolumetricFogNearFadeInDistanceInv;
	 uint BindlessResource_TranslucentBasePass_Shared_FogISR_FogInscatteringColorCubemap ;
	 uint  PrePadding_TranslucentBasePass_Shared_FogISR_2204;
	 uint BindlessSampler_TranslucentBasePass_Shared_FogISR_FogInscatteringColorSampler ;
	 uint  PrePadding_TranslucentBasePass_Shared_FogISR_2212;
	 uint BindlessResource_TranslucentBasePass_Shared_FogISR_IntegratedLightScattering ;
	 uint  PrePadding_TranslucentBasePass_Shared_FogISR_2220;
	 uint BindlessSampler_TranslucentBasePass_Shared_FogISR_IntegratedLightScatteringSampler ;
	 float  PrePadding_TranslucentBasePass_Shared_2228;
	 float  PrePadding_TranslucentBasePass_Shared_2232;
	 float  PrePadding_TranslucentBasePass_Shared_2236;
	 uint  TranslucentBasePass_Shared_UseBasePassSkylight;
	 float  PrePadding_TranslucentBasePass_SceneTextures_2244;
	 float  PrePadding_TranslucentBasePass_SceneTextures_2248;
	 float  PrePadding_TranslucentBasePass_SceneTextures_2252;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_SceneColorTexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2260;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_SceneDepthTexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2268;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_ScenePartialDepthTexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2276;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_GBufferATexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2284;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_GBufferBTexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2292;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_GBufferCTexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2300;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_GBufferDTexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2308;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_GBufferETexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2316;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_GBufferFTexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2324;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_GBufferVelocityTexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2332;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_ScreenSpaceAOTexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2340;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_CustomDepthTexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2348;
	 uint BindlessResource_TranslucentBasePass_SceneTextures_CustomStencilTexture ;
	 uint  PrePadding_TranslucentBasePass_SceneTextures_2356;
	 uint BindlessSampler_TranslucentBasePass_SceneTextures_PointClampSampler ;
	 float  PrePadding_TranslucentBasePass_Strata_2364;
	 uint  TranslucentBasePass_Strata_MaxBytesPerPixel;
	 uint  TranslucentBasePass_Strata_bRoughDiffuse;
	 uint  TranslucentBasePass_Strata_PeelLayersAboveDepth;
	 uint  TranslucentBasePass_Strata_bRoughnessTracking;
	 int  TranslucentBasePass_Strata_FirstSliceStoringStrataSSSData;
	 int  PrePadding_TranslucentBasePass_Strata_2388;
	 uint BindlessResource_TranslucentBasePass_Strata_MaterialTextureArray ;
	 uint  PrePadding_TranslucentBasePass_Strata_2396;
	 uint BindlessResource_TranslucentBasePass_Strata_TopLayerTexture ;
	 float  PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2404;
	 float  PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2408;
	 float  PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2412;
	 float4x4  TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapTranslatedWorldToLightClipMatrix;
	 float  TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapFarDepthKm;
	 float  PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2484;
	 uint BindlessResource_TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapTexture ;
	 uint  PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2492;
	 uint BindlessSampler_TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapSampler ;
	 uint  PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2500;
	 float  TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapStrength;
	 float  PrePadding_TranslucentBasePass_OIT_2508;
	 uint  TranslucentBasePass_OIT_bOITEnable;
	 uint  TranslucentBasePass_OIT_OITMethod;
	 uint  TranslucentBasePass_OIT_MaxSideSamplePerPixel;
	 uint  TranslucentBasePass_OIT_MaxSamplePerPixel;
	 uint  TranslucentBasePass_OIT_TransmittanceThreshold;
	 uint  PrePadding_TranslucentBasePass_OIT_2532;
	 uint BindlessResource_TranslucentBasePass_OIT_OutOITSampleCount ;
	 uint  PrePadding_TranslucentBasePass_OIT_2540;
	 uint BindlessResource_TranslucentBasePass_OIT_OutOITSampleColor ;
	 uint  PrePadding_TranslucentBasePass_OIT_2548;
	 uint BindlessResource_TranslucentBasePass_OIT_OutOITSampleTrans ;
	 uint  PrePadding_TranslucentBasePass_OIT_2556;
	 uint BindlessResource_TranslucentBasePass_OIT_OutOITSampleDepth ;
	 float  PrePadding_TranslucentBasePass_2564;
	 float  PrePadding_TranslucentBasePass_2568;
	 float  PrePadding_TranslucentBasePass_2572;
	 float4  TranslucentBasePass_HZBUvFactorAndInvFactor;
	 float4  TranslucentBasePass_PrevScreenPositionScaleBias;
	 float2  TranslucentBasePass_PrevSceneColorBilinearUVMin;
	 float2  TranslucentBasePass_PrevSceneColorBilinearUVMax;
	 float  TranslucentBasePass_PrevSceneColorPreExposureInv;
	 int  TranslucentBasePass_SSRQuality;
	 uint BindlessResource_TranslucentBasePass_HZBTexture ;
	 uint  PrePadding_TranslucentBasePass_2636;
	 uint BindlessSampler_TranslucentBasePass_HZBSampler ;
	 uint  PrePadding_TranslucentBasePass_2644;
	 uint BindlessResource_TranslucentBasePass_PrevSceneColor ;
	 uint  PrePadding_TranslucentBasePass_2652;
	 uint BindlessSampler_TranslucentBasePass_PrevSceneColorSampler ;
	 uint  PrePadding_TranslucentBasePass_2660;
	 uint BindlessResource_TranslucentBasePass_VolumetricCloudColor ;
	 uint  PrePadding_TranslucentBasePass_2668;
	 uint BindlessSampler_TranslucentBasePass_VolumetricCloudColorSampler ;
	 uint  PrePadding_TranslucentBasePass_2676;
	 uint BindlessResource_TranslucentBasePass_VolumetricCloudDepth ;
	 uint  PrePadding_TranslucentBasePass_2684;
	 uint BindlessSampler_TranslucentBasePass_VolumetricCloudDepthSampler ;
	 uint  PrePadding_TranslucentBasePass_2692;
	 float  TranslucentBasePass_ApplyVolumetricCloudOnTransparent;
	 float  TranslucentBasePass_SoftBlendingDistanceKm;
	 uint BindlessResource_TranslucentBasePass_TranslucencyLightingVolumeAmbientInner ;
	 uint  PrePadding_TranslucentBasePass_2708;
	 uint BindlessResource_TranslucentBasePass_TranslucencyLightingVolumeAmbientOuter ;
	 uint  PrePadding_TranslucentBasePass_2716;
	 uint BindlessResource_TranslucentBasePass_TranslucencyLightingVolumeDirectionalInner ;
	 uint  PrePadding_TranslucentBasePass_2724;
	 uint BindlessResource_TranslucentBasePass_TranslucencyLightingVolumeDirectionalOuter ;
	 float  PrePadding_TranslucentBasePass_2732;
	 float  TranslucentBasePass_ReprojectionRadiusScale;
	 float  TranslucentBasePass_ClipmapWorldExtent;
	 float  TranslucentBasePass_ClipmapDistributionBase;
	 float  TranslucentBasePass_InvClipmapFadeSize;
	 int2  TranslucentBasePass_ProbeAtlasResolutionInProbes;
	 uint  TranslucentBasePass_RadianceProbeClipmapResolution;
	 uint  TranslucentBasePass_NumRadianceProbeClipmaps;
	 uint  TranslucentBasePass_RadianceProbeResolution;
	 uint  TranslucentBasePass_FinalProbeResolution;
	 uint  TranslucentBasePass_FinalRadianceAtlasMaxMip;
	 uint  TranslucentBasePass_CalculateIrradiance;
	 uint  TranslucentBasePass_IrradianceProbeResolution;
	 uint  TranslucentBasePass_OcclusionProbeResolution;
	 uint  TranslucentBasePass_NumProbesToTraceBudget;
	 uint  TranslucentBasePass_RadianceCacheStats;
	 uint BindlessResource_TranslucentBasePass_RadianceProbeIndirectionTexture ;
	 uint  PrePadding_TranslucentBasePass_2804;
	 uint BindlessResource_TranslucentBasePass_RadianceCacheFinalRadianceAtlas ;
	 uint  PrePadding_TranslucentBasePass_2812;
	 uint BindlessResource_TranslucentBasePass_RadianceCacheFinalIrradianceAtlas ;
	 uint  PrePadding_TranslucentBasePass_2820;
	 uint BindlessResource_TranslucentBasePass_RadianceCacheProbeOcclusionAtlas ;
	 uint  PrePadding_TranslucentBasePass_2828;
	 uint BindlessResource_TranslucentBasePass_RadianceCacheDepthAtlas ;
	 uint  PrePadding_TranslucentBasePass_2836;
	 uint BindlessResource_TranslucentBasePass_ProbeWorldOffset ;
	 uint  PrePadding_TranslucentBasePass_2844;
	 float4  TranslucentBasePass_RadianceProbeSettings[6];
	 float4  TranslucentBasePass_PaddedWorldPositionToRadianceProbeCoordBias[6];
	 float4  TranslucentBasePass_PaddedRadianceProbeCoordToWorldPositionBias[6];
	 float2  TranslucentBasePass_InvProbeFinalRadianceAtlasResolution;
	 float2  TranslucentBasePass_InvProbeFinalIrradianceAtlasResolution;
	 float2  TranslucentBasePass_InvProbeDepthAtlasResolution;
	 uint  TranslucentBasePass_OverrideCacheOcclusionLighting;
	 uint  TranslucentBasePass_ShowBlackRadianceCacheLighting;
	 uint  TranslucentBasePass_ProbeAtlasResolutionModuloMask;
	 uint  TranslucentBasePass_ProbeAtlasResolutionDivideShift;
	 float  PrePadding_TranslucentBasePass_3176;
	 float  PrePadding_TranslucentBasePass_3180;
	 uint BindlessResource_TranslucentBasePass_Radiance ;
	 uint  PrePadding_TranslucentBasePass_3188;
	 uint BindlessResource_TranslucentBasePass_Normal ;
	 uint  PrePadding_TranslucentBasePass_3196;
	 uint BindlessResource_TranslucentBasePass_SceneDepth ;
	 uint  PrePadding_TranslucentBasePass_3204;
	 uint  TranslucentBasePass_Enabled;
	 float  TranslucentBasePass_RelativeDepthThreshold;
	 float  TranslucentBasePass_SpecularScale;
	 float  TranslucentBasePass_Contrast;
	 float  PrePadding_TranslucentBasePass_3224;
	 float  PrePadding_TranslucentBasePass_3228;
	 uint BindlessResource_TranslucentBasePass_TranslucencyGIVolume0 ;
	 uint  PrePadding_TranslucentBasePass_3236;
	 uint BindlessResource_TranslucentBasePass_TranslucencyGIVolume1 ;
	 uint  PrePadding_TranslucentBasePass_3244;
	 uint BindlessResource_TranslucentBasePass_TranslucencyGIVolumeHistory0 ;
	 uint  PrePadding_TranslucentBasePass_3252;
	 uint BindlessResource_TranslucentBasePass_TranslucencyGIVolumeHistory1 ;
	 uint  PrePadding_TranslucentBasePass_3260;
	 uint BindlessSampler_TranslucentBasePass_TranslucencyGIVolumeSampler ;
	 uint  PrePadding_TranslucentBasePass_3268;
	 uint  PrePadding_TranslucentBasePass_3272;
	 uint  PrePadding_TranslucentBasePass_3276;
	 float3  TranslucentBasePass_TranslucencyGIGridZParams;
	 uint  TranslucentBasePass_TranslucencyGIGridPixelSizeShift;
	 int3  TranslucentBasePass_TranslucencyGIGridSize;
	 float  PrePadding_TranslucentBasePass_3308;
	 uint BindlessResource_TranslucentBasePass_PreIntegratedGFTexture ;
	 uint  PrePadding_TranslucentBasePass_3316;
	 uint BindlessSampler_TranslucentBasePass_PreIntegratedGFSampler ;
	 uint  PrePadding_TranslucentBasePass_3324;
	 uint BindlessResource_TranslucentBasePass_EyeAdaptationBuffer ;
	 uint  PrePadding_TranslucentBasePass_3332;
	 uint BindlessResource_TranslucentBasePass_SceneColorCopyTexture ;
	 uint  PrePadding_TranslucentBasePass_3340;
	 uint BindlessSampler_TranslucentBasePass_SceneColorCopySampler ;
	 float  PrePadding_TranslucentBasePass_BlueNoise_3348;
	 float  PrePadding_TranslucentBasePass_BlueNoise_3352;
	 float  PrePadding_TranslucentBasePass_BlueNoise_3356;
	 int3  TranslucentBasePass_BlueNoise_Dimensions;
	 int  PrePadding_TranslucentBasePass_BlueNoise_3372;
	 int3  TranslucentBasePass_BlueNoise_ModuloMasks;
	 int  PrePadding_TranslucentBasePass_BlueNoise_3388;
	 uint BindlessResource_TranslucentBasePass_BlueNoise_ScalarTexture ;
	 uint  PrePadding_TranslucentBasePass_BlueNoise_3396;
	 uint BindlessResource_TranslucentBasePass_BlueNoise_Vec2Texture ;
}

#line 420 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
StructuredBuffer<uint>  TranslucentBasePass_Shared_Forward_NumCulledLightsGrid;

#line 422 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
Buffer<uint>  TranslucentBasePass_Shared_Forward_CulledLightDataGrid16Bit;

#line 431 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
TextureCube  TranslucentBasePass_Shared_Reflection_SkyLightCubemap;

#line 432 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
SamplerState  TranslucentBasePass_Shared_Reflection_SkyLightCubemapSampler;

#line 435 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
TextureCubeArray  TranslucentBasePass_Shared_Reflection_ReflectionCubemap;

#line 436 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
SamplerState  TranslucentBasePass_Shared_Reflection_ReflectionCubemapSampler;

#line 439 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
Texture2D  TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionTexture;

#line 443 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
Texture3D  TranslucentBasePass_Shared_Fog_IntegratedLightScattering;

#line 450 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
Texture2D  TranslucentBasePass_SceneTextures_SceneDepthTexture;

#line 462 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
SamplerState  TranslucentBasePass_SceneTextures_PointClampSampler;

#line 471 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
Texture3D  TranslucentBasePass_TranslucencyLightingVolumeAmbientInner;

#line 472 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
Texture3D  TranslucentBasePass_TranslucencyLightingVolumeAmbientOuter;

#line 473 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
Texture3D  TranslucentBasePass_TranslucencyLightingVolumeDirectionalInner;

#line 474 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
Texture3D  TranslucentBasePass_TranslucencyLightingVolumeDirectionalOuter;

#line 475 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
Texture3D<uint>  TranslucentBasePass_RadianceProbeIndirectionTexture;

#line 476 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
Texture2D<float3>  TranslucentBasePass_RadianceCacheFinalRadianceAtlas;

#line 480 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
StructuredBuffer<float4>  TranslucentBasePass_ProbeWorldOffset;

#line 481 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
Texture2D  TranslucentBasePass_Radiance;

#line 483 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
Texture2D  TranslucentBasePass_SceneDepth;

#line 484 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
Texture3D  TranslucentBasePass_TranslucencyGIVolume0;

#line 485 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
Texture3D  TranslucentBasePass_TranslucencyGIVolume1;

#line 486 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
Texture3D  TranslucentBasePass_TranslucencyGIVolumeHistory0;

#line 487 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
Texture3D  TranslucentBasePass_TranslucencyGIVolumeHistory1;

#line 488 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
SamplerState  TranslucentBasePass_TranslucencyGIVolumeSampler;

#line 491 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
Texture2D  TranslucentBasePass_HZBTexture;

#line 492 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
SamplerState  TranslucentBasePass_HZBSampler;

#line 493 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
Texture2D  TranslucentBasePass_PrevSceneColor;

#line 494 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"
SamplerState  TranslucentBasePass_PrevSceneColorSampler;

#line 37 "/Engine/Generated/UniformBuffers/LightmapResourceCluster.ush"
Texture2D  LightmapResourceCluster_LightMapTexture;

#line 38 "/Engine/Generated/UniformBuffers/LightmapResourceCluster.ush"
Texture2D  LightmapResourceCluster_SkyOcclusionTexture;

#line 46 "/Engine/Generated/UniformBuffers/LightmapResourceCluster.ush"
SamplerState  LightmapResourceCluster_LightMapSampler;

#line 3 "/Engine/Generated/UniformBuffers/ReflectionCaptureSM5.ush"
cbuffer   ReflectionCaptureSM5 
{
	 float4  ReflectionCaptureSM5_PositionAndRadius[341];
	 float4  ReflectionCaptureSM5_TilePosition[341];
	 float4  ReflectionCaptureSM5_CaptureProperties[341];
	 float4  ReflectionCaptureSM5_CaptureOffsetAndAverageBrightness[341];
	 float4x4  ReflectionCaptureSM5_BoxTransform[341];
	 float4  ReflectionCaptureSM5_BoxScales[341];
}

#line 3 "/Engine/Generated/UniformBuffers/Material.ush"
cbuffer   Material 
{
	 float4  Material_PreshaderBuffer[26];
	 uint BindlessResource_Material_Texture2D_0 ;
	 uint  PrePadding_Material_420;
	 uint BindlessSampler_Material_Texture2D_0Sampler ;
	 uint  PrePadding_Material_428;
	 uint BindlessResource_Material_Texture2D_1 ;
	 uint  PrePadding_Material_436;
	 uint BindlessSampler_Material_Texture2D_1Sampler ;
	 uint  PrePadding_Material_444;
	 uint BindlessResource_Material_Texture2D_2 ;
	 uint  PrePadding_Material_452;
	 uint BindlessSampler_Material_Texture2D_2Sampler ;
	 uint  PrePadding_Material_460;
	 uint BindlessResource_Material_Texture2D_3 ;
	 uint  PrePadding_Material_468;
	 uint BindlessSampler_Material_Texture2D_3Sampler ;
	 uint  PrePadding_Material_476;
	 uint BindlessResource_Material_Texture2D_4 ;
	 uint  PrePadding_Material_484;
	 uint BindlessSampler_Material_Texture2D_4Sampler ;
	 uint  PrePadding_Material_492;
	 uint BindlessResource_Material_Texture2D_5 ;
	 uint  PrePadding_Material_500;
	 uint BindlessSampler_Material_Texture2D_5Sampler ;
	 uint  PrePadding_Material_508;
	 uint BindlessResource_Material_Texture2D_6 ;
	 uint  PrePadding_Material_516;
	 uint BindlessSampler_Material_Texture2D_6Sampler ;
	 uint  PrePadding_Material_524;
	 uint BindlessSampler_Material_Wrap_WorldGroupSettings ;
	 uint  PrePadding_Material_532;
	 uint BindlessSampler_Material_Clamp_WorldGroupSettings ;
}

#line 38 "/Engine/Generated/UniformBuffers/Material.ush"
Texture2D  Material_Texture2D_0;

#line 39 "/Engine/Generated/UniformBuffers/Material.ush"
SamplerState  Material_Texture2D_0Sampler;

#line 40 "/Engine/Generated/UniformBuffers/Material.ush"
Texture2D  Material_Texture2D_1;

#line 41 "/Engine/Generated/UniformBuffers/Material.ush"
SamplerState  Material_Texture2D_1Sampler;

#line 42 "/Engine/Generated/UniformBuffers/Material.ush"
Texture2D  Material_Texture2D_2;

#line 43 "/Engine/Generated/UniformBuffers/Material.ush"
SamplerState  Material_Texture2D_2Sampler;

#line 44 "/Engine/Generated/UniformBuffers/Material.ush"
Texture2D  Material_Texture2D_3;

#line 45 "/Engine/Generated/UniformBuffers/Material.ush"
SamplerState  Material_Texture2D_3Sampler;

#line 46 "/Engine/Generated/UniformBuffers/Material.ush"
Texture2D  Material_Texture2D_4;

#line 47 "/Engine/Generated/UniformBuffers/Material.ush"
SamplerState  Material_Texture2D_4Sampler;

#line 48 "/Engine/Generated/UniformBuffers/Material.ush"
Texture2D  Material_Texture2D_5;

#line 49 "/Engine/Generated/UniformBuffers/Material.ush"
SamplerState  Material_Texture2D_5Sampler;

#line 50 "/Engine/Generated/UniformBuffers/Material.ush"
Texture2D  Material_Texture2D_6;

#line 51 "/Engine/Generated/UniformBuffers/Material.ush"
SamplerState  Material_Texture2D_6Sampler;

#line 1 "/Engine/Generated/GeneratedInstancedStereo.ush"
struct ViewState
{
	float4x4 TranslatedWorldToClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3 ViewTilePosition;
	float3 MatrixTilePosition;
	float3 ViewForward;
	float3 ViewUp;
	float3 ViewRight;
	float3 HMDViewNoRollUp;
	float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 RelativeWorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 RelativeWorldViewOrigin;
	float3 RelativePreViewTranslation;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevRelativeWorldCameraOrigin;
	float3 PrevRelativeWorldViewOrigin;
	float3 RelativePrevPreViewTranslation;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	uint4 ViewRectMinAndSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	float2 BufferToSceneTextureScale;
	float2 ResolutionFractionAndInv;
	int NumSceneColorMSAASamples;
	float ProjectionDepthThicknessScale;
	float PreExposure;
	float OneOverPreExposure;
	float4 DiffuseOverrideParameter;
	float4 SpecularOverrideParameter;
	float4 NormalOverrideParameter;
	float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float NearPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint FrameCounter;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	uint WorldIsPaused;
	float CameraCut;
	float UnlitViewmodeMask;
	float4 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 MobileSkyIrradianceEnvironmentMap[8];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeTranslatedCenterAndExtent[6];
	float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float CoveredExpandSurfaceScale;
	float NotCoveredExpandSurfaceScale;
	float NotCoveredMinStepScale;
	float DitheredTransparencyStepThreshold;
	float DitheredTransparencyTraceThreshold;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float2 VolumetricFogViewGridUVToPrevViewRectUV;
	float2 VolumetricFogPrevViewGridRectUVToResourceUV;
	float2 VolumetricFogPrevUVMax;
	float2 VolumetricFogScreenToResourceUV;
	float2 VolumetricFogUVMax;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	float OverrideLandscapeLOD;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float4 SpecularProfileTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint GPUSceneViewId;
	float ViewResolutionFraction;
	float SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	float4 TanAndInvTanHalfFOV;
	float4 PrevTanAndInvTanHalfFOV;
	float4 GlintLUTParameters0;
	float4 GlintLUTParameters1;
	FLWCInverseMatrix WorldToClip;
	FLWCMatrix ClipToWorld;
	FLWCMatrix ScreenToWorld;
	FLWCMatrix PrevClipToWorld;
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
};

#line 230 "/Engine/Generated/GeneratedInstancedStereo.ush"
void FinalizeViewState(inout ViewState InOutView);

#line 231 "/Engine/Generated/GeneratedInstancedStereo.ush"
ViewState GetPrimaryView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = View_TranslatedWorldToClip;
	Result.RelativeWorldToClip = View_RelativeWorldToClip;
	Result.ClipToRelativeWorld = View_ClipToRelativeWorld;
	Result.TranslatedWorldToView = View_TranslatedWorldToView;
	Result.ViewToTranslatedWorld = View_ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = View_TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = View_CameraViewToTranslatedWorld;
	Result.ViewToClip = View_ViewToClip;
	Result.ViewToClipNoAA = View_ViewToClipNoAA;
	Result.ClipToView = View_ClipToView;
	Result.ClipToTranslatedWorld = View_ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = View_SVPositionToTranslatedWorld;
	Result.ScreenToRelativeWorld = View_ScreenToRelativeWorld;
	Result.ScreenToTranslatedWorld = View_ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = View_MobileMultiviewShadowTransform;
	Result.ViewTilePosition = View_ViewTilePosition;
	Result.MatrixTilePosition = View_MatrixTilePosition;
	Result.ViewForward = View_ViewForward;
	Result.ViewUp = View_ViewUp;
	Result.ViewRight = View_ViewRight;
	Result.HMDViewNoRollUp = View_HMDViewNoRollUp;
	Result.HMDViewNoRollRight = View_HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = View_InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = View_ScreenPositionScaleBias;
	Result.RelativeWorldCameraOrigin = View_RelativeWorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = View_TranslatedWorldCameraOrigin;
	Result.RelativeWorldViewOrigin = View_RelativeWorldViewOrigin;
	Result.RelativePreViewTranslation = View_RelativePreViewTranslation;
	Result.PrevViewToClip = View_PrevViewToClip;
	Result.PrevClipToView = View_PrevClipToView;
	Result.PrevTranslatedWorldToClip = View_PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = View_PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = View_PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = View_PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = View_PrevCameraViewToTranslatedWorld;
	Result.PrevTranslatedWorldCameraOrigin = View_PrevTranslatedWorldCameraOrigin;
	Result.PrevRelativeWorldCameraOrigin = View_PrevRelativeWorldCameraOrigin;
	Result.PrevRelativeWorldViewOrigin = View_PrevRelativeWorldViewOrigin;
	Result.RelativePrevPreViewTranslation = View_RelativePrevPreViewTranslation;
	Result.PrevClipToRelativeWorld = View_PrevClipToRelativeWorld;
	Result.PrevScreenToTranslatedWorld = View_PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = View_ClipToPrevClip;
	Result.ClipToPrevClipWithAA = View_ClipToPrevClipWithAA;
	Result.TemporalAAJitter = View_TemporalAAJitter;
	Result.GlobalClippingPlane = View_GlobalClippingPlane;
	Result.FieldOfViewWideAngles = View_FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = View_PrevFieldOfViewWideAngles;
	Result.ViewRectMin = View_ViewRectMin;
	Result.ViewSizeAndInvSize = View_ViewSizeAndInvSize;
	Result.ViewRectMinAndSize = View_ViewRectMinAndSize;
	Result.LightProbeSizeRatioAndInvSizeRatio = View_LightProbeSizeRatioAndInvSizeRatio;
	Result.BufferSizeAndInvSize = View_BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = View_BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = View_ScreenToViewSpace;
	Result.BufferToSceneTextureScale = View_BufferToSceneTextureScale;
	Result.ResolutionFractionAndInv = View_ResolutionFractionAndInv;
	Result.NumSceneColorMSAASamples = View_NumSceneColorMSAASamples;
	Result.ProjectionDepthThicknessScale = View_ProjectionDepthThicknessScale;
	Result.PreExposure = View_PreExposure;
	Result.OneOverPreExposure = View_OneOverPreExposure;
	Result.DiffuseOverrideParameter = View_DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = View_SpecularOverrideParameter;
	Result.NormalOverrideParameter = View_NormalOverrideParameter;
	Result.RoughnessOverrideParameter = View_RoughnessOverrideParameter;
	Result.PrevFrameGameTime = View_PrevFrameGameTime;
	Result.PrevFrameRealTime = View_PrevFrameRealTime;
	Result.OutOfBoundsMask = View_OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = View_WorldCameraMovementSinceLastFrame;
	Result.CullingSign = View_CullingSign;
	Result.NearPlane = View_NearPlane;
	Result.GameTime = View_GameTime;
	Result.RealTime = View_RealTime;
	Result.DeltaTime = View_DeltaTime;
	Result.MaterialTextureMipBias = View_MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = View_MaterialTextureDerivativeMultiply;
	Result.Random = View_Random;
	Result.FrameNumber = View_FrameNumber;
	Result.FrameCounter = View_FrameCounter;
	Result.StateFrameIndexMod8 = View_StateFrameIndexMod8;
	Result.StateFrameIndex = View_StateFrameIndex;
	Result.DebugViewModeMask = View_DebugViewModeMask;
	Result.WorldIsPaused = View_WorldIsPaused;
	Result.CameraCut = View_CameraCut;
	Result.UnlitViewmodeMask = View_UnlitViewmodeMask;
	Result.DirectionalLightColor = View_DirectionalLightColor;
	Result.DirectionalLightDirection = View_DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = View_TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = View_TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = View_TemporalAAParams;
	Result.CircleDOFParams = View_CircleDOFParams;
	Result.DepthOfFieldSensorWidth = View_DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = View_DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = View_DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = View_DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = View_DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = View_DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = View_DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = View_MotionBlurNormalizedToPixel;
	Result.GeneralPurposeTweak = View_GeneralPurposeTweak;
	Result.GeneralPurposeTweak2 = View_GeneralPurposeTweak2;
	Result.DemosaicVposOffset = View_DemosaicVposOffset;
	Result.DecalDepthBias = View_DecalDepthBias;
	Result.IndirectLightingColorScale = View_IndirectLightingColorScale;
	Result.PrecomputedIndirectLightingColorScale = View_PrecomputedIndirectLightingColorScale;
	Result.PrecomputedIndirectSpecularColorScale = View_PrecomputedIndirectSpecularColorScale;
	Result.AtmosphereLightDirection = View_AtmosphereLightDirection;
	Result.AtmosphereLightIlluminanceOnGroundPostTransmittance = View_AtmosphereLightIlluminanceOnGroundPostTransmittance;
	Result.AtmosphereLightIlluminanceOuterSpace = View_AtmosphereLightIlluminanceOuterSpace;
	Result.AtmosphereLightDiscLuminance = View_AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle_PPTrans = View_AtmosphereLightDiscCosHalfApexAngle_PPTrans;
	Result.SkyViewLutSizeAndInvSize = View_SkyViewLutSizeAndInvSize;
	Result.SkyCameraTranslatedWorldOrigin = View_SkyCameraTranslatedWorldOrigin;
	Result.SkyPlanetTranslatedWorldCenterAndViewHeight = View_SkyPlanetTranslatedWorldCenterAndViewHeight;
	Result.SkyViewLutReferential = View_SkyViewLutReferential;
	Result.SkyAtmosphereSkyLuminanceFactor = View_SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmospherePresentInScene = View_SkyAtmospherePresentInScene;
	Result.SkyAtmosphereHeightFogContribution = View_SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = View_SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = View_SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize = View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.NormalCurvatureToRoughnessScaleBias = View_NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = View_RenderingReflectionCaptureMask;
	Result.RealTimeReflectionCapture = View_RealTimeReflectionCapture;
	Result.RealTimeReflectionCapturePreExposure = View_RealTimeReflectionCapturePreExposure;
	Result.AmbientCubemapTint = View_AmbientCubemapTint;
	Result.AmbientCubemapIntensity = View_AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = View_SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = View_SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = View_SkyLightColor;
	Result.MobileSkyIrradianceEnvironmentMap = View_MobileSkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = View_MobilePreviewMode;
	Result.HMDEyePaddingOffset = View_HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = View_ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = View_ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = View_DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = View_IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = View_StereoPassIndex;
	Result.GlobalVolumeTranslatedCenterAndExtent = View_GlobalVolumeTranslatedCenterAndExtent;
	Result.GlobalVolumeTranslatedWorldToUVAddAndMul = View_GlobalVolumeTranslatedWorldToUVAddAndMul;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVScale = View_GlobalDistanceFieldMipTranslatedWorldToUVScale;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVBias = View_GlobalDistanceFieldMipTranslatedWorldToUVBias;
	Result.GlobalDistanceFieldMipFactor = View_GlobalDistanceFieldMipFactor;
	Result.GlobalDistanceFieldMipTransition = View_GlobalDistanceFieldMipTransition;
	Result.GlobalDistanceFieldClipmapSizeInPages = View_GlobalDistanceFieldClipmapSizeInPages;
	Result.GlobalDistanceFieldInvPageAtlasSize = View_GlobalDistanceFieldInvPageAtlasSize;
	Result.GlobalDistanceFieldInvCoverageAtlasSize = View_GlobalDistanceFieldInvCoverageAtlasSize;
	Result.GlobalVolumeDimension = View_GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = View_GlobalVolumeTexelSize;
	Result.MaxGlobalDFAOConeDistance = View_MaxGlobalDFAOConeDistance;
	Result.NumGlobalSDFClipmaps = View_NumGlobalSDFClipmaps;
	Result.CoveredExpandSurfaceScale = View_CoveredExpandSurfaceScale;
	Result.NotCoveredExpandSurfaceScale = View_NotCoveredExpandSurfaceScale;
	Result.NotCoveredMinStepScale = View_NotCoveredMinStepScale;
	Result.DitheredTransparencyStepThreshold = View_DitheredTransparencyStepThreshold;
	Result.DitheredTransparencyTraceThreshold = View_DitheredTransparencyTraceThreshold;
	Result.CursorPosition = View_CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = View_bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = View_VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = View_VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = View_VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogViewGridUVToPrevViewRectUV = View_VolumetricFogViewGridUVToPrevViewRectUV;
	Result.VolumetricFogPrevViewGridRectUVToResourceUV = View_VolumetricFogPrevViewGridRectUVToResourceUV;
	Result.VolumetricFogPrevUVMax = View_VolumetricFogPrevUVMax;
	Result.VolumetricFogScreenToResourceUV = View_VolumetricFogScreenToResourceUV;
	Result.VolumetricFogUVMax = View_VolumetricFogUVMax;
	Result.VolumetricFogMaxDistance = View_VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = View_VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = View_VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = View_VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = View_VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = View_VolumetricLightmapBrickTexelSize;
	Result.IndirectLightingCacheShowFlag = View_IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = View_EyeToPixelSpreadAngle;
	Result.XRPassthroughCameraUVs = View_XRPassthroughCameraUVs;
	Result.GlobalVirtualTextureMipBias = View_GlobalVirtualTextureMipBias;
	Result.VirtualTextureFeedbackShift = View_VirtualTextureFeedbackShift;
	Result.VirtualTextureFeedbackMask = View_VirtualTextureFeedbackMask;
	Result.VirtualTextureFeedbackStride = View_VirtualTextureFeedbackStride;
	Result.VirtualTextureFeedbackJitterOffset = View_VirtualTextureFeedbackJitterOffset;
	Result.VirtualTextureFeedbackSampleOffset = View_VirtualTextureFeedbackSampleOffset;
	Result.RuntimeVirtualTextureMipLevel = View_RuntimeVirtualTextureMipLevel;
	Result.RuntimeVirtualTexturePackHeight = View_RuntimeVirtualTexturePackHeight;
	Result.RuntimeVirtualTextureDebugParams = View_RuntimeVirtualTextureDebugParams;
	Result.OverrideLandscapeLOD = View_OverrideLandscapeLOD;
	Result.FarShadowStaticMeshLODBias = View_FarShadowStaticMeshLODBias;
	Result.MinRoughness = View_MinRoughness;
	Result.HairRenderInfo = View_HairRenderInfo;
	Result.EnableSkyLight = View_EnableSkyLight;
	Result.HairRenderInfoBits = View_HairRenderInfoBits;
	Result.HairComponents = View_HairComponents;
	Result.bSubsurfacePostprocessEnabled = View_bSubsurfacePostprocessEnabled;
	Result.SSProfilesTextureSizeAndInvSize = View_SSProfilesTextureSizeAndInvSize;
	Result.SSProfilesPreIntegratedTextureSizeAndInvSize = View_SSProfilesPreIntegratedTextureSizeAndInvSize;
	Result.SpecularProfileTextureSizeAndInvSize = View_SpecularProfileTextureSizeAndInvSize;
	Result.PhysicsFieldClipmapCenter = View_PhysicsFieldClipmapCenter;
	Result.PhysicsFieldClipmapDistance = View_PhysicsFieldClipmapDistance;
	Result.PhysicsFieldClipmapResolution = View_PhysicsFieldClipmapResolution;
	Result.PhysicsFieldClipmapExponent = View_PhysicsFieldClipmapExponent;
	Result.PhysicsFieldClipmapCount = View_PhysicsFieldClipmapCount;
	Result.PhysicsFieldTargetCount = View_PhysicsFieldTargetCount;
	Result.PhysicsFieldTargets = View_PhysicsFieldTargets;
	Result.GPUSceneViewId = View_GPUSceneViewId;
	Result.ViewResolutionFraction = View_ViewResolutionFraction;
	Result.SubSurfaceColorAsTransmittanceAtDistanceInMeters = View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	Result.TanAndInvTanHalfFOV = View_TanAndInvTanHalfFOV;
	Result.PrevTanAndInvTanHalfFOV = View_PrevTanAndInvTanHalfFOV;
	Result.GlintLUTParameters0 = View_GlintLUTParameters0;
	Result.GlintLUTParameters1 = View_GlintLUTParameters1;
	FinalizeViewState(Result);
	return Result;
}

#line 17 "/Engine/Private/InstancedStereo.ush"
void FinalizeViewState(inout ViewState InOutView)
{
	InOutView.WorldToClip = MakeLWCInverseMatrix(InOutView.MatrixTilePosition, InOutView.RelativeWorldToClip);
	InOutView.ClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ClipToRelativeWorld);
	InOutView.ScreenToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ScreenToRelativeWorld);
	InOutView.PrevClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.PrevClipToRelativeWorld);

	InOutView.WorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldCameraOrigin);
	InOutView.WorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldViewOrigin);
	InOutView.PrevWorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldCameraOrigin);
	InOutView.PrevWorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldViewOrigin);
	InOutView.PreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePreViewTranslation);
	InOutView.PrevPreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePrevPreViewTranslation);
}

#line 34 "/Engine/Private/InstancedStereo.ush"
static ViewState ResolvedView = (ViewState)0.0f;

#line 36 "/Engine/Private/InstancedStereo.ush"
ViewState ResolveView()
{
	return GetPrimaryView();
}

#line 285 "/Engine/Private/Common.ush"
float4 Texture2DSample(Texture2D Tex, SamplerState Sampler, float2 UV)
{



	return Tex.Sample(Sampler, UV);

}

#line 293 "/Engine/Private/Common.ush"
float4 Texture2DSample(Texture2D Tex, SamplerState Sampler, FloatDeriv2 UV)
{



	return Tex.SampleGrad(Sampler, UV.Value, UV.Ddx, UV.Ddy);

}

#line 337 "/Engine/Private/Common.ush"
float4 Texture2DSampleLevel(Texture2D Tex, SamplerState Sampler, float2 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}

#line 341 "/Engine/Private/Common.ush"
float4 Texture2DSampleBias(Texture2D Tex, SamplerState Sampler, float2 UV, float MipBias)
{



	return Tex.SampleBias(Sampler, UV, MipBias);

}

#line 353 "/Engine/Private/Common.ush"
float4 Texture3DSampleLevel(Texture3D Tex, SamplerState Sampler, float3 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}

#line 369 "/Engine/Private/Common.ush"
float4 TextureCubeSampleLevel(TextureCube Tex, SamplerState Sampler, float3 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}

#line 595 "/Engine/Private/Common.ush"
float Luminance( float3 LinearColor )
{
	return dot( LinearColor, float3( 0.3, 0.59, 0.11 ) );
}

#line 661 "/Engine/Private/Common.ush"
float PositiveClampedPow(float Base, float Exponent)
{
	return (Base <= 0.0f) ? 0.0f : pow(Base, Exponent);
}

#line 665 "/Engine/Private/Common.ush"
float2 PositiveClampedPow(float2 Base, float2 Exponent)
{
	return float2(PositiveClampedPow(Base.x, Exponent.x), PositiveClampedPow(Base.y, Exponent.y)); 
}

#line 669 "/Engine/Private/Common.ush"
float3 PositiveClampedPow(float3 Base, float3 Exponent)
{
	return float3(PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.z, Exponent.z)); 
}

#line 673 "/Engine/Private/Common.ush"
float4 PositiveClampedPow(float4 Base, float4 Exponent)
{
	return float4(PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.zw, Exponent.zw)); 
}

#line 26 "/Engine/Private/Random.ush"
float InterleavedGradientNoise( float2 uv, float FrameId )
{
	
	uv += FrameId * (float2(47, 17) * 0.695f);

    const float3 magic = float3( 0.06711056f, 0.00583715f, 52.9829189f );
    return frac(magic.z * frac(dot(uv, magic.xy)));
}

#line 924 "/Engine/Private/Common.ush"
float Pow2( float x )
{
	return x*x;
}

#line 929 "/Engine/Private/Common.ush"
float2 Pow2( float2 x )
{
	return x*x;
}

#line 934 "/Engine/Private/Common.ush"
float3 Pow2( float3 x )
{
	return x*x;
}

#line 939 "/Engine/Private/Common.ush"
float4 Pow2( float4 x )
{
	return x*x;
}

#line 1179 "/Engine/Private/Common.ush"
float ConvertFromDeviceZ(float DeviceZ)
{
	
	return DeviceZ * View_InvDeviceZToWorldZTransform[0] + View_InvDeviceZToWorldZTransform[1] + 1.0f / (DeviceZ * View_InvDeviceZToWorldZTransform[2] - View_InvDeviceZToWorldZTransform[3]);
}

#line 1187 "/Engine/Private/Common.ush"
bool IsOrthoProjection(float4x4 ViewToClip)
{
	return asuint(ViewToClip._44);
}

#line 1193 "/Engine/Private/Common.ush"
bool IsOrthoProjection()
{
	return IsOrthoProjection(View_ViewToClip);
}

#line 1201 "/Engine/Private/Common.ush"
float ConvertToDeviceZ(float SceneDepth)
{
	[flatten]
	if (IsOrthoProjection())
	{
		
		return SceneDepth * View_ViewToClip[2][2] + View_ViewToClip[3][2];
	}
	else
	{
		
		return 1.0f / ((SceneDepth + View_InvDeviceZToWorldZTransform[3]) * View_InvDeviceZToWorldZTransform[2]);
	}
}

#line 1229 "/Engine/Private/Common.ush"
float2 ScreenPositionToBufferUV(float4 ScreenPosition)
{
	return float2(ScreenPosition.xy / ScreenPosition.w * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}

#line 1263 "/Engine/Private/Common.ush"
float3 SvPositionToResolvedTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), ResolvedView.SVPositionToTranslatedWorld);

	return HomWorldPos.xyz / HomWorldPos.w;
}

#line 1293 "/Engine/Private/Common.ush"
float4 SvPositionToResolvedScreenPosition(float4 SvPosition)
{
	float2 PixelPos = SvPosition.xy - ResolvedView.ViewRectMin.xy;	

	
	float3 NDCPos = float3( (PixelPos * ResolvedView.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);

	
	return float4(NDCPos.xyz, 1) * SvPosition.w;
}

#line 1344 "/Engine/Private/Common.ush"
float2 ScreenPosToViewportUV(float2 ScreenPos)
{
	return float2(0.5 + 0.5 * ScreenPos.x, 0.5 - 0.5 * ScreenPos.y);
}

#line 1366 "/Engine/Private/Common.ush"
float2 ScreenAlignedPosition( float4 ScreenPosition )
{
	return float2(ScreenPositionToBufferUV(ScreenPosition));
}

#line 1390 "/Engine/Private/Common.ush"
float4 UnpackNormalMap( float4 TextureSample )
{
	




		float2 NormalXY = TextureSample.rg;
	

	NormalXY = NormalXY * float2(2.0f,2.0f) - float2(1.0f,1.0f);
	float NormalZ = sqrt( saturate( 1.0f - dot( NormalXY, NormalXY ) ) );
	return float4( NormalXY.xy, NormalZ, 1.0f );
}

#line 1586 "/Engine/Private/Common.ush"
float ComputeDistanceFromBoxToPoint(float3 Mins, float3 Maxs, float3 InPoint)
{
	float3 DistancesToMin =  select_internal( InPoint < Mins , abs(InPoint - Mins) , float(0.0) );
	float3 DistancesToMax =  select_internal( InPoint > Maxs , abs(InPoint - Maxs) , float(0.0) );

	
	float Distance = dot(DistancesToMin, 1);
	Distance += dot(DistancesToMax, 1);
	return Distance;
}

#line 1605 "/Engine/Private/Common.ush"
float ComputeDistanceFromBoxToPointInside(float3 BoxCenter, float3 BoxExtent, float3 InPoint)
{
	float3 DistancesToMin = max(InPoint - BoxCenter + BoxExtent, 0);
	float3 DistancesToMax = max(BoxCenter + BoxExtent - InPoint, 0);
	float3 ClosestDistances = min(DistancesToMin, DistancesToMax);
	return min(ClosestDistances.x, min(ClosestDistances.y, ClosestDistances.z));
}

#line 1632 "/Engine/Private/Common.ush"
float2 RayIntersectSphere(float3 RayOrigin, float3 RayDirection, float4 Sphere)
{
	float3 LocalPosition = RayOrigin - Sphere.xyz;
	float LocalPositionSqr = dot(LocalPosition, LocalPosition);

	float3 QuadraticCoef;
	QuadraticCoef.x = dot(RayDirection, RayDirection);
	QuadraticCoef.y = 2 * dot(RayDirection, LocalPosition);
	QuadraticCoef.z = LocalPositionSqr - Sphere.w * Sphere.w;

	float Discriminant = QuadraticCoef.y * QuadraticCoef.y - 4 * QuadraticCoef.x * QuadraticCoef.z;

	float2 Intersections = -1;

	
	[flatten]
	if (Discriminant >= 0)
	{
		float SqrtDiscriminant = sqrt(Discriminant);
		Intersections = (-QuadraticCoef.y + float2(-1, 1) * SqrtDiscriminant) / (2 * QuadraticCoef.x);
	}

	return Intersections;
}

#line 1658 "/Engine/Private/Common.ush"
float3 TransformTangentVectorToWorld(float3x3 TangentToWorld, float3 InTangentVector)
{
	
	
	return mul(InTangentVector, TangentToWorld);
}

#line 1747 "/Engine/Private/Common.ush"
float3 DecodeVelocityFromTexture(float4 InEncodedV)
{



	float4 EncodedV = InEncodedV;

	const float InvDiv = 1.0f / (0.499f * 0.5f);

	float3 V;
	V.xy = EncodedV.xy * InvDiv - 32767.0f / 65535.0f * InvDiv;

	
		V.z = asfloat((uint(round(EncodedV.z * 65535.0f)) << 16) | uint(round(EncodedV.w * 65535.0f)));
	



	
		V.xy = (V.xy * abs(V.xy)) * 0.5;
	

	return V;
}

#line 1885 "/Engine/Private/Common.ush"
float SafeSaturate( float In) {	return saturate(In);}

#line 1886 "/Engine/Private/Common.ush"
float2 SafeSaturate( float2 In) {	return saturate(In);}

#line 1887 "/Engine/Private/Common.ush"
float3 SafeSaturate( float3 In) {	return saturate(In);}

#line 1888 "/Engine/Private/Common.ush"
float4 SafeSaturate( float4 In) {	return saturate(In);}

#line 2050 "/Engine/Private/Common.ush"
struct FPixelShaderIn
{
	
	float4 SvPosition;

	
	uint Coverage;

	
	bool bIsFrontFace;
};

#line 2062 "/Engine/Private/Common.ush"
struct FPixelShaderOut
{
	
	float4 MRT[8];
	
	
	uint StrataOutput[3];
	uint StrataTopLayerData;

	
	uint Coverage;

	
	float Depth;
};

#line 24 "/Engine/Private/SHCommon.ush"
struct FTwoBandSHVector
{
	float4 V;
};

#line 30 "/Engine/Private/SHCommon.ush"
struct FTwoBandSHVectorRGB
{
	FTwoBandSHVector R;
	FTwoBandSHVector G;
	FTwoBandSHVector B;
};

#line 139 "/Engine/Private/SHCommon.ush"
float DotSH(FTwoBandSHVector A,FTwoBandSHVector B)
{
	float Result = dot(A.V, B.V);
	return Result;
}

#line 149 "/Engine/Private/SHCommon.ush"
float3 DotSH(FTwoBandSHVectorRGB A,FTwoBandSHVector B)
{
	float3 Result = 0;
	Result.r = DotSH(A.R,B);
	Result.g = DotSH(A.G,B);
	Result.b = DotSH(A.B,B);
	return Result;
}

#line 215 "/Engine/Private/SHCommon.ush"
FTwoBandSHVector SHBasisFunction(float3 InputVector)
{
	FTwoBandSHVector Result;
	
	Result.V.x = 0.282095f; 
	Result.V.y = -0.488603f * InputVector.y;
	Result.V.z = 0.488603f * InputVector.z;
	Result.V.w = -0.488603f * InputVector.x;
	return Result;
}

#line 269 "/Engine/Private/SHCommon.ush"
FTwoBandSHVector CalcDiffuseTransferSH(float3 Normal,float Exponent)
{
	FTwoBandSHVector Result = SHBasisFunction(Normal);

	
	
	float L0 =					2 * PI / (1 + 1 * Exponent							);
	float L1 =					2 * PI / (2 + 1 * Exponent							);

	
	Result.V.x *= L0;
	Result.V.yzw *= L1;

	return Result;
}

#line 53 "/Engine/Private/SceneTexturesCommon.ush"
float CalcSceneDepth(float2 ScreenUV)
{



	return ConvertFromDeviceZ(Texture2DSampleLevel(TranslucentBasePass_SceneTextures_SceneDepthTexture, TranslucentBasePass_SceneTextures_PointClampSampler, ScreenUV, 0).r);

}

#line 90 "/Engine/Private/SceneTexturesCommon.ush"
float CalcSceneDepth(uint2 PixelPos)
{



	float DeviceZ = TranslucentBasePass_SceneTextures_SceneDepthTexture.Load(int3(PixelPos, 0)).r;

	
	return ConvertFromDeviceZ(DeviceZ);

}

#line 13 "/Engine/Private/MonteCarlo.ush"
float3x3 GetTangentBasis( float3 TangentZ )
{
	const float Sign = TangentZ.z >= 0 ? 1 : -1;
	const float a = -rcp( Sign + TangentZ.z );
	const float b = TangentZ.x * TangentZ.y * a;
	
	float3 TangentX = { 1 + Sign * a * Pow2( TangentZ.x ), Sign * b, -Sign * TangentZ.x };
	float3 TangentY = { b,  Sign + a * Pow2( TangentZ.y ), -TangentZ.y };

	return float3x3( TangentX, TangentY, TangentZ );
}

#line 48 "/Engine/Private/MonteCarlo.ush"
float3 TangentToWorld( float3 Vec, float3 TangentZ )
{
	return mul( Vec, GetTangentBasis( TangentZ ) );
}

#line 178 "/Engine/Private/MonteCarlo.ush"
float2 InverseEquiAreaSphericalMapping(float3 Direction)
{
	
	Direction = normalize(Direction);
	
	float3 AbsDir = abs(Direction);
	float R = sqrt(1 - AbsDir.z);
	float Epsilon = 5.42101086243e-20; 
	float x = min(AbsDir.x, AbsDir.y) / (max(AbsDir.x, AbsDir.y) + Epsilon);

	
	const float t1 = 0.406758566246788489601959989e-5f;
	const float t2 = 0.636226545274016134946890922156f;
	const float t3 = 0.61572017898280213493197203466e-2f;
	const float t4 = -0.247333733281268944196501420480f;
	const float t5 = 0.881770664775316294736387951347e-1f;
	const float t6 = 0.419038818029165735901852432784e-1f;
	const float t7 = -0.251390972343483509333252996350e-1f;

	
	float Phi = t6 + t7 * x;
	Phi = t5 + Phi * x;
	Phi = t4 + Phi * x;
	Phi = t3 + Phi * x;
	Phi = t2 + Phi * x;
	Phi = t1 + Phi * x;

	Phi = (AbsDir.x < AbsDir.y) ? 1 - Phi : Phi;
	float2 UV = float2(R - Phi * R, Phi * R);
	UV = (Direction.z < 0) ? 1 - UV.yx : UV;
	UV = asfloat(asuint(UV) ^ (asuint(Direction.xy) & 0x80000000u));
	return UV * 0.5 + 0.5;
}

#line 104 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
struct FGlobalDistanceFieldPage
{
	uint PageIndex;
	bool bValid;
	bool bCoverage;
};

#line 111 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
uint3 GlobalDistanceFieldPageLinearIndexToPageAtlasOffset(FGlobalDistanceFieldPage Page)
{
	uint3 PageAtlasOffset;
	
	
	

	
	PageAtlasOffset.x = Page.PageIndex & 0x7F;
	PageAtlasOffset.y = (Page.PageIndex >> 7) & 0x7F;
	PageAtlasOffset.z = Page.PageIndex >> 14;

	return PageAtlasOffset;
}

#line 137 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
FGlobalDistanceFieldPage UnpackGlobalDistanceFieldPage(uint PackedPage)
{
	FGlobalDistanceFieldPage Page;
	Page.PageIndex = PackedPage & 0x00FFFFFF;
	Page.bCoverage = PackedPage & 0x80000000;
	Page.bValid = PackedPage < 0xFFFFFFFF;
	return Page;
}

#line 146 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
FGlobalDistanceFieldPage GetGlobalDistanceFieldPage(float3 VolumeUV, uint ClipmapIndex)
{
	int4 PageTableCoord = int4(saturate(VolumeUV) * View_GlobalDistanceFieldClipmapSizeInPages + int3(0, 0, ClipmapIndex * View_GlobalDistanceFieldClipmapSizeInPages), 0);
	uint PackedPage = View_GlobalDistanceFieldPageTableTexture.Load(PageTableCoord);
	return UnpackGlobalDistanceFieldPage(PackedPage);
}

#line 153 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
void ComputeGlobalDistanceFieldPageUV(float3 VolumeUV, FGlobalDistanceFieldPage Page, out float3 OutPageUV, out float3 OutCoveragePageUV)
{
	uint3 PageAtlasOffset = GlobalDistanceFieldPageLinearIndexToPageAtlasOffset(Page);
	float3 VolumePageUV = frac(VolumeUV * View_GlobalDistanceFieldClipmapSizeInPages);

	float3 PageAtlasCoord = PageAtlasOffset * 8 + VolumePageUV * (8 - 1) + 0.5f;
	OutPageUV = PageAtlasCoord * View_GlobalDistanceFieldInvPageAtlasSize;

	float3 CoveragePageAtlasCoord = PageAtlasOffset * 4 + VolumePageUV * (4 - 1) + 0.5f;
	OutCoveragePageUV = CoveragePageAtlasCoord * View_GlobalDistanceFieldInvCoverageAtlasSize;
}

#line 165 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float3 ComputeGlobalDistanceFieldPageUV(float3 VolumeUV, FGlobalDistanceFieldPage Page)
{
	uint3 PageAtlasOffset = GlobalDistanceFieldPageLinearIndexToPageAtlasOffset(Page);
	float3 VolumePageUV = frac(VolumeUV * View_GlobalDistanceFieldClipmapSizeInPages);
	float3 PageAtlasCoord = PageAtlasOffset * 8 + VolumePageUV * (8 - 1) + 0.5f;
	float3 PageUV = PageAtlasCoord * View_GlobalDistanceFieldInvPageAtlasSize;
	return PageUV;
}

#line 188 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float DecodeGlobalDistanceFieldPageDistance(float EncodedDistance, float ClipmapInfluenceRange)
{
	return (EncodedDistance * 2.0f - 1.0f) * ClipmapInfluenceRange;
}

#line 193 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float3 ComputeGlobalUV(float3 TranslatedWorldPosition, uint ClipmapIndex)
{
	
	float4 TranslatedWorldToUVAddAndMul = View_GlobalVolumeTranslatedWorldToUVAddAndMul[ClipmapIndex];
	float3 UV = frac(TranslatedWorldPosition * TranslatedWorldToUVAddAndMul.www + TranslatedWorldToUVAddAndMul.xyz); 
	UV = frac(UV); 
	return UV;
}

#line 214 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float GetDistanceToNearestSurfaceGlobal(float3 TranslatedWorldPosition)
{
	float Distance = 0.0f;

	for (uint ClipmapIndex = 0; ClipmapIndex < View_NumGlobalSDFClipmaps; ClipmapIndex++)
	{
		float DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(View_GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].xyz, View_GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].www, TranslatedWorldPosition);
		const float ClipmapVoxelExtent = View_GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].w * View_GlobalVolumeTexelSize;
		const float ClipmapInfluenceRange = 2.0f * 4 * ClipmapVoxelExtent;

		Distance = ClipmapInfluenceRange;

		if (DistanceFromClipmap > ClipmapVoxelExtent)
		{
			float3 ClipmapVolumeUV = ComputeGlobalUV(TranslatedWorldPosition, ClipmapIndex);

			FGlobalDistanceFieldPage Page = GetGlobalDistanceFieldPage(ClipmapVolumeUV, ClipmapIndex);
			if (Page.bValid)
			{
				float3 PageUV = ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, Page);

				float DistanceFieldValue = Texture3DSampleLevel(View_GlobalDistanceFieldPageAtlasTexture,  View_SharedTrilinearWrappedSampler, PageUV, 0).x;

				if (DistanceFieldValue < 1.0f)
				{
					Distance = DecodeGlobalDistanceFieldPageDistance(DistanceFieldValue, ClipmapInfluenceRange);
					break;
				}
			}
		}
	}

	return Distance;
}

#line 418 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float GetDistanceToNearestSurfaceGlobal(FLWCVector3 WorldPosition)
{
	const float3 TranslatedWorldPosition = LWCToFloat(LWCAdd(WorldPosition, ResolvedView.PreViewTranslation));

	return GetDistanceToNearestSurfaceGlobal(TranslatedWorldPosition);
}

#line 18 "/Engine/Private/OctahedralCommon.ush"
float2 UnitVectorToOctahedron( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) *  select_internal( N.xy >= 0 , float2(1,1) , float2(-1,-1) );
	}
	return N.xy;
}

#line 28 "/Engine/Private/OctahedralCommon.ush"
float3 OctahedronToUnitVector( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	float t = max( -N.z, 0 );
	N.xy +=  select_internal( N.xy >= 0 , float2(-t, -t) , float2(t, t) );
	return normalize(N);
}

#line 93 "/Engine/Private/SceneData.ush"
struct FPrimitiveSceneData
{
	uint		Flags;
	uint		VisibilityFlags;
	int			InstanceSceneDataOffset; 
	int			NumInstanceSceneDataEntries;
	int			PersistentPrimitiveIndex;
	uint		SingleCaptureIndex; 
	float3		TilePosition;
	uint		PrimitiveComponentId; 
	FLWCMatrix	LocalToWorld;
	FLWCInverseMatrix WorldToLocal;
	FLWCMatrix	PreviousLocalToWorld;
	FLWCInverseMatrix PreviousWorldToLocal;
	float4x4	WorldToPreviousWorld; 
	float3		InvNonUniformScale;
	float		ObjectBoundsX;
	FLWCVector3	ObjectWorldPosition;
	FLWCVector3	ActorWorldPosition;
	float		ObjectRadius;
	uint		LightmapUVIndex;   
	float3		ObjectOrientation; 
	uint		LightmapDataIndex; 
	float4		NonUniformScale;
	float3		PreSkinnedLocalBoundsMin;
	uint		NaniteResourceID;
	float3		PreSkinnedLocalBoundsMax;
	uint		NaniteHierarchyOffset;
	float3		LocalObjectBoundsMin;
	float		ObjectBoundsY;
	float3		LocalObjectBoundsMax;
	float		ObjectBoundsZ;
	uint		InstancePayloadDataOffset;
	uint		InstancePayloadDataStride;
	uint		InstancePayloadExtensionSize;
	float3		InstanceLocalBoundsCenter;
	float3		InstanceLocalBoundsExtent;
	float3		WireframeColor; 
	float3		LevelColor; 
	uint		PackedNaniteFlags;
	float2 		InstanceDrawDistanceMinMaxSquared;
	float		InstanceWPODisableDistanceSquared;
	uint		NaniteRayTracingDataOffset;
	float		MaxWPOExtent;
	float		MinMaterialDisplacement;
	float		MaxMaterialDisplacement;
	uint		CustomStencilValueAndMask;
	float4		CustomPrimitiveData[9]; 
};

#line 211 "/Engine/Private/SceneData.ush"
float4 LoadPrimitivePrimitiveSceneDataElement(uint PrimitiveIndex, uint ItemIndex)
{
	uint TargetIdx = PrimitiveIndex + ItemIndex;








	 { };
	return Scene_GPUScene_GPUScenePrimitiveSceneData[TargetIdx];

}

#line 228 "/Engine/Private/SceneData.ush"
FPrimitiveSceneData GetPrimitiveData(uint PrimitiveId)
{





	FPrimitiveSceneData PrimitiveData = (FPrimitiveSceneData)0;
	
	
	uint PrimitiveIndex = PrimitiveId * 41;
	
	float3 TilePosition = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 1).xyz;

	const float4x4 LocalToWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 2),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 3),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 4),
		float4(0, 0, 0, 1)
	));

	const float4x4 PreviousLocalToWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 8),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 9),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 10),
		float4(0, 0, 0, 1)
	));

	const float4x4 WorldToLocal = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 5),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 6),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 7),
		float4(0, 0, 0, 1)
	));

	const float4x4 PreviousWorldToLocal = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 11),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 12),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 13),
		float4(0, 0, 0, 1)
	));

	const float4x4 WorldToPreviousWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 14),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 15),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 16),
		float4(0, 0, 0, 1)
	));

	float4 ObjectWorldPositionAndRadius	= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 18);

	PrimitiveData.Flags									= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).x);
	PrimitiveData.InstanceSceneDataOffset				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).y);
	PrimitiveData.NumInstanceSceneDataEntries			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).z);
	PrimitiveData.SingleCaptureIndex					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).w) & 0xFFFFu;
	PrimitiveData.VisibilityFlags						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).w) >> 16u;
	PrimitiveData.TilePosition							= TilePosition; 
	PrimitiveData.PrimitiveComponentId					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 1).w);
	PrimitiveData.LocalToWorld							= MakeLWCMatrix4x3(TilePosition, LocalToWorld);
	PrimitiveData.WorldToLocal							= MakeLWCInverseMatrix4x3(TilePosition, WorldToLocal);
	PrimitiveData.PreviousLocalToWorld					= MakeLWCMatrix4x3(TilePosition, PreviousLocalToWorld);
	PrimitiveData.PreviousWorldToLocal					= MakeLWCInverseMatrix4x3(TilePosition, PreviousWorldToLocal);
	PrimitiveData.WorldToPreviousWorld					= WorldToPreviousWorld;
	PrimitiveData.InvNonUniformScale					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 17).xyz;
	PrimitiveData.ObjectBoundsX							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 17).w;
	PrimitiveData.ObjectWorldPosition					= MakeLWCVector3(TilePosition, ObjectWorldPositionAndRadius.xyz);
	PrimitiveData.ObjectRadius							= ObjectWorldPositionAndRadius.w;
	PrimitiveData.ActorWorldPosition					= MakeLWCVector3(TilePosition, LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 19).xyz);
	PrimitiveData.LightmapUVIndex						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 19).w);
	PrimitiveData.ObjectOrientation						= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 20).xyz;
	PrimitiveData.LightmapDataIndex						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 20).w);
	PrimitiveData.NonUniformScale						= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 21);
	PrimitiveData.PreSkinnedLocalBoundsMin				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 22).xyz;
	PrimitiveData.NaniteResourceID						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 22).w);
	PrimitiveData.PreSkinnedLocalBoundsMax				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 23).xyz;
	PrimitiveData.NaniteHierarchyOffset					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 23).w);
	PrimitiveData.LocalObjectBoundsMin					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 24).xyz;
	PrimitiveData.ObjectBoundsY							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 24).w;
	PrimitiveData.LocalObjectBoundsMax					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 25).xyz;
	PrimitiveData.ObjectBoundsZ							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 25).w;
	PrimitiveData.InstanceLocalBoundsCenter				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 26).xyz;
	PrimitiveData.InstancePayloadDataOffset				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 26).w);
	PrimitiveData.InstanceLocalBoundsExtent				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 27).xyz;
	PrimitiveData.InstancePayloadDataStride				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 27).w) & 0x00FFFFFFu;
	PrimitiveData.InstancePayloadExtensionSize			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 27).w) >> 24;
	PrimitiveData.WireframeColor						= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 28).xyz;
	PrimitiveData.PackedNaniteFlags						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 28).w);
	PrimitiveData.LevelColor							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).xyz;
	PrimitiveData.PersistentPrimitiveIndex				= asint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).w);
	PrimitiveData.InstanceDrawDistanceMinMaxSquared		= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).xy;
	PrimitiveData.InstanceWPODisableDistanceSquared		= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).z;
	PrimitiveData.NaniteRayTracingDataOffset			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).w);
	PrimitiveData.MaxWPOExtent							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).x;
	PrimitiveData.MinMaterialDisplacement				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).y;
	PrimitiveData.MaxMaterialDisplacement				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).z;
	PrimitiveData.CustomStencilValueAndMask				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).w);

	

	
	[unroll]
	for (int DataIndex = 0; DataIndex < 9; ++DataIndex)
	{
		PrimitiveData.CustomPrimitiveData[DataIndex] = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex,  32 + DataIndex);
	}
	return PrimitiveData;

}

#line 363 "/Engine/Private/SceneData.ush"
float GetPrimitive_PerObjectGBufferData_FromFlags(uint Flags)
{
	const float CapsuleRepresentation = CondMask(Flags & 0x100, 1.0f, 0.0f);
	const float CastContactShadow     = CondMask(Flags & 0x200,    1.0f, 0.0f);
	return (2.0f * CapsuleRepresentation + CastContactShadow) / 3.0f;
}

#line 370 "/Engine/Private/SceneData.ush"
float GetPrimitive_PerObjectGBufferData(uint PrimitiveId)
{
	return GetPrimitive_PerObjectGBufferData_FromFlags(GetPrimitiveData(PrimitiveId).Flags);
}

#line 376 "/Engine/Private/SceneData.ush"
float GetPrimitive_PerObjectGBufferData(FPrimitiveSceneData Primitive)
{
	return GetPrimitive_PerObjectGBufferData_FromFlags(Primitive_Flags);
}

#line 404 "/Engine/Private/SceneData.ush"
struct FInstanceSceneEditorData
{
	float3 HitProxyId;
	uint   HitProxyPacked;
	bool bIsSelected;
};

#line 434 "/Engine/Private/SceneData.ush"
struct FInstanceSceneData
{
	FLWCMatrix LocalToWorld;
	FLWCMatrix PrevLocalToWorld;
	FLWCInverseMatrix WorldToLocal;
	float4   NonUniformScale;
	float3   InvNonUniformScale;
	float    DeterminantSign;
	float3   LocalBoundsCenter;
	uint     PrimitiveId;
	uint     RelativeId;
	uint     PayloadDataOffset;
	uint     PayloadExtensionOffset;
	uint     PayloadExtensionSize;
	float3   LocalBoundsExtent;
	uint     LastUpdateSceneFrameNumber;
	uint     NaniteRuntimeResourceID;
	uint     NaniteHierarchyOffset;








	float4   LightMapAndShadowMapUVBias;

	bool     ValidInstance;
	uint     Flags;


	FInstanceSceneEditorData EditorData;

};

#line 1068 "/Engine/Private/SceneData.ush"
struct FSceneDataIntermediates
{
	uint PrimitiveId;
	uint InstanceId;
	uint ViewIndex;
	uint CullingFlags;
	
	uint InstanceIdLoadIndex;
	FInstanceSceneData InstanceData;
	FPrimitiveSceneData Primitive;
};

#line 90 "/Engine/Private/ShadingCommon.ush"
bool GetShadingModelRequiresBackfaceLighting(uint ShadingModelID)
{
	return ShadingModelID == 6;
}

#line 113 "/Engine/Private/ShadingCommon.ush"
float DielectricSpecularToF0(float Specular)
{
	return float(0.08f * Specular);
}

#line 146 "/Engine/Private/ShadingCommon.ush"
float3 ComputeF0(float Specular, float3 BaseColor, float Metallic)
{
	return lerp(DielectricSpecularToF0(Specular).xxx, BaseColor, Metallic.xxx);
}

#line 329 "/Engine/Private/DeferredShadingCommon.ush"
struct FGBufferData
{
	
	float3 WorldNormal;
	
	float3 WorldTangent;
	
	float3 DiffuseColor;
	
	float3 SpecularColor;
	
	float3 BaseColor;
	
	float Metallic;
	
	float Specular;
	
	float4 CustomData;
	
	float GenericAO;
	
	float IndirectIrradiance;
	
	
	float4 PrecomputedShadowFactors;
	
	float Roughness;
	
	float Anisotropy;
	
	float GBufferAO;
	
	uint DiffuseIndirectSampleOcclusion;
	
	uint ShadingModelID;
	
	uint SelectiveOutputMask;
	
	float PerObjectGBufferData;
	
	float CustomDepth;
	
	uint CustomStencil;
	
	
	float Depth;
	
	float4 Velocity;

	
	float3 StoredBaseColor;
	
	float StoredSpecular;
	
	float StoredMetallic;

	
	float Curvature;
};

#line 389 "/Engine/Private/DeferredShadingCommon.ush"
bool CastContactShadow(FGBufferData GBufferData)
{
	uint PackedAlpha = (uint)(GBufferData.PerObjectGBufferData * 3.999f);
	bool bCastContactShadowBit = PackedAlpha & 1;
	
	bool bShadingModelCastContactShadows = (GBufferData.ShadingModelID != 9);
	return bCastContactShadowBit && bShadingModelCastContactShadows;
}

#line 407 "/Engine/Private/DeferredShadingCommon.ush"
bool CheckerFromPixelPos(uint2 PixelPos)
{
	
	
	uint TemporalAASampleIndex = uint(View_TemporalAAParams.x);


	return (PixelPos.x + PixelPos.y + TemporalAASampleIndex) % 2;



}

#line 1191 "/Engine/Private/DeferredShadingCommon.ush"
float3 AOMultiBounce(float3 BaseColor, float AO)
{
	if (0 && !0)
	{
		return AO;
	}
	else
	{
		float3 a = 2.0404 * BaseColor - 0.3324;
		float3 b = -4.7951 * BaseColor + 0.6417;
		float3 c = 2.7552 * BaseColor + 0.6903;
		return max(AO, ((AO * a + b) * AO + c) * AO);
	}
}

#line 144 "/Engine/Private/MaterialTexture.ush"
float4 ProcessMaterialColorTextureLookup(float4 TextureValue)
{
	return TextureValue;
}

#line 163 "/Engine/Private/MaterialTexture.ush"
float4 ProcessMaterialLinearColorTextureLookup(float4 TextureValue)
{
	return TextureValue;
}

#line 169 "/Engine/Generated/Material.ush"
struct FStrataData
{
	uint Dummy;
};

#line 173 "/Engine/Generated/Material.ush"
FStrataData GetInitialisedStrataData() { return (FStrataData)0; }

#line 186 "/Engine/Generated/Material.ush"
struct FMaterialParticleParameters
{
	
	float RelativeTime;
	
	float MotionBlurFade;
	
	float Random;
	
	float4 Velocity;
	
	float4 Color;
	
	float4 TranslatedWorldPositionAndSize;
	
	float4 MacroUV;

	



	float4 DynamicParameter;













	
	FLWCMatrix ParticleToWorld;

	
	FLWCInverseMatrix WorldToParticle;








	
	float2 Size;

	
	float SpriteRotation;
};

#line 296 "/Engine/Generated/Material.ush"
struct FMaterialAttributes
{
	float3 BaseColor;
	float Metallic;
	float Specular;
	float Roughness;
	float Anisotropy;
	float3 EmissiveColor;
	float Opacity;
	float OpacityMask;
	float3 Normal;
	float3 Tangent;
	float3 WorldPositionOffset;
	float Displacement;
	float3 SubsurfaceColor;
	float ClearCoat;
	float ClearCoatRoughness;
	float AmbientOcclusion;
	float3 Refraction;
	float PixelDepthOffset;
	uint ShadingModel;
	float SurfaceThickness;
	FStrataData FrontMaterial;
	float2 CustomizedUV0;
	float2 CustomizedUV1;
	float2 CustomizedUV2;
	float2 CustomizedUV3;
	float2 CustomizedUV4;
	float2 CustomizedUV5;
	float2 CustomizedUV6;
	float2 CustomizedUV7;
	float3 BentNormal;
	float3 ClearCoatBottomNormal;
	float3 CustomEyeTangent;
	float3 TransmittanceColor;
};

#line 373 "/Engine/Generated/Material.ush"
struct FPixelMaterialInputs
{
	float3 EmissiveColor;
	float Opacity;
	float OpacityMask;
	float3 BaseColor;
	float Metallic;
	float Specular;
	float Roughness;
	float Anisotropy;
	float3 Normal;
	float3 Tangent;
	float4 Subsurface;
	float AmbientOcclusion;
	float3 Refraction;
	float PixelDepthOffset;
	uint ShadingModel;
	FStrataData FrontMaterial;
	float SurfaceThickness;
	float Displacement;












};

#line 411 "/Engine/Generated/Material.ush"
struct FMaterialPixelParameters
{

	float2 TexCoords[1];


	
	float4 VertexColor;

	
	float3 WorldNormal;
	
	
	float3 WorldTangent;

	
	float3 ReflectionVector;

	
	float3 CameraVector;

	
	float3 LightVector;

	




	float4 SvPosition;
		
	
	float4 ScreenPosition;

	



	float2 ViewBufferUV;





	float UnMirrored;

	float TwoSidedSign;

	



	float3x3 TangentToWorld;






	



	FLWCVector3 AbsoluteWorldPosition;

	


	float3 WorldPosition_CamRelative;

	



	FLWCVector3 WorldPosition_NoOffsets;

	



	float3 WorldPosition_NoOffsets_CamRelative;

	
	float3 LightingPositionOffset;

	
	float3 WorldPosition_DDX;
	float3 WorldPosition_DDY;
	float4 VertexColor_DDX;
	float4 VertexColor_DDY;
	float4 ScreenPosition_DDX;
	float4 ScreenPosition_DDY;
	

	float2 TexCoords_DDX[1];
	float2 TexCoords_DDY[1];


	float AOMaterialMask;















	
	uint PrimitiveId;










	


















	
	FMaterialParticleParameters Particle;











	
	
	
	uint Dummy;





















#line 620 "/Engine/Generated/Material.ush"


	FMaterialAttributes MaterialAttributes;
};

#line 639 "/Engine/Generated/Material.ush"
FMaterialPixelParameters MakeInitializedMaterialPixelParameters()
{
	FMaterialPixelParameters MPP;
	MPP = (FMaterialPixelParameters)0;
	MPP.TangentToWorld = float3x3(1,0,0,0,1,0,0,0,1);
	return MPP;
}

#line 651 "/Engine/Generated/Material.ush"
struct FMaterialVertexParameters
{
	
	
	
	float3 WorldPosition;
	
	float3x3 TangentToWorld;










	













	
	
	FLWCMatrix PrevFrameLocalToWorld;

	float3 PreSkinnedPosition;
	float3 PreSkinnedNormal;

	float4 VertexColor;

	float2 TexCoords[1];
	









	
	FMaterialParticleParameters Particle;





	FMaterialAttributes MaterialAttributes;

	
	FSceneDataIntermediates SceneData;

	
	
	uint PrimitiveId;

	bool bEvaluateWorldPositionOffset;
};

#line 751 "/Engine/Generated/Material.ush"
FPrimitiveSceneData GetPrimitiveData(FMaterialVertexParameters Parameters)
{
	return Parameters.SceneData.Primitive;
}

#line 756 "/Engine/Generated/Material.ush"
FPrimitiveSceneData GetPrimitiveData(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters.PrimitiveId);
}

#line 862 "/Engine/Generated/Material.ush"
float3 GetTranslatedWorldPosition(FMaterialVertexParameters Parameters)
{
	return Parameters.WorldPosition;
}

#line 877 "/Engine/Generated/Material.ush"
FLWCVector3 GetWorldPosition(FMaterialVertexParameters Parameters)
{
	return LWCSubtract(GetTranslatedWorldPosition(Parameters), ResolvedView.PreViewTranslation);
}

#line 887 "/Engine/Generated/Material.ush"
FLWCVector3 GetWorldPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.AbsoluteWorldPosition;
}

#line 897 "/Engine/Generated/Material.ush"
float3 GetTranslatedWorldPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.WorldPosition_CamRelative;
}

#line 907 "/Engine/Generated/Material.ush"
float4 GetScreenPosition(FMaterialVertexParameters Parameters)
{
	return mul(float4(Parameters.WorldPosition, 1.0f), ResolvedView.TranslatedWorldToClip);
}

#line 912 "/Engine/Generated/Material.ush"
float4 GetScreenPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.ScreenPosition;
}

#line 918 "/Engine/Generated/Material.ush"
float GetPixelDepth(FMaterialVertexParameters Parameters)
{
	[flatten]
	if (View_ViewToClip[3][3] < 1.0f)
	{
		
		return GetScreenPosition(Parameters).w;
	}
	else
	{
		
		return ConvertFromDeviceZ(GetScreenPosition(Parameters).z);
	}
}

#line 933 "/Engine/Generated/Material.ush"
float GetPixelDepth(FMaterialPixelParameters Parameters)
{
	[flatten]
	if (View_ViewToClip[3][3] < 1.0f)
	{
		
		return GetScreenPosition(Parameters).w;
	}
	else
	{
		
		return ConvertFromDeviceZ(GetScreenPosition(Parameters).z);
	}
}

#line 1537 "/Engine/Generated/Material.ush"
float3 RotateAboutAxis(float4 NormalizedRotationAxisAndAngle, float3 PositionOnAxis, float3 Position)
{
	
	float3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);
	
	float3 UAxis = Position - ClosestPointOnAxis;
	float3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
	float CosAngle;
	float SinAngle;
	sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle);
	
	float3 R = UAxis * CosAngle + VAxis * SinAngle;
	
	float3 RotatedPosition = ClosestPointOnAxis + R;
	
	return RotatedPosition - Position;
}

#line 1559 "/Engine/Generated/Material.ush"
float3 RotateAboutAxis(float4 NormalizedRotationAxisAndAngle, FLWCVector3 PositionOnAxis, FLWCVector3 Position)
{
	
	FLWCVector3 ClosestPointOnAxis = LWCAdd(PositionOnAxis, NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, LWCToFloat(LWCSubtract(Position, PositionOnAxis))));
	
	float3 UAxis = LWCToFloat(LWCSubtract(Position, ClosestPointOnAxis));
	float3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
	float CosAngle;
	float SinAngle;
	sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle);
	
	float3 R = UAxis * CosAngle + VAxis * SinAngle;

	
	
	
	
	
	
	
	return R - UAxis;
}

#line 2096 "/Engine/Generated/Material.ush"
float3 ReflectionAboutCustomWorldNormal(FMaterialPixelParameters Parameters, float3 WorldNormal, bool bNormalizeInputNormal)
{
	if (bNormalizeInputNormal)
	{
		WorldNormal = normalize(WorldNormal);
	}

	return -Parameters.CameraVector + WorldNormal * dot(WorldNormal, Parameters.CameraVector) * 2.0;
}

#line 3053 "/Engine/Generated/Material.ush"
float3 GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

#line 3058 "/Engine/Generated/Material.ush"
float3 GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3 RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);
		
	
	{
		
		float3 OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;

		



		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}
	

	return RetNormal;
}

#line 3090 "/Engine/Generated/Material.ush"
float3 GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

#line 3095 "/Engine/Generated/Material.ush"
float3 GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3 EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

#line 3110 "/Engine/Generated/Material.ush"
uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

#line 3115 "/Engine/Generated/Material.ush"
float3 GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

#line 3120 "/Engine/Generated/Material.ush"
float3 GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

#line 3125 "/Engine/Generated/Material.ush"
float GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

#line 3130 "/Engine/Generated/Material.ush"
float GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

#line 3135 "/Engine/Generated/Material.ush"
float GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

#line 3140 "/Engine/Generated/Material.ush"
float GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

#line 3145 "/Engine/Generated/Material.ush"
float GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

#line 3150 "/Engine/Generated/Material.ush"
float GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{



	float Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));
	
	
	{
		
		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}
	
	
	return Roughness;
}

#line 3167 "/Engine/Generated/Material.ush"
float GetMaterialAnisotropyRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Anisotropy;
}

#line 3172 "/Engine/Generated/Material.ush"
float GetMaterialAnisotropy(FPixelMaterialInputs PixelMaterialInputs)
{
	return clamp(GetMaterialAnisotropyRaw(PixelMaterialInputs), -1.0f, 1.0f);
}

#line 3177 "/Engine/Generated/Material.ush"
float GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

#line 3214 "/Engine/Generated/Material.ush"
float GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}

#line 3245 "/Engine/Generated/Material.ush"
float GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}

#line 3267 "/Engine/Generated/Material.ush"
float GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{
	
	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}

#line 3359 "/Engine/Generated/Material.ush"
float GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

#line 3364 "/Engine/Generated/Material.ush"
float GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

#line 3446 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld(float3x3 TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}

#line 3507 "/Engine/Generated/Material.ush"
void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{
	
	float Local0 = (View_GameTime * -0.10000000);
	float Local1 = (View_GameTime * 0.01000000);
	float2 Local2 = Parameters.TexCoords[0].xy;
	float2 Local3 = (  Local2  * Material_PreshaderBuffer[1].yz);
	float2 Local4 = (float2(Local0,Local1) +   Local3 );
	float Local5 =  1.0f;
	float4 Local6 = UnpackNormalMap(Texture2DSampleBias(Material_Texture2D_0,Material_Texture2D_0Sampler,  Local4 ,View_MaterialTextureMipBias));
	float Local7 =  1.0f;
	float Local8 = (View_GameTime * 0.03000000);
	float Local9 = (View_GameTime * -0.07500000);
	float2 Local10 = (float2(Local8,Local9) +   Local3 );
	float Local11 =  1.0f;
	float4 Local12 = UnpackNormalMap(Texture2DSampleBias(Material_Texture2D_0,Material_Texture2D_0Sampler,  Local10 ,View_MaterialTextureMipBias));
	float Local13 =  1.0f;
	float2 Local14 = (float2(Local6.r,Local6.g) + float2(Local12.r,Local12.g));
	float2 Local15 = (Local14 * ((float2)Material_PreshaderBuffer[1].w));
	float Local16 = dot(Local15,Local15);
	float Local17 = (1.00000000 - Local16);
	float Local18 = saturate(Local17);
	float Local19 = sqrt(Local18);
	float Local20 = dot(float3(Local15,float3(Local15,Local19).b),float3(Local15,float3(Local15,Local19).b));
	float3 Local21 = normalize(float3(Local15,float3(Local15,Local19).b));
	float4 Local22 =  select_internal( (abs(Local20 - 0.00000100) > 0.00001000) ,  select_internal( (Local20 >= 0.00000100) , float4(Local21,0.00000000) , float4(float3(0.00000000,0.00000000,1.00000000),1.00000000) ) , float4(float3(0.00000000,0.00000000,1.00000000),1.00000000) );

	
	PixelMaterialInputs.Normal = Local22.rgb;












	
	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);




	
	MaterialNormal = normalize(MaterialNormal);


	
	
	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);








	
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;


	
	float3 Local23 = lerp(float3(0.00000000,0.00000000,0.00000000),Material_PreshaderBuffer[2].yzw,Material_PreshaderBuffer[2].x);
	float4 Local24 = Parameters.VertexColor;
	float Local25 =   Local24 .r;
	float Local26 =   Local25 .r;
	float Local27 = (  Local26  - Material_PreshaderBuffer[5].x);
	float Local28 = (  Local27  * Material_PreshaderBuffer[5].z);
	float3 Local29 = lerp(Material_PreshaderBuffer[7].xyz,Material_PreshaderBuffer[6].xyz,  Local28 );
	float Local30 =  select_internal( (abs(Material_PreshaderBuffer[5].x -   Local26 ) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[5].x >=   Local26 ) , 0.00000000 , 1.00000000 ) , 0.00000000 );
	float3 Local31 = (  Local29  * ((float3)Local30));
	float Local32 = (  Local26  * Material_PreshaderBuffer[9].x);
	float3 Local33 = lerp(Material_PreshaderBuffer[9].yzw,Material_PreshaderBuffer[7].xyz,  Local32 );
	float Local34 =  select_internal( (abs(  Local26  - Material_PreshaderBuffer[5].x) > 0.00001000) ,  select_internal( (  Local26  >= Material_PreshaderBuffer[5].x) , 0.00000000 , 1.00000000 ) , 0.00000000 );
	float3 Local35 = (  Local33  * ((float3)Local34));
	float3 Local36 = (  Local31  +   Local35 );
	float3 Local37 = RotateAboutAxis(float4(normalize(float3(1.00000000,1.00000000,1.00000000)),0.87964594),((float3)0.00000000),Material_PreshaderBuffer[7].xyz);
	float3 Local38 = (Local37 + Material_PreshaderBuffer[7].xyz);
	float3 Local39 = RotateAboutAxis(float4(normalize(float3(1.00000000,1.00000000,1.00000000)),0.31415927),((float3)0.00000000),Material_PreshaderBuffer[6].xyz);
	float3 Local40 = (Local39 + Material_PreshaderBuffer[6].xyz);
	float Local41 =   Local24 .g;
	float Local42 =   Local41 .r;
	float Local43 = (  Local42  - Material_PreshaderBuffer[10].x);
	float Local44 = (  Local43  * Material_PreshaderBuffer[10].z);
	float3 Local45 = lerp(Local38,Local40,  Local44 );
	float Local46 =  select_internal( (abs(Material_PreshaderBuffer[10].x -   Local42 ) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[10].x >=   Local42 ) , 0.00000000 , 1.00000000 ) , 0.00000000 );
	float3 Local47 = (Local45 * ((float3)Local46));
	float3 Local48 = RotateAboutAxis(float4(normalize(float3(1.00000000,1.00000000,1.00000000)),0.62831855),((float3)0.00000000),Material_PreshaderBuffer[9].yzw);
	float3 Local49 = (Local48 + Material_PreshaderBuffer[9].yzw);
	float Local50 = (  Local42  * Material_PreshaderBuffer[10].w);
	float3 Local51 = lerp(Local49,Local38,  Local50 );
	float Local52 =  select_internal( (abs(  Local42  - Material_PreshaderBuffer[10].x) > 0.00001000) ,  select_internal( (  Local42  >= Material_PreshaderBuffer[10].x) , 0.00000000 , 1.00000000 ) , 0.00000000 );
	float3 Local53 = (Local51 * ((float3)Local52));
	float3 Local54 = (Local47 + Local53);
	float2 Local55 = (  Local2  * Material_PreshaderBuffer[11].zw);
	float Local56 =  1.0f;
	float4 Local57 = Texture2DSampleBias(Material_Texture2D_1,Material_Texture2D_1Sampler,  Local55 ,View_MaterialTextureMipBias);
	float Local58 =  1.0f;
	float3 Local59 = lerp(  Local36 ,Local54,Local57.r);
	float Local60 =   Local24 .b;
	float Local61 =   Local60 .r;
	float Local62 = (  Local61  - Material_PreshaderBuffer[12].x);
	float Local63 = (  Local62  * Material_PreshaderBuffer[12].z);
	float3 Local64 = lerp(Material_PreshaderBuffer[6].xyz,Material_PreshaderBuffer[7].xyz,  Local63 );
	float Local65 =  select_internal( (abs(Material_PreshaderBuffer[12].x -   Local61 ) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[12].x >=   Local61 ) , 0.00000000 , 1.00000000 ) , 0.00000000 );
	float3 Local66 = (  Local64  * ((float3)Local65));
	float Local67 = (  Local61  * Material_PreshaderBuffer[12].w);
	float3 Local68 = lerp(Material_PreshaderBuffer[9].yzw,Material_PreshaderBuffer[6].xyz,  Local67 );
	float Local69 =  select_internal( (abs(  Local61  - Material_PreshaderBuffer[12].x) > 0.00001000) ,  select_internal( (  Local61  >= Material_PreshaderBuffer[12].x) , 0.00000000 , 1.00000000 ) , 0.00000000 );
	float3 Local70 = (  Local68  * ((float3)Local69));
	float3 Local71 = (  Local66  +   Local70 );
	float Local72 =  1.0f;
	float4 Local73 = ProcessMaterialColorTextureLookup(Texture2DSampleBias(Material_Texture2D_2,Material_Texture2D_2Sampler,  Local55 ,View_MaterialTextureMipBias));
	float Local74 =  1.0f;
	float3 Local75 = lerp(Local59,  Local71 ,Local73.r);
	float Local76 = (Local75.x * 6.28318548);
	float3 Local77 = RotateAboutAxis(float4(normalize(float3(1.00000000,1.00000000,1.00000000)),Local76),((float3)0.00000000),((float3)Material_PreshaderBuffer[13].x));
	float3 Local78 = (Local77 + ((float3)Material_PreshaderBuffer[13].x));
	float3 Local79 = saturate(Local78);
	float Local80 = (View_GameTime * Material_PreshaderBuffer[14].z);
	float Local81 = (View_GameTime * Material_PreshaderBuffer[14].w);
	float2 Local82 = (  Local2  * Material_PreshaderBuffer[16].xy);
	float2 Local83 = (  Local82  + ((float2)0.50000000));
	float2 Local84 = (  Local83  - Material_PreshaderBuffer[16].zw);
	float2 Local85 = (float2(Local80,Local81) +   Local84 );
	float Local86 =  1.0f;
	float4 Local87 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleBias(Material_Texture2D_3,Material_Texture2D_3Sampler,  Local85 ,View_MaterialTextureMipBias));
	float Local88 =  1.0f;
	float2 Local89 = (((float2)-0.50000000) + Local87.rgb.rg);
	float2 Local90 = (Local89 * ((float2)2.00000000));
	float2 Local91 = (Local90 * ((float2)Material_PreshaderBuffer[17].x));
	float2 Local92 = (  Local2  * ((float2)Material_PreshaderBuffer[17].y));
	float Local93 =  1.0f;
	float4 Local94 = ProcessMaterialColorTextureLookup(Texture2DSampleBias(Material_Texture2D_4,Material_Texture2D_4Sampler,  Local92 ,View_MaterialTextureMipBias));
	float Local95 =  1.0f;
	float Local96 = (Local94.r * Material_PreshaderBuffer[17].z);
	float Local97 = saturate(Local96);
	float Local98 = lerp(1.00000000,Local97,Material_PreshaderBuffer[17].w);
	float2 Local99 = (Local91 * ((float2)Local98));
	float2 Local100 = (  Local2  * Material_PreshaderBuffer[18].zw);
	float2 Local101 = (Local99 +   Local100 );
	float Local102 =  1.0f;
	float4 Local103 = Texture2DSampleBias(Material_Texture2D_5,Material_Texture2D_5Sampler,Local101,View_MaterialTextureMipBias);
	float Local104 =  1.0f;
	float Local105 = PositiveClampedPow(Local103.r,Material_PreshaderBuffer[19].x);
	float Local106 =   Local24 .a;
	float Local107 = (  Local106  / 2.00000000);
	float Local108 = saturate(  Local107 );
	float Local109 = lerp(Material_PreshaderBuffer[19].z,Material_PreshaderBuffer[19].y,  Local108 );
	float Local110 = (Local105 *   Local109 );
	float Local111 = saturate(Local110);
	float3 Local112 = lerp(Local75,Local79,Local111);
	float Local113 = GetPixelDepth(Parameters);
	float Local114 = CalcSceneDepth(ScreenAlignedPosition(GetScreenPosition(Parameters)));
	float Local115 = (Local114 -   Local113 );
	float Local116 = (Local115 / 100.00000000);
	float Local117 = saturate(Local116);
	FLWCVector3 Local118 = GetWorldPosition(Parameters);
	float Local119 = GetDistanceToNearestSurfaceGlobal(  Local118 );
	float Local120 = (Local119 * Material_PreshaderBuffer[20].w);
	float Local121 = dot(Parameters.WorldNormal,normalize(float3(0.00000000,0.00000000,1.00000000)));
	float Local122 = (Local121 * 0.50000000);
	float Local123 = (Local122 + 0.50000000);
	float Local124 = (Local123 * Material_PreshaderBuffer[21].y);
	float Local125 = (Local124 + Material_PreshaderBuffer[22].x);
	float Local126 = saturate(Local125);
	float Local127 = PositiveClampedPow(Local126,Material_PreshaderBuffer[22].y);
	float Local128 = lerp(Local120,Material_PreshaderBuffer[22].z,Local127);
	float Local129 = (View_GameTime * -0.05000000);
	float2 Local130 = (  Local2  * ((float2)Material_PreshaderBuffer[22].w));
	float2 Local131 = (float2(Local129,0.00000000) +   Local130 );
	float Local132 =  1.0f;
	float4 Local133 = ProcessMaterialColorTextureLookup(Texture2DSampleBias(Material_Texture2D_6,Material_Texture2D_6Sampler,  Local131 ,View_MaterialTextureMipBias));
	float Local134 =  1.0f;
	float Local135 = (View_GameTime * Material_PreshaderBuffer[23].w);
	float Local136 = (View_GameTime * Material_PreshaderBuffer[24].x);
	float2 Local137 = (float2(Local135,Local136) +   Local130 );
	float Local138 =  1.0f;
	float4 Local139 = ProcessMaterialColorTextureLookup(Texture2DSampleBias(Material_Texture2D_6,Material_Texture2D_6Sampler,  Local137 ,View_MaterialTextureMipBias));
	float Local140 =  1.0f;
	float Local141 = lerp(Local133.g,Local139.g,Local126);
	float Local142 = (Local141 * 2.00000000);
	float Local143 = (Local128 + Local142);
	float2 Local144 = (  Local2  * ((float2)Material_PreshaderBuffer[24].y));
	float2 Local145 = (float2(Local129,0.00000000) +   Local144 );
	float Local146 =  1.0f;
	float4 Local147 = ProcessMaterialColorTextureLookup(Texture2DSampleBias(Material_Texture2D_6,Material_Texture2D_6Sampler,  Local145 ,View_MaterialTextureMipBias));
	float Local148 =  1.0f;
	float2 Local149 = (float2(Local135,Local136) +   Local144 );
	float Local150 =  1.0f;
	float4 Local151 = ProcessMaterialColorTextureLookup(Texture2DSampleBias(Material_Texture2D_6,Material_Texture2D_6Sampler,  Local149 ,View_MaterialTextureMipBias));
	float Local152 =  1.0f;
	float Local153 = lerp(Local147.g,Local151.g,Local126);
	float Local154 = (Local153 * 3.00000000);
	float Local155 = (Local143 + Local154);
	float Local156 = (1.00000000 - Local155);
	float Local157 = (Local156 * Material_PreshaderBuffer[24].z);
	float Local158 = saturate(Local157);
	float Local159 = lerp(Local117,1.00000000,Local158);
	float Local160 = max(Local159,Material_PreshaderBuffer[24].w);
	float Local161 = min(Local160,Material_PreshaderBuffer[25].x);

	PixelMaterialInputs.EmissiveColor = Local23;
	PixelMaterialInputs.Opacity = Local161;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor = Local112;
	PixelMaterialInputs.Metallic = Material_PreshaderBuffer[19].w;
	PixelMaterialInputs.Specular = Material_PreshaderBuffer[20].x;
	PixelMaterialInputs.Roughness = Material_PreshaderBuffer[20].y;
	PixelMaterialInputs.Anisotropy = 0.00000000;
	PixelMaterialInputs.Normal = Local22.rgb;
	PixelMaterialInputs.Tangent = float3(1.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction = float3(float3(1.00000000,0.00000000,0.00000000).xy,Material_PreshaderBuffer[25].y);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 1;
	PixelMaterialInputs.FrontMaterial = GetInitialisedStrataData();
	PixelMaterialInputs.SurfaceThickness = 0.01000000;
	PixelMaterialInputs.Displacement = 0.00000000;





	Parameters.WorldTangent = 0;

}

#line 3365
void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float ArgCos = dot(floor(SvPosition.xy), float2(347.83451793, 3343.28371963));




		float RandCos = cos(ArgCos);
		float RandomVal = frac(RandCos * 1000.0);
		float RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

#line 3383
void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}

#line 4044 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}

#line 4047 "/Engine/Generated/Material.ush"
void ClipLODTransition(float2 SvPosition)
{
}

#line 4078 "/Engine/Generated/Material.ush"
void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);

#line 4106 "/Engine/Generated/Material.ush"

}

#line 4177 "/Engine/Generated/Material.ush"
bool IsOrthoProjection(ViewState InView)
{
	return InView.ViewToClip[3][3] >= 1.0f;
}

#line 4183 "/Engine/Generated/Material.ush"
void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{
	
	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = LWCSubtract(TranslatedWorldPosition.xyz, ResolvedView.PreViewTranslation);

	
	

	Parameters.WorldPosition_NoOffsets_CamRelative = TranslatedWorldPositionExcludingShaderOffsets;
	Parameters.WorldPosition_NoOffsets = LWCSubtract(TranslatedWorldPositionExcludingShaderOffsets, ResolvedView.PreViewTranslation);


	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;
	Parameters.ViewBufferUV = ScreenPositionToBufferUV(ScreenPosition);

	
	


		if (IsOrthoProjection(ResolvedView))
		{
			
			Parameters.CameraVector = -ResolvedView.ViewForward;
		}
		else
		{
			
			Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
		}
	

	Parameters.LightVector = 0;







	Parameters.TwoSidedSign = 1.0f;



























	{
		CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
	}
}

#line 4291 "/Engine/Generated/Material.ush"
float3x3 AssembleTangentToWorld( float3 TangentToWorld0, float4 TangentToWorld2 )
{
	
	

	
	
	float3 TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;
	
	return float3x3(TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}

#line 4372 "/Engine/Generated/Material.ush"
float3 GetWorldBentNormalZero(in FMaterialPixelParameters MaterialParameters)
{







	return MaterialParameters.WorldNormal;

}

#line 67 "/Engine/Private/BasePassCommon.ush"
struct FSharedBasePassInterpolants
{
	

	float4 VertexFog		: TEXCOORD7;







	float3 PixelPositionExcludingWPO : TEXCOORD9;


























};

#line 10 "/Engine/Private/TranslucencyVolumeCommon.ush"
void ComputeVolumeUVs(float3 TranslatedWorldPosition, float3 LightingPositionOffset, out float3 InnerVolumeUVs, out float3 OuterVolumeUVs, out float FinalLerpFactor)
{
	
	InnerVolumeUVs = (TranslatedWorldPosition + LightingPositionOffset - View_TranslucencyLightingVolumeMin[0].xyz) * View_TranslucencyLightingVolumeInvSize[0].xyz;
	OuterVolumeUVs = (TranslatedWorldPosition + LightingPositionOffset - View_TranslucencyLightingVolumeMin[1].xyz) * View_TranslucencyLightingVolumeInvSize[1].xyz;

	
	
	float TransitionScale = 6;
	
	float3 LerpFactors = saturate((.5f - abs(InnerVolumeUVs - .5f)) * TransitionScale);
	FinalLerpFactor = LerpFactors.x * LerpFactors.y * LerpFactors.z;
}

#line 24 "/Engine/Private/TranslucencyVolumeCommon.ush"
float4 GetAmbientLightingVectorFromTranslucentLightingVolume(float3 InnerVolumeUVs, float3 OuterVolumeUVs, float FinalLerpFactor)
{
	
	float4 InnerLighting = Texture3DSampleLevel(TranslucentBasePass_TranslucencyLightingVolumeAmbientInner, View_SharedBilinearClampedSampler, InnerVolumeUVs, 0);
	float4 OuterLighting = Texture3DSampleLevel(TranslucentBasePass_TranslucencyLightingVolumeAmbientOuter, View_SharedBilinearClampedSampler, OuterVolumeUVs, 0);

	
	return lerp(OuterLighting, InnerLighting, FinalLerpFactor);
}

#line 34 "/Engine/Private/TranslucencyVolumeCommon.ush"
float3 GetDirectionalLightingVectorFromTranslucentLightingVolume(float3 InnerVolumeUVs, float3 OuterVolumeUVs, float FinalLerpFactor)
{
	
	float3 InnerVector1 = Texture3DSampleLevel(TranslucentBasePass_TranslucencyLightingVolumeDirectionalInner, View_SharedBilinearClampedSampler, InnerVolumeUVs, 0).rgb;
	float3 OuterVector1 = Texture3DSampleLevel(TranslucentBasePass_TranslucencyLightingVolumeDirectionalOuter, View_SharedBilinearClampedSampler, OuterVolumeUVs, 0).rgb;

	
	return lerp(OuterVector1, InnerVector1, FinalLerpFactor);
}

#line 59 "/Engine/Private/TranslucencyVolumeCommon.ush"
void GetVolumeLightingDirectional(float4 AmbientLightingVector, float3 DirectionalLightingVector, float3 WorldNormal, float3 DiffuseColor, float DirectionalLightingIntensity, inout float3 InterpolatedLighting, out float4 VolumeLighting)
{
	AmbientLightingVector.rgb /= DirectionalLightingIntensity;
	DirectionalLightingVector.rgb *= DirectionalLightingIntensity;

	
	FTwoBandSHVectorRGB TranslucentLighting;
	TranslucentLighting.R.V.x = AmbientLightingVector.r;
	TranslucentLighting.G.V.x = AmbientLightingVector.g;
	TranslucentLighting.B.V.x = AmbientLightingVector.b;
	float3 NormalizedAmbientColor = AmbientLightingVector.rgb / (Luminance(AmbientLightingVector.rgb) + 0.00001f);

	
	TranslucentLighting.R.V.yzw = DirectionalLightingVector.rgb * NormalizedAmbientColor.r;
	TranslucentLighting.G.V.yzw = DirectionalLightingVector.rgb * NormalizedAmbientColor.g;
	TranslucentLighting.B.V.yzw = DirectionalLightingVector.rgb * NormalizedAmbientColor.b;

	
	FTwoBandSHVector DiffuseTransferSH = CalcDiffuseTransferSH(WorldNormal, 1);
	VolumeLighting = float4(max(float3(0, 0, 0), DotSH(TranslucentLighting, DiffuseTransferSH)), AmbientLightingVector.a);
	InterpolatedLighting += DiffuseColor * VolumeLighting.rgb;
}

#line 82 "/Engine/Private/TranslucencyVolumeCommon.ush"
float4 GetVolumeLightingDirectional(float4 AmbientLightingVector, float3 DirectionalLightingVector, float3 WorldNormal, float DirectionalLightingIntensity)
{
	float3 DiffuseColor = 1.0f;
	float3 InterpolatedLighting = 0.0f;
	float4 VolumeLighting = 0.0f;

	GetVolumeLightingDirectional(AmbientLightingVector, DirectionalLightingVector, WorldNormal, DiffuseColor, DirectionalLightingIntensity, InterpolatedLighting, VolumeLighting);

	return VolumeLighting;
}

#line 121 "/Engine/Private/BasePassCommon.ush"
struct FShadingOcclusion
{
	float  DiffOcclusion;
	float  SpecOcclusion;
	float3 BentNormal;
};

#line 218 "/Engine/Private/BasePassCommon.ush"
FShadingOcclusion ApplyBentNormal(
	in float3 CameraVector, 
	in float3 WorldNormal, 
	in float3 WorldBentNormal0, 
	in float Roughness,
	in float MaterialAO)
{
	FShadingOcclusion Out;
	Out.DiffOcclusion = MaterialAO;
	Out.SpecOcclusion = MaterialAO;
	Out.BentNormal    = WorldNormal;

#line 253 "/Engine/Private/BasePassCommon.ush"

	return Out;
}

#line 7 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4	TangentToWorld2	: TEXCOORD11_centroid;


	float4	Color : COLOR0;








	float4	TexCoords[(1+1)/2]	: TEXCOORD0;





	float4	LightMapCoordinate : TEXCOORD4;






	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
	
		nointerpolation uint LightmapDataIndex : LIGHTMAP_ID;
	
	



	























};

#line 69 "/Engine/Private/LocalVertexFactoryCommon.ush"
float2 GetUV(FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex)
{
	float4 UVVector = Interpolants.TexCoords[UVIndex / 2];
	return UVIndex % 2 ? UVVector.zw : UVVector.xy;
}

#line 89 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.Color;



}

#line 106 "/Engine/Private/LocalVertexFactoryCommon.ush"
void GetLightMapCoordinates(FVertexFactoryInterpolantsVSToPS Interpolants, out float2 LightmapUV0, out float2 LightmapUV1, out uint LightmapDataIndex)
{
	LightmapUV0 = Interpolants.LightMapCoordinate.xy * float2( 1, 0.5 );
	LightmapUV1 = LightmapUV0 + float2( 0, 0.5 );


	LightmapDataIndex = Interpolants.LightmapDataIndex;



}

#line 135 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

#line 140 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

#line 154 "/Engine/Private/LocalVertexFactoryCommon.ush"
uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;



}

#line 16 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};

#line 35 "/Engine/Private/LightmapData.ush"
float4 LoadLightmapDataElement(uint Index)
{




	 { };
	return Scene_GPUScene_GPUSceneLightmapData[Index];

}

#line 47 "/Engine/Private/LightmapData.ush"
FLightmapSceneData GetLightmapData(uint LightmapDataIndex) 
{
	
	

	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex * 15;
	LightmapData.StaticShadowMapMasks = LoadLightmapDataElement(LightmapDataBaseOffset + 0);
	LightmapData.InvUniformPenumbraSizes = LoadLightmapDataElement(LightmapDataBaseOffset + 1);
	LightmapData.LightMapCoordinateScaleBias = LoadLightmapDataElement(LightmapDataBaseOffset + 2);
	LightmapData.ShadowMapCoordinateScaleBias = LoadLightmapDataElement(LightmapDataBaseOffset + 3);
	LightmapData.LightMapScale[0] = LoadLightmapDataElement(LightmapDataBaseOffset + 4);
	LightmapData.LightMapScale[1] = LoadLightmapDataElement(LightmapDataBaseOffset + 5);
	LightmapData.LightMapAdd[0] = LoadLightmapDataElement(LightmapDataBaseOffset + 6);
	LightmapData.LightMapAdd[1] = LoadLightmapDataElement(LightmapDataBaseOffset + 7);
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(LoadLightmapDataElement(LightmapDataBaseOffset + 8));
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(LoadLightmapDataElement(LightmapDataBaseOffset + 9));

	[unroll]
	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(LoadLightmapDataElement(LightmapDataBaseOffset + 10 + i));
	}

	return LightmapData;
}

#line 467 "/Engine/Private/ShaderPrintCommon.ush"
// Hashes are computed using the CityHash32 function

#line 287 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediatesCommon
{
	
	FSceneDataIntermediates SceneData;






};

#line 302 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	FVertexFactoryIntermediatesCommon Common;

	int PrimitiveLocalInstanceIndex;


	float3x3 TangentToLocal;
	float3x3 TangentToWorld;
	float TangentToWorldSign;

	float4 Color;

	bool bEvaluateWorldPositionOffset;






	float IsVisible;







	float3 PreSkinPosition;
};

#line 333 "/Engine/Private/LocalVertexFactory.ush"
FPrimitiveSceneData GetPrimitiveData(FVertexFactoryIntermediatesCommon Intermediates)
{
	return Intermediates.SceneData.Primitive;
}

#line 338 "/Engine/Private/LocalVertexFactory.ush"
FPrimitiveSceneData GetPrimitiveData(FVertexFactoryIntermediates Intermediates)
{
	return GetPrimitiveData(Intermediates.Common);
}

#line 516 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();


	[unroll]
	for( int CoordinateIndex = 0; CoordinateIndex < 1; CoordinateIndex++ )
	{
		Result.TexCoords[CoordinateIndex] = GetUV(Interpolants, CoordinateIndex);
	}








	float3 TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4 TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);

	
	Result.Particle.Color = float4(1,1,1,1);




	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );















	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);





























	return Result;
}

#line 22 "/Engine/Private/LightmapCommon.ush"
float2 ScaleLightmapUV(float2 UV, float2 Scale)
{
	return UV * Scale;
}

#line 27 "/Engine/Private/LightmapCommon.ush"
FloatDeriv2 ScaleLightmapUV(FloatDeriv2 UV, float2 Scale)
{
	UV.Value *= Scale;
	UV.Ddx *= Scale;
	UV.Ddy *= Scale;
	return UV;
}

#line 132 "/Engine/Private/LightmapCommon.ush"
void GetLightMapColorHQ( float LightmapVTPageTableResult, float2 LightmapUV0, float2 LightmapUV1, uint LightmapDataIndex, float3 WorldNormal, float2 SvPositionXY, bool bEvaluateBackface, out float3 OutDiffuseLighting, out float3 OutSubsurfaceLighting )
{
	OutSubsurfaceLighting = 0;

	float4 Lightmap0;
	float4 Lightmap1;




	Lightmap0 = Texture2DSample( LightmapResourceCluster_LightMapTexture, LightmapResourceCluster_LightMapSampler, LightmapUV0 );
	Lightmap1 = Texture2DSample( LightmapResourceCluster_LightMapTexture, LightmapResourceCluster_LightMapSampler, LightmapUV1 );


	float LogL = Lightmap0.w;

	
	LogL += Lightmap1.w * (1.0 / 255) - (0.5 / 255);

	
	LogL = LogL * GetLightmapData(LightmapDataIndex).LightMapScale[0].w + GetLightmapData(LightmapDataIndex).LightMapAdd[0].w;
		
	
	float3 UVW = Lightmap0.rgb * Lightmap0.rgb * GetLightmapData(LightmapDataIndex).LightMapScale[0].rgb + GetLightmapData(LightmapDataIndex).LightMapAdd[0].rgb;

	
	const float LogBlackPoint = 0.01858136;
	float L = exp2( LogL ) - LogBlackPoint;


	
	float4 SH = Lightmap1 * GetLightmapData(LightmapDataIndex).LightMapScale[1] + GetLightmapData(LightmapDataIndex).LightMapAdd[1];

	
	float Directionality = max( 0.0, dot( SH, float4(WorldNormal.yzx, 1) ) );

	

















	float Luma = L * Directionality;
	float3 Color = Luma * UVW;

	OutDiffuseLighting = Color;
}

#line 198 "/Engine/Private/LightmapCommon.ush"
float4 GetSkyBentNormalAndOcclusion(float LightmapVTPageTableResult, float2 LightmapUV, uint LightmapDataIndex, float2 SvPositionXY)
{
	float4 TextureValue;



	TextureValue = Texture2DSample( LightmapResourceCluster_SkyOcclusionTexture,  LightmapResourceCluster_LightMapSampler, LightmapUV );


	
	TextureValue.rgb = TextureValue.rgb * 2 - 1;
	
	TextureValue.a = TextureValue.a * TextureValue.a;
	return TextureValue;
}

#line 230 "/Engine/Private/LightmapCommon.ush"
float4 GetPrecomputedShadowMasks(float LightmapVTPageTableResult, FVertexFactoryInterpolantsVSToPS Interpolants, FMaterialPixelParameters MaterialParameters, float3 VolumetricLightmapBrickTextureUVs)
{
	
	
#line 255 "/Engine/Private/LightmapCommon.ush"


		
		
		return 0;

	
#line 290 "/Engine/Private/LightmapCommon.ush"

}

#line 7 "/Engine/Private/PlanarReflectionShared.ush"
float4 ComputePlanarReflections(float3 TranslatedWorldPosition, float3 WorldNormal, float Roughness, SamplerState SharedClampSampler)
{
	float4 OutPlanarReflection = 0;

	float PlaneDistance = dot(TranslucentBasePass_Shared_PlanarReflection_ReflectionPlane, float4(TranslatedWorldPosition, -1));
	float DistanceFade = 1 - saturate(abs(PlaneDistance) * TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionParameters.x + TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionParameters.y);

	float3 PlaneOriginToWorldPosition = TranslatedWorldPosition - TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionOrigin.xyz;
	float XAxisDistance = dot(PlaneOriginToWorldPosition, TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionXAxis.xyz);
	float XAxisFade = saturate((TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionXAxis.w - abs(XAxisDistance)) * TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionParameters.x);
	float YAxisDistance = dot(PlaneOriginToWorldPosition, TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionYAxis.xyz);
	float YAxisFade = saturate((TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionYAxis.w - abs(YAxisDistance)) * TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionParameters.x);
	DistanceFade *= XAxisFade * YAxisFade;

	float AngleFade = saturate(dot(TranslucentBasePass_Shared_PlanarReflection_ReflectionPlane.xyz, WorldNormal) * TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionParameters2.x + TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionParameters2.y);
	float RoughnessFade = 1 - saturate((Roughness - .2f) * 10.0f);
	float FinalFade = DistanceFade * AngleFade * RoughnessFade;

	[branch]
	if (FinalFade > 0)
	{
		
		float3 CameraToPixel = normalize(TranslatedWorldPosition - ResolvedView.TranslatedWorldCameraOrigin);
		
		float3 MirroredCameraVector = reflect(CameraToPixel, -TranslucentBasePass_Shared_PlanarReflection_ReflectionPlane.xyz);
		
		float3 MirroredNormal = mul(WorldNormal, TranslucentBasePass_Shared_PlanarReflection_InverseTransposeMirrorMatrix).xyz;
		
		float3 MirroredReflectionVectorOffNormal = reflect(MirroredCameraVector, MirroredNormal);
		
		
		
		float3 VirtualReflectionSpherePosition = TranslatedWorldPosition + MirroredReflectionVectorOffNormal * TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionParameters.z;
		
		float3 ViewVirtualReflectionSpherePosition = mul(float4(VirtualReflectionSpherePosition, 1), ResolvedView.TranslatedWorldToView).xyz;
		
		float4 ClipVirtualReflectionSpherePosition = mul(float4(ViewVirtualReflectionSpherePosition, 1), TranslucentBasePass_Shared_PlanarReflection_ProjectionWithExtraFOV[ResolvedView.StereoPassIndex]);

		uint EyeIndex = 0;
		if (TranslucentBasePass_Shared_PlanarReflection_bIsStereo)
		{
			EyeIndex = ResolvedView.StereoPassIndex;
		}

		float2 NDC = clamp(ClipVirtualReflectionSpherePosition.xy / ClipVirtualReflectionSpherePosition.w, -TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionScreenBound, TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionScreenBound);
		float2 ViewportUV = NDC * TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionScreenScaleBias[EyeIndex].xy + TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionScreenScaleBias[EyeIndex].zw;

		float4 PlanarReflectionTextureValue = Texture2DSampleLevel(
			TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionTexture,

			SharedClampSampler, 



			ViewportUV, 
			0);

		
		FinalFade *= PlanarReflectionTextureValue.a;
		OutPlanarReflection.rgb = PlanarReflectionTextureValue.rgb * RoughnessFade; 
		OutPlanarReflection.a = FinalFade;
	}

	return OutPlanarReflection;
}

#line 651 "/Engine/Private/BRDF.ush"
float2 EnvBRDFApproxLazarov(float Roughness, float NoV)
{
	
	
	const float4 c0 = { -1, -0.0275, -0.572, 0.022 };
	const float4 c1 = { 1, 0.0425, 1.04, -0.04 };
	float4 r = Roughness * c0 + c1;
	float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;
	float2 AB = float2(-1.04, 1.04) * a004 + r.zw;
	return AB;
}

#line 663 "/Engine/Private/BRDF.ush"
float3 EnvBRDFApprox( float3 SpecularColor, float Roughness, float NoV )
{
	float2 AB = EnvBRDFApproxLazarov(Roughness, NoV);

	
	
	float F90 = saturate( 50.0 * SpecularColor.g );

	return SpecularColor * AB.x + F90 * AB.y;
}

#line 674 "/Engine/Private/BRDF.ush"
float3 EnvBRDFApprox(float3 F0, float3 F90, float Roughness, float NoV)
{
	float2 AB = EnvBRDFApproxLazarov(Roughness, NoV);
	return F0 * AB.x + F90 * AB.y;
}

#line 689 "/Engine/Private/BRDF.ush"
void EnvBRDFApproxFullyRough(inout float3 DiffuseColor, inout float3 SpecularColor)
{
	
	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;
	
}

#line 696 "/Engine/Private/BRDF.ush"
void EnvBRDFApproxFullyRough(inout float3 DiffuseColor, inout float SpecularColor)
{
	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;
}

#line 701 "/Engine/Private/BRDF.ush"
void EnvBRDFApproxFullyRough(inout float3 DiffuseColor, inout float3 F0, inout float3 F90)
{
	DiffuseColor += F0 * 0.45;
	F0 = F90 = 0;
}

#line 78 "/Engine/Private/ColorSpace.ush"
float3 Luminance( float3 LinearColor, float3 LuminanceFactors )
{
	return dot( LinearColor, LuminanceFactors );
}

#line 46 "/Engine/Private/SSRT/SSRTRayCast.ush"
float GetStepScreenFactorToClipAtScreenEdge(float2 RayStartScreen, float2 RayStepScreen)
{
	
	const float RayStepScreenInvFactor = 0.5 * length(RayStepScreen);
	const float2 S = 1 - max(abs(RayStepScreen + RayStartScreen * RayStepScreenInvFactor) - RayStepScreenInvFactor, 0.0f) / abs(RayStepScreen);

	
	const float RayStepFactor = min(S.x, S.y) / RayStepScreenInvFactor;

	return RayStepFactor;
}

#line 60 "/Engine/Private/SSRT/SSRTRayCast.ush"
struct FSSRTRay
{
	float3 RayStartScreen;
	float3 RayStepScreen;

	float CompareTolerance;
};

#line 69 "/Engine/Private/SSRT/SSRTRayCast.ush"
FSSRTRay InitScreenSpaceRayFromWorldSpace(
	float3 RayOriginTranslatedWorld,
	float3 WorldRayDirection,
	float WorldTMax,
	float SceneDepth,
	float SlopeCompareToleranceScale,
	const bool bExtendRayToScreenBorder,
	out bool bRayWasClipped)
{
	WorldTMax = min(WorldTMax, 1000000);

	float3 ViewRayDirection = mul(float4(WorldRayDirection, 0.0), View_TranslatedWorldToView).xyz;

	float RayEndWorldDistance = ViewRayDirection.z < 0.0 ? min(-0.95 * SceneDepth / ViewRayDirection.z, WorldTMax) : WorldTMax;

	float3 RayEndWorld = RayOriginTranslatedWorld + WorldRayDirection * RayEndWorldDistance;

	float4 RayStartClip = mul(float4(RayOriginTranslatedWorld, 1.0), View_TranslatedWorldToClip);
	float4 RayEndClip = mul(float4(RayEndWorld, 1.0), View_TranslatedWorldToClip);

	float3 RayStartScreen = RayStartClip.xyz * rcp(RayStartClip.w);
	float3 RayEndScreen = RayEndClip.xyz * rcp(RayEndClip.w);

	float4 RayDepthClip = RayStartClip + mul(float4(0, 0, RayEndWorldDistance, 0), View_ViewToClip);
	float3 RayDepthScreen = RayDepthClip.xyz * rcp(RayDepthClip.w);

	FSSRTRay Ray;
	Ray.RayStartScreen = RayStartScreen;
	Ray.RayStepScreen = RayEndScreen - RayStartScreen;

	float ClipToScreenFactor = GetStepScreenFactorToClipAtScreenEdge(RayStartScreen.xy, Ray.RayStepScreen.xy);
	if (!bExtendRayToScreenBorder)
	{
		bRayWasClipped = ClipToScreenFactor < 1.0 || RayEndWorldDistance != WorldTMax;
		ClipToScreenFactor = min(ClipToScreenFactor, 1.0);
	}
	else
	{
		bRayWasClipped = true;
	}

	Ray.RayStepScreen *= ClipToScreenFactor;
	if (IsOrthoProjection())
	{
		Ray.CompareTolerance = max(0, (RayStartScreen.z - RayDepthScreen.z) * SlopeCompareToleranceScale);
	}
	else
	{
		Ray.CompareTolerance = max(abs(Ray.RayStepScreen.z), (RayStartScreen.z - RayDepthScreen.z) * SlopeCompareToleranceScale);
	}
	return Ray;
}

#line 170 "/Engine/Private/SSRT/SSRTRayCast.ush"
struct FSSRTTileInfos
{
	float Directionality[8];
	float ClosestDeviceZ;
	uint2 Coord;
	float _Padding[5];
};

#line 179 "/Engine/Private/SSRT/SSRTRayCast.ush"
struct FSSRTCastingSettings
{
	
	bool bStopWhenUncertain;

	
	bool bUseTileInfo;

	
	FSSRTTileInfos TileInfos;
};

#line 192 "/Engine/Private/SSRT/SSRTRayCast.ush"
FSSRTCastingSettings CreateDefaultCastSettings()
{
	FSSRTCastingSettings Settings;
	Settings.bUseTileInfo = false;
	Settings.bStopWhenUncertain = false;
	Settings.TileInfos = (FSSRTTileInfos)0;
	return Settings;
}

#line 201 "/Engine/Private/SSRT/SSRTRayCast.ush"
uint ComputeRayDirectionId(FSSRTRay Ray)
{
	float2 RayStepPixel = Ray.RayStepScreen.xy * View_ViewSizeAndInvSize.xy;

	
	RayStepPixel.y = -RayStepPixel.y;

	
	float RayDirection = atan2(-RayStepPixel.y, -RayStepPixel.x) + PI;

	uint DirectionId;

	[flatten]
	if (RayDirection < (0.5 * 2 * PI / 8) || RayDirection >(7.5 * 2 * PI / 8))
	{
		DirectionId = 0;
	}
	else if (RayDirection < (1.5 * 2 * PI / 8))
	{
		DirectionId = 1;
	}
	else if (RayDirection < (2.5 * 2 * PI / 8))
	{
		DirectionId = 2;
	}
	else if (RayDirection < (3.5 * 2 * PI / 8))
	{
		DirectionId = 3;
	}
	else if (RayDirection < (4.5 * 2 * PI / 8))
	{
		DirectionId = 4;
	}
	else if (RayDirection < (5.5 * 2 * PI / 8))
	{
		DirectionId = 5;
	}
	else if (RayDirection < (6.5 * 2 * PI / 8))
	{
		DirectionId = 6;
	}
	else
	{
		DirectionId = 7;
	}




	return DirectionId;
}

#line 254 "/Engine/Private/SSRT/SSRTRayCast.ush"
void CastScreenSpaceRay(
	Texture2D Texture, SamplerState Sampler,
	float StartMipLevel,
	FSSRTCastingSettings CastSettings,
	FSSRTRay Ray,
	float Roughness,
	uint NumSteps, float StepOffset,
	float4 HZBUvFactorAndInvFactor, 
	bool bDebugPrint,
	out float3 DebugOutput,
	out float3 OutHitUVz,
	out float Level,
	out bool bFoundHit,
	out bool bUncertain)
{
	DebugOutput = 0;

	const float3 RayStartScreen = Ray.RayStartScreen;
	const float3 RayStepScreen = Ray.RayStepScreen;

	float3 RayStartUVz = float3( (RayStartScreen.xy * float2( 0.5, -0.5 ) + 0.5) * HZBUvFactorAndInvFactor.xy, RayStartScreen.z );
	float3 RayStepUVz  = float3(  RayStepScreen.xy  * float2( 0.5, -0.5 )		 * HZBUvFactorAndInvFactor.xy, RayStepScreen.z );
	
	const float Step = 1.0 / NumSteps;
	float CompareTolerance = Ray.CompareTolerance * Step;
	
	float LastDiff = 0;
	Level = StartMipLevel;

	

	RayStepUVz *= Step;
	float3 RayUVz = RayStartUVz + RayStepUVz * StepOffset;
	


	
	





	
	float4 MultipleSampleDepthDiff;
	bool4 bMultipleSampleHit; 
	
	












	
	uint MaxIteration = NumSteps;
	if (CastSettings.bUseTileInfo)
	{
		uint DirectionId = ComputeRayDirectionId(Ray);

		float DirectionAndle = float(DirectionId) * (2 * PI * rcp(float(8)));

		float2 RayPixelDirection = float2(cos(DirectionAndle), sin(DirectionAndle));

		

		float2 cr = ScreenPosToViewportUV(RayStartScreen.xy) * View_ViewSizeAndInvSize.xy;
		float2 cre = ScreenPosToViewportUV(RayStartScreen.xy + RayStepScreen.xy) * View_ViewSizeAndInvSize.xy;

		
		float xr = dot(cr, RayPixelDirection) * View_ViewSizeAndInvSize.z;
		float xre = dot(cre, RayPixelDirection) * View_ViewSizeAndInvSize.z;
		float dr = RayStartScreen.z;
		float ar = RayStepScreen.z * View_ViewSizeAndInvSize.x / dot(RayStepScreen.xy * float2(0.5, -0.5) * View_ViewSizeAndInvSize.xy, RayPixelDirection);

		float2 cc = CastSettings.TileInfos.Coord * 8 + 8 / 2;
		float2 c0 = cc - sign(RayPixelDirection) * float(8 / 2);
		float2 c1 = cc + sign(RayPixelDirection) * float(8 / 2);
		float x0 = dot(c0, RayPixelDirection) * View_ViewSizeAndInvSize.z;
		float x1 = dot(c1, RayPixelDirection) * View_ViewSizeAndInvSize.z;

		
		float af = CastSettings.TileInfos.Directionality[DirectionId];
		float df = CastSettings.TileInfos.ClosestDeviceZ;
		float xf = af > 0.0 ? x0 : x1;

		
		uint UsefulMaxIteration;
		{
			float adiff = ar - af;

			
			[flatten]
			if (ar > af)
			{
				float x = (df - dr + xr * ar - xf * af) / adiff;

				
				float UseFulPercent = saturate((x - xr) / (xre - xr));

				UsefulMaxIteration = clamp(uint(NumSteps * UseFulPercent), 0, NumSteps);
			}
			else
			{
				UsefulMaxIteration = NumSteps;
			}
		}

		
		


			MaxIteration = UsefulMaxIteration;
		

		DebugOutput.x = float(MaxIteration) / float(NumSteps);
	}

	uint i;

	bFoundHit = false;
	bUncertain = false;

	[loop]
	for (i = 0; i < MaxIteration; i += 4)
	{
		float2 SamplesUV[4];
		float4 SamplesZ;
		float4 SamplesMip;

		
		
#line 414 "/Engine/Private/SSRT/SSRTRayCast.ush"

		{
			 [unroll( 4 )]
			for (uint j = 0; j < 4; j++)
			{
				SamplesUV[j] = RayUVz.xy + (float(i) + float(j + 1)) * RayStepUVz.xy;
				SamplesZ[j] = RayUVz.z + (float(i) + float(j + 1)) * RayStepUVz.z;
			}
		
			SamplesMip.xy = Level;
			Level += (8.0 / NumSteps) * Roughness;
		
			SamplesMip.zw = Level;
			Level += (8.0 / NumSteps) * Roughness;
		}
		

		
		float4 SampleDepth;
		{
			 [unroll( 4 )]
			for (uint j = 0; j < 4; j++)
			{
				







				SampleDepth[j] = Texture.SampleLevel(Sampler, SamplesUV[j], SamplesMip[j]).r;
			}
		}

		
		MultipleSampleDepthDiff = SamplesZ - SampleDepth;
		bMultipleSampleHit = abs(MultipleSampleDepthDiff + CompareTolerance) < CompareTolerance;

		
		{
			bool4 bMultipleSampleUncertain = (MultipleSampleDepthDiff + CompareTolerance) < -CompareTolerance;

			 [unroll( 4 )]
			for (uint j = 0; j < 4; j++)
			{
				bFoundHit = bFoundHit || bMultipleSampleHit[j];
				bool bLocalMultisampleUncertain = bMultipleSampleUncertain[i];
				bUncertain = bUncertain || (bLocalMultisampleUncertain && !bFoundHit);
			}
		}

		[branch]
		if (bFoundHit || (CastSettings.bStopWhenUncertain && bUncertain))
		{
			break;
		}

		LastDiff = MultipleSampleDepthDiff.w;

		
		
		
	} 
	
	
	[branch]
	if (bFoundHit)
    {
		
#line 542 "/Engine/Private/SSRT/SSRTRayCast.ush"

        {
            float DepthDiff0 = MultipleSampleDepthDiff[2];
            float DepthDiff1 = MultipleSampleDepthDiff[3];
            float Time0 = 3;

            [flatten]
            if (bMultipleSampleHit[2])
            {
                DepthDiff0 = MultipleSampleDepthDiff[1];
                DepthDiff1 = MultipleSampleDepthDiff[2];
                Time0 = 2;
            }
            [flatten]
            if (bMultipleSampleHit[1])
            {
                DepthDiff0 = MultipleSampleDepthDiff[0];
                DepthDiff1 = MultipleSampleDepthDiff[1];
                Time0 = 1;
            }
            [flatten]
            if (bMultipleSampleHit[0])
            {
                DepthDiff0 = LastDiff;
                DepthDiff1 = MultipleSampleDepthDiff[0];
                Time0 = 0;
            }

			Time0 += float(i);

            float Time1 = Time0 + 1;
			
#line 597 "/Engine/Private/SSRT/SSRTRayCast.ush"


			
            float TimeLerp = saturate(DepthDiff0 / (DepthDiff0 - DepthDiff1));
            float IntersectTime = Time0 + TimeLerp;
			
				
            OutHitUVz = RayUVz + RayStepUVz * IntersectTime;
        }
		
		
		





    }
	else
    {
		
        OutHitUVz = RayUVz + RayStepUVz * i;
    }

	OutHitUVz.xy *= HZBUvFactorAndInvFactor.zw;
	OutHitUVz.xy = OutHitUVz.xy * float2( 2, -2 ) + float2( -1, 1 );
	OutHitUVz.xy = OutHitUVz.xy * View_ScreenPositionScaleBias.xy + View_ScreenPositionScaleBias.wz;

}

#line 628 "/Engine/Private/SSRT/SSRTRayCast.ush"
bool RayCast(
	Texture2D Texture, SamplerState Sampler,
	float3 RayOriginTranslatedWorld, float3 RayDirection,
	float Roughness, float SceneDepth,
	uint NumSteps, float StepOffset,
	float4 HZBUvFactorAndInvFactor, 
	bool bDebugPrint,
	out float3 OutHitUVz,
	out float Level)
{
	


		float SlopeCompareToleranceScale = 4.0f;
	

	bool bRayWasClipped;
	FSSRTRay Ray = InitScreenSpaceRayFromWorldSpace(
		RayOriginTranslatedWorld, RayDirection,
		 SceneDepth,
		 SceneDepth,
		 SlopeCompareToleranceScale,
		 true,
		 bRayWasClipped);

	bool bHit;
	bool bUncertain;
	float3 DebugOutput;
	CastScreenSpaceRay(
		Texture, Sampler,
		 1.0,
		CreateDefaultCastSettings(),
		Ray,
		Roughness, NumSteps, StepOffset,
		HZBUvFactorAndInvFactor, bDebugPrint,
		 DebugOutput,
		 OutHitUVz,
		 Level,
		 bHit,
		 bUncertain);

	return bHit;
}

#line 672 "/Engine/Private/SSRT/SSRTRayCast.ush"
float ComputeHitVignetteFromScreenPos(float2 ScreenPos)
{
	float2 Vignette = saturate(abs(ScreenPos) * 5 - 4);
	
	
	
	return SafeSaturate(1.0 - dot(Vignette, Vignette));
}

#line 681 "/Engine/Private/SSRT/SSRTRayCast.ush"
void ReprojectHit(float4 PrevScreenPositionScaleBias, float3 HitUVz, out float2 OutPrevUV, out float OutVignette)
{
	
	float2 ThisScreen = (HitUVz.xy - View_ScreenPositionScaleBias.wz) / View_ScreenPositionScaleBias.xy;
	float4 ThisClip = float4( ThisScreen, HitUVz.z, 1 );
	float4 PrevClip = mul( ThisClip, View_ClipToPrevClip );
	float2 PrevScreen = PrevClip.xy / PrevClip.w;
	float2 PrevUV = PrevScreen.xy * PrevScreenPositionScaleBias.xy + PrevScreenPositionScaleBias.zw;

	OutVignette = min(ComputeHitVignetteFromScreenPos(ThisScreen), ComputeHitVignetteFromScreenPos(PrevScreen));
	OutPrevUV = PrevUV;
}

#line 694 "/Engine/Private/SSRT/SSRTRayCast.ush"
void ReprojectHit(float4 PrevScreenPositionScaleBias, Texture2D Texture, SamplerState Sampler, float3 HitUVz, out float2 OutPrevUV, out float OutVignette)
{
	
	float2 ThisScreen = (HitUVz.xy - View_ScreenPositionScaleBias.wz) / View_ScreenPositionScaleBias.xy;
	float4 ThisClip = float4( ThisScreen, HitUVz.z, 1 );
	float4 PrevClip = mul( ThisClip, View_ClipToPrevClip );
	float2 PrevScreen = PrevClip.xy / PrevClip.w;

	float4 EncodedVelocity = Texture.SampleLevel(Sampler, HitUVz.xy, 0);
	if( EncodedVelocity.x > 0.0 )
	{
		PrevScreen = ThisClip.xy - DecodeVelocityFromTexture(EncodedVelocity).xy;
	}

	float2 PrevUV = PrevScreen.xy * PrevScreenPositionScaleBias.xy + PrevScreenPositionScaleBias.zw;
	
	OutVignette = min(ComputeHitVignetteFromScreenPos(ThisScreen), ComputeHitVignetteFromScreenPos(PrevScreen));
	OutPrevUV = PrevUV;
}

#line 725 "/Engine/Private/SSRT/SSRTRayCast.ush"
float4 SampleScreenColor(Texture2D Texture, SamplerState Sampler, float2 UV)
{
	float4 OutColor;

	OutColor.rgb = Texture.SampleLevel( Sampler, UV, 0 ).rgb;
	
	OutColor.rgb = -min(-OutColor.rgb, 0.0);
	OutColor.a = 1;
	
	return OutColor;
}

#line 232 "/Engine/Private/HeightFogCommon.ush"
float4 CombineVolumetricFog(float4 GlobalFog, float3 VolumeUV, uint EyeIndex, float SceneDepth)
{
	float4 VolumetricFogLookup = float4(0, 0, 0, 1);


	float VolFogStartDistance = 0.0f;
	if (TranslucentBasePass_Shared_Fog_ApplyVolumetricFog > 0)
	{
	











		VolFogStartDistance = TranslucentBasePass_Shared_Fog_VolumetricFogStartDistance;
		VolumetricFogLookup = Texture3DSampleLevel(TranslucentBasePass_Shared_Fog_IntegratedLightScattering, View_SharedBilinearClampedSampler, VolumeUV, 0);
	

		
		VolumetricFogLookup.rgb *= View_OneOverPreExposure;
	}

	
	
	VolumetricFogLookup = lerp(float4(0, 0, 0, 1), VolumetricFogLookup, saturate((SceneDepth - VolFogStartDistance) * 100000000.0f));


	
	

	return float4(VolumetricFogLookup.rgb + GlobalFog.rgb * VolumetricFogLookup.a, VolumetricFogLookup.a * GlobalFog.a);
}

#line 271 "/Engine/Private/HeightFogCommon.ush"
float ComputeNormalizedZSliceFromDepth(float SceneDepth)
{
	return log2(SceneDepth * View_VolumetricFogGridZParams.x + View_VolumetricFogGridZParams.y) * View_VolumetricFogGridZParams.z * View_VolumetricFogInvGridSize.z;
}

#line 276 "/Engine/Private/HeightFogCommon.ush"
float3 ComputeVolumeUVFromNDC(float4 NDCPosition)
{
	NDCPosition.xy /= NDCPosition.w;
	float3 VolumeUV = float3(NDCPosition.xy * float2(.5f, -.5f) + .5f, ComputeNormalizedZSliceFromDepth(NDCPosition.w));
	return min(VolumeUV * float3(View_VolumetricFogScreenToResourceUV.xy, 1.0), float3(View_VolumetricFogUVMax, 1.0));
}

#line 287 "/Engine/Private/HeightFogCommon.ush"
float3 ComputeVolumeUV(FLWCVector3 WorldPosition, FLWCInverseMatrix WorldToClip)
{
	float4 NDCPosition = LWCMultiply(MakeLWCVector4(WorldPosition, 1.0f), WorldToClip);
	return ComputeVolumeUVFromNDC(NDCPosition);
}

#line 11 "/Engine/Private/ReflectionEnvironmentShared.ush"
float GetSkyLightCubemapBrightness()
{
	return View_SkyIrradianceEnvironmentMap[7].x; 
}

#line 22 "/Engine/Private/ReflectionEnvironmentShared.ush"
float ComputeReflectionCaptureMipFromRoughness(float Roughness, float CubemapMaxMip)
{
	
	
	
	float LevelFrom1x1 = 1 - 1.2 * log2(max(Roughness, 0.001));
	return CubemapMaxMip - 1 - LevelFrom1x1;
}

#line 39 "/Engine/Private/ReflectionEnvironmentShared.ush"
float3 GetSkyLightReflection(float3 ReflectionVector, float Roughness, out float OutSkyAverageBrightness)
{
	float AbsoluteSpecularMip = ComputeReflectionCaptureMipFromRoughness(Roughness, TranslucentBasePass_Shared_Reflection_SkyLightParameters.x);
	float3 Reflection = TextureCubeSampleLevel(TranslucentBasePass_Shared_Reflection_SkyLightCubemap, TranslucentBasePass_Shared_Reflection_SkyLightCubemapSampler, ReflectionVector, AbsoluteSpecularMip).rgb;

	OutSkyAverageBrightness = GetSkyLightCubemapBrightness() * Luminance(View_SkyLightColor.rgb);
	return Reflection * View_SkyLightColor.rgb;
}

#line 64 "/Engine/Private/ReflectionEnvironmentShared.ush"
bool ShouldSkyLightApplyPrecomputedBentNormalShadowing() {
	return View_SkyLightApplyPrecomputedBentNormalShadowingFlag != 0.0f;
}

#line 80 "/Engine/Private/ReflectionEnvironmentShared.ush"
float3 GetSkySHDiffuse(float3 Normal)
{
	float4 NormalVector = float4(Normal, 1.0f); 

	float3 Intermediate0, Intermediate1, Intermediate2;
	Intermediate0.x = dot(View_SkyIrradianceEnvironmentMap[0], NormalVector);
	Intermediate0.y = dot(View_SkyIrradianceEnvironmentMap[1], NormalVector);
	Intermediate0.z = dot(View_SkyIrradianceEnvironmentMap[2], NormalVector);

	float4 vB = NormalVector.xyzz * NormalVector.yzzx;
	Intermediate1.x = dot(View_SkyIrradianceEnvironmentMap[3], vB);
	Intermediate1.y = dot(View_SkyIrradianceEnvironmentMap[4], vB);
	Intermediate1.z = dot(View_SkyIrradianceEnvironmentMap[5], vB);

	float vC = NormalVector.x * NormalVector.x - NormalVector.y * NormalVector.y;
	Intermediate2 = View_SkyIrradianceEnvironmentMap[6].xyz * vC;

	
	return max(0, Intermediate0 + Intermediate1 + Intermediate2);
}

#line 132 "/Engine/Private/ReflectionEnvironmentShared.ush"
float3 GetLookupVectorForBoxCapture(float3 ReflectionVector, float3 WorldPosition, float4 BoxCapturePositionAndRadius, float4x4 RelativeWorldToBox, float4 BoxScales, float3 LocalCaptureOffset, out float DistanceAlpha)
{
	
	float3 LocalRayStart		= mul(float4(WorldPosition - BoxCapturePositionAndRadius.xyz, 1), RelativeWorldToBox).xyz;
	float3 LocalRayDirection	= mul(float4(ReflectionVector,  0), RelativeWorldToBox).xyz;

	float3 InvRayDir = rcp(LocalRayDirection);
	
	
	float3 FirstPlaneIntersections = -InvRayDir - LocalRayStart * InvRayDir;
	
	float3 SecondPlaneIntersections = InvRayDir - LocalRayStart * InvRayDir;
	
	float3 FurthestPlaneIntersections = max(FirstPlaneIntersections, SecondPlaneIntersections);

	
	float Intersection = min(FurthestPlaneIntersections.x, min(FurthestPlaneIntersections.y, FurthestPlaneIntersections.z));

	
	float3 IntersectPosition = WorldPosition + Intersection * ReflectionVector;
	float3 ProjectedCaptureVector = IntersectPosition - (BoxCapturePositionAndRadius.xyz + LocalCaptureOffset);

	
	
	
	float BoxDistance = ComputeDistanceFromBoxToPoint(-(BoxScales.xyz - .5f * BoxScales.w), BoxScales.xyz - .5f * BoxScales.w, LocalRayStart * BoxScales.xyz);

	
	DistanceAlpha = 1.0 - smoothstep(0, .7f * BoxScales.w, BoxDistance);

	return ProjectedCaptureVector;
}

#line 165 "/Engine/Private/ReflectionEnvironmentShared.ush"
float3 GetLookupVectorForSphereCapture(float3 ReflectionVector, float3 WorldPosition, float4 SphereCapturePositionAndRadius, float NormalizedDistanceToCapture, float3 LocalCaptureOffset, inout float DistanceAlpha)
{
	float3 ProjectedCaptureVector = ReflectionVector;
	float ProjectionSphereRadius = SphereCapturePositionAndRadius.w;
	float SphereRadiusSquared = ProjectionSphereRadius * ProjectionSphereRadius;

	float3 LocalPosition = WorldPosition - SphereCapturePositionAndRadius.xyz;
	float LocalPositionSqr = dot(LocalPosition, LocalPosition);

	
	float3 QuadraticCoef;
	QuadraticCoef.x = 1;
	QuadraticCoef.y = dot(ReflectionVector, LocalPosition);
	QuadraticCoef.z = LocalPositionSqr - SphereRadiusSquared;

	float Determinant = QuadraticCoef.y * QuadraticCoef.y - QuadraticCoef.z;

	
	[flatten]
	if (Determinant >= 0)
	{
		float FarIntersection = sqrt(Determinant) - QuadraticCoef.y;

		float3 LocalIntersectionPosition = LocalPosition + FarIntersection * ReflectionVector;
		ProjectedCaptureVector = LocalIntersectionPosition - LocalCaptureOffset;
		
		

		float x = saturate( 2.5 * NormalizedDistanceToCapture - 1.5 );
		DistanceAlpha = 1 - x*x*(3 - 2*x);
	}
	return ProjectedCaptureVector;
}

#line 199 "/Engine/Private/ReflectionEnvironmentShared.ush"
float ComputeMixingWeight(float IndirectIrradiance, float AverageBrightness, float Roughness)
{
	
	float MixingAlpha = smoothstep(0, 1, saturate(Roughness * View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight.x + View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight.y));

	
	
	
	
	float MixingWeight = IndirectIrradiance / max(AverageBrightness, .0001f);

	MixingWeight = min(MixingWeight, View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight.z);

	return lerp(1.0f, MixingWeight, MixingAlpha);
}

#line 97 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
float GetRadianceProbeTMin(uint ClipmapIndex)
{
	return TranslucentBasePass_RadianceProbeSettings[ClipmapIndex].x; 
}

#line 102 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
float GetWorldPositionToRadianceProbeCoordScale(uint ClipmapIndex)
{
	return TranslucentBasePass_RadianceProbeSettings[ClipmapIndex].y; 
}

#line 107 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
float GetRadianceProbeCoordToWorldPositionScale(uint ClipmapIndex)
{
	return TranslucentBasePass_RadianceProbeSettings[ClipmapIndex].z; 
}

#line 112 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
float3 GetWorldPositionToRadianceProbeCoordBias(uint ClipmapIndex)
{
	return TranslucentBasePass_PaddedWorldPositionToRadianceProbeCoordBias[ClipmapIndex].xyz; 
}

#line 117 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
float3 GetRadianceProbeCoordToWorldPositionBias(uint ClipmapIndex)
{
	return TranslucentBasePass_PaddedRadianceProbeCoordToWorldPositionBias[ClipmapIndex].xyz; 
}

#line 134 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
float3 GetProbeWorldPosition(uint3 ProbeCoord, uint ClipmapIndex, uint ProbeIndex)
{
	float3 ProbeWorldPosition = ProbeCoord * GetRadianceProbeCoordToWorldPositionScale(ClipmapIndex) + GetRadianceProbeCoordToWorldPositionBias(ClipmapIndex);
	return ProbeWorldPosition + TranslucentBasePass_ProbeWorldOffset[ProbeIndex].xyz;
}

#line 145 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
uint GetRadianceProbeClipmap(float3 WorldSpacePosition, float ClipmapDitherRandom)
{
	uint ClipmapIndex = 0;

	for (; ClipmapIndex < TranslucentBasePass_NumRadianceProbeClipmaps; ++ClipmapIndex)
	{
		float3 ProbeCoordFloat = WorldSpacePosition * GetWorldPositionToRadianceProbeCoordScale(ClipmapIndex) + GetWorldPositionToRadianceProbeCoordBias(ClipmapIndex);
		float3 BottomEdgeFades = saturate((ProbeCoordFloat - .5f) * TranslucentBasePass_InvClipmapFadeSize);
		float3 TopEdgeFades = saturate(((float3)TranslucentBasePass_RadianceProbeClipmapResolution - .5f - ProbeCoordFloat) * TranslucentBasePass_InvClipmapFadeSize);
		float EdgeFade = min(min3(BottomEdgeFades.x, BottomEdgeFades.y, BottomEdgeFades.z), min3(TopEdgeFades.x, TopEdgeFades.y, TopEdgeFades.z));

		if (EdgeFade > ClipmapDitherRandom)
		{
			return ClipmapIndex;
		}
	}

	return TranslucentBasePass_NumRadianceProbeClipmaps;
}

#line 165 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
struct FRadianceCacheCoverage
{
	uint ClipmapIndex;

	
	float MinTraceDistanceBeforeInterpolation;

	
	bool bValid;
};

#line 176 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
FRadianceCacheCoverage InitRadianceCacheCoverage()
{
	FRadianceCacheCoverage Out;
	Out.ClipmapIndex = 0;
	Out.MinTraceDistanceBeforeInterpolation = 10000000.0f;
	Out.bValid = false;
	return Out;
}

#line 188 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
FRadianceCacheCoverage GetRadianceCacheCoverage(float3 RayOrigin, float3 RayDirection, float ClipmapDitherRandom)
{
	FRadianceCacheCoverage Coverage = InitRadianceCacheCoverage();

	Coverage.ClipmapIndex = GetRadianceProbeClipmap(RayOrigin, ClipmapDitherRandom);

	if (Coverage.ClipmapIndex < TranslucentBasePass_NumRadianceProbeClipmaps)
	{
		Coverage.bValid = true;

		float CellOcclusionDistance = GetRadianceProbeCoordToWorldPositionScale(Coverage.ClipmapIndex) * sqrt(3.0f);
		Coverage.MinTraceDistanceBeforeInterpolation = GetRadianceProbeTMin(Coverage.ClipmapIndex) + CellOcclusionDistance;
	}

	return Coverage;
}

#line 205 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
float3 SampleRadianceCacheProbe(uint ProbeIndex, float3 WorldSpaceDirection, float MipLevel)
{
	float2 ProbeUV = InverseEquiAreaSphericalMapping(WorldSpaceDirection);








	uint2 ProbeAtlasCoord = TranslucentBasePass_FinalProbeResolution * uint2(ProbeIndex & TranslucentBasePass_ProbeAtlasResolutionModuloMask, ProbeIndex >> TranslucentBasePass_ProbeAtlasResolutionDivideShift);
	float2 ProbeTexelCoord = ProbeUV * TranslucentBasePass_RadianceProbeResolution + (1u << TranslucentBasePass_FinalRadianceAtlasMaxMip);
	float2 ProbeAtlasUV = (ProbeAtlasCoord + ProbeTexelCoord) * TranslucentBasePass_InvProbeFinalRadianceAtlasResolution;

	float3 UnmappedDebugColor = 0.0f;
	
	
	return ProbeIndex == 0xFFFFFFFF ? UnmappedDebugColor : TranslucentBasePass_RadianceCacheFinalRadianceAtlas.SampleLevel( View_SharedBilinearClampedSampler, ProbeAtlasUV, MipLevel);

}

#line 227 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
uint GetProbeIndexFromIndirectionTexture(uint3 ProbeCoord, uint ClipmapIndex)
{
	uint3 ProbeIndirectionTextureCoord = uint3(ProbeCoord.x + ClipmapIndex * TranslucentBasePass_RadianceProbeClipmapResolution, ProbeCoord.yz);
	return TranslucentBasePass_RadianceProbeIndirectionTexture.Load(uint4(ProbeIndirectionTextureCoord, 0));
}

#line 233 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
float3 SampleRadianceCacheProbeWithParallaxCorrection(uint3 ProbeCoord, uint ProbeClipmapIndex, float3 WorldSpacePosition, float3 WorldSpaceDirection, float MipLevel)
{
	float ProbeTMin = GetRadianceProbeTMin(ProbeClipmapIndex);
	uint ProbeIndex = GetProbeIndexFromIndirectionTexture(ProbeCoord, ProbeClipmapIndex);
	float3 ProbeWorldPosition = GetProbeWorldPosition(ProbeCoord, ProbeClipmapIndex, ProbeIndex);

	float3 ReprojectedDirection = WorldSpaceDirection;
	float CorrectionFactor = 1.0f;






	float ReprojectionRadius = TranslucentBasePass_ReprojectionRadiusScale * ProbeTMin;
	float T = RayIntersectSphere(WorldSpacePosition, WorldSpaceDirection, float4(ProbeWorldPosition, ReprojectionRadius)).y;
	float3 IntersectionPosition = WorldSpacePosition + WorldSpaceDirection * T;
	ReprojectedDirection = IntersectionPosition - ProbeWorldPosition;
	
	
	CorrectionFactor = T * T / (ReprojectionRadius * dot(ReprojectedDirection, WorldSpaceDirection));

	
	
#line 271 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"


#line 298 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"


	return SampleRadianceCacheProbe(ProbeIndex, ReprojectedDirection, MipLevel) * CorrectionFactor;
}

#line 303 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
float3 SampleRadianceCacheInterpolated(FRadianceCacheCoverage Coverage, float3 WorldSpacePosition, float3 WorldSpaceDirection, float ConeHalfAngle)
{
	








	float3 ProbeCoordFloat = WorldSpacePosition * GetWorldPositionToRadianceProbeCoordScale(Coverage.ClipmapIndex) + GetWorldPositionToRadianceProbeCoordBias(Coverage.ClipmapIndex);

	
	float NumTexels = sqrt(1.0f - cos(ConeHalfAngle)) * TranslucentBasePass_RadianceProbeResolution;
	float MipLevel = clamp(log2(NumTexels), 0, (float)TranslucentBasePass_FinalRadianceAtlasMaxMip);

	float3 CornerProbeCoordFloat = ProbeCoordFloat - 0.5f;
	int3 CornerProbeCoord = floor(CornerProbeCoordFloat);
	float3 LerpAlphas = frac(CornerProbeCoordFloat);

	float3 Lighting000 = SampleRadianceCacheProbeWithParallaxCorrection(CornerProbeCoord + int3(0, 0, 0), Coverage.ClipmapIndex, WorldSpacePosition, WorldSpaceDirection, MipLevel);
	float3 Lighting001 = SampleRadianceCacheProbeWithParallaxCorrection(CornerProbeCoord + int3(0, 0, 1), Coverage.ClipmapIndex, WorldSpacePosition, WorldSpaceDirection, MipLevel);
	float3 Lighting010 = SampleRadianceCacheProbeWithParallaxCorrection(CornerProbeCoord + int3(0, 1, 0), Coverage.ClipmapIndex, WorldSpacePosition, WorldSpaceDirection, MipLevel);
	float3 Lighting011 = SampleRadianceCacheProbeWithParallaxCorrection(CornerProbeCoord + int3(0, 1, 1), Coverage.ClipmapIndex, WorldSpacePosition, WorldSpaceDirection, MipLevel);
	float3 Lighting100 = SampleRadianceCacheProbeWithParallaxCorrection(CornerProbeCoord + int3(1, 0, 0), Coverage.ClipmapIndex, WorldSpacePosition, WorldSpaceDirection, MipLevel);
	float3 Lighting101 = SampleRadianceCacheProbeWithParallaxCorrection(CornerProbeCoord + int3(1, 0, 1), Coverage.ClipmapIndex, WorldSpacePosition, WorldSpaceDirection, MipLevel);
	float3 Lighting110 = SampleRadianceCacheProbeWithParallaxCorrection(CornerProbeCoord + int3(1, 1, 0), Coverage.ClipmapIndex, WorldSpacePosition, WorldSpaceDirection, MipLevel);
	float3 Lighting111 = SampleRadianceCacheProbeWithParallaxCorrection(CornerProbeCoord + int3(1, 1, 1), Coverage.ClipmapIndex, WorldSpacePosition, WorldSpaceDirection, MipLevel);

	float3 ZLerp00 = lerp(Lighting000, Lighting001, LerpAlphas.z);
	float3 ZLerp01 = lerp(Lighting010, Lighting011, LerpAlphas.z);
	float3 ZLerp10 = lerp(Lighting100, Lighting101, LerpAlphas.z);
	float3 ZLerp11 = lerp(Lighting110, Lighting111, LerpAlphas.z);

	float3 YLerp0 = lerp(ZLerp00, ZLerp01, LerpAlphas.y);
	float3 YLerp1 = lerp(ZLerp10, ZLerp11, LerpAlphas.y);

	return lerp(YLerp0, YLerp1, LerpAlphas.x);
}

#line 14 "/Engine/Private/Lumen/LumenTranslucencyVolumeShared.ush"
bool IsLumenTranslucencyGIEnabled()
{
	return TranslucentBasePass_TranslucencyGIGridSize.z > 0;
}

#line 19 "/Engine/Private/Lumen/LumenTranslucencyVolumeShared.ush"
float3 ComputeTranslucencyGIVolumeUV(FLWCVector3 WorldPosition, FLWCInverseMatrix WorldToClip) 
{
	float4 NDCPosition = LWCMultiply(MakeLWCVector4(WorldPosition, 1.0f), WorldToClip);
	NDCPosition.xy /= NDCPosition.w;
	float NormalizedZSlice = log2(NDCPosition.w * TranslucentBasePass_TranslucencyGIGridZParams.x + TranslucentBasePass_TranslucencyGIGridZParams.y) * TranslucentBasePass_TranslucencyGIGridZParams.z / (float)TranslucentBasePass_TranslucencyGIGridSize.z;
	return float3(NDCPosition.xy * float2(.5f, -.5f) + .5f, NormalizedZSlice);
}

#line 27 "/Engine/Private/Lumen/LumenTranslucencyVolumeShared.ush"
FTwoBandSHVectorRGB GetTranslucencyGIVolumeLighting(FLWCVector3 WorldPosition, FLWCInverseMatrix WorldToClip, bool bTemporalFiltered)
{
	float3 VolumeUV = ComputeTranslucencyGIVolumeUV(WorldPosition, WorldToClip);

	float3 AmbientLightingVector;
	float3 DirectionalLightingVector;
	
	if (bTemporalFiltered)
	{
		AmbientLightingVector = Texture3DSampleLevel(TranslucentBasePass_TranslucencyGIVolumeHistory0, TranslucentBasePass_TranslucencyGIVolumeSampler, VolumeUV, 0).xyz;
		DirectionalLightingVector = Texture3DSampleLevel(TranslucentBasePass_TranslucencyGIVolumeHistory1, TranslucentBasePass_TranslucencyGIVolumeSampler, VolumeUV, 0).xyz;
	}
	else
	{
		AmbientLightingVector = Texture3DSampleLevel(TranslucentBasePass_TranslucencyGIVolume0, TranslucentBasePass_TranslucencyGIVolumeSampler, VolumeUV, 0).xyz;
		DirectionalLightingVector = Texture3DSampleLevel(TranslucentBasePass_TranslucencyGIVolume1, TranslucentBasePass_TranslucencyGIVolumeSampler, VolumeUV, 0).xyz;
	}

	
	FTwoBandSHVectorRGB TranslucentLighting;
	TranslucentLighting.R.V.x = AmbientLightingVector.r;
	TranslucentLighting.G.V.x = AmbientLightingVector.g;
	TranslucentLighting.B.V.x = AmbientLightingVector.b;
	float3 NormalizedAmbientColor = AmbientLightingVector.rgb / ( Luminance( AmbientLightingVector.rgb ) + 0.00001f );

	
	TranslucentLighting.R.V.yzw = DirectionalLightingVector.rgb * NormalizedAmbientColor.r;
	TranslucentLighting.G.V.yzw = DirectionalLightingVector.rgb * NormalizedAmbientColor.g;
	TranslucentLighting.B.V.yzw = DirectionalLightingVector.rgb * NormalizedAmbientColor.b;
	return TranslucentLighting;
}

#line 59 "/Engine/Private/Lumen/LumenTranslucencyVolumeShared.ush"
bool UseFrontLayerReflection(float2 BufferUV, float SceneDepth)
{
	bool bValid = false;

	
	if (TranslucentBasePass_Enabled > 0)
	{
		float SingleLayerDeviceZ = Texture2DSampleLevel(TranslucentBasePass_SceneDepth,  View_SharedPointClampedSampler, BufferUV, 0.0f).x;
		float DeviceZ = ConvertToDeviceZ(SceneDepth);
		
		if (abs(SingleLayerDeviceZ - DeviceZ) < TranslucentBasePass_RelativeDepthThreshold)
		{
			bValid = true;
		}
	}
	

	return bValid;
}

#line 79 "/Engine/Private/Lumen/LumenTranslucencyVolumeShared.ush"
float3 SampleFrontLayerReflection(float2 BufferUV)
{
	const float3 Radiance = Texture2DSampleLevel(TranslucentBasePass_Radiance,  View_SharedPointClampedSampler, BufferUV, 0.0f).xyz * View_OneOverPreExposure;
	
	
	return (pow(Radiance * (1.f / 0.18f), TranslucentBasePass_Contrast) * 0.18f) * TranslucentBasePass_SpecularScale;
}

#line 12 "/Engine/Private/ShadingModelsMaterial.ush"
void SetGBufferForShadingModel(
	in out FGBufferData GBuffer, 
	in out FMaterialPixelParameters MaterialParameters,
	const float Opacity,
	const float3 BaseColor,
	const float  Metallic,
	const float  Specular,
	const float Roughness,
	const float Anisotropy,
	const float3 SubsurfaceColor,
	const float SubsurfaceProfile,
	const float Dither,
	const uint ShadingModel)
{
	GBuffer.WorldNormal = MaterialParameters.WorldNormal;
	GBuffer.WorldTangent = MaterialParameters.WorldTangent;
	GBuffer.BaseColor = BaseColor;
	GBuffer.Metallic = Metallic;
	GBuffer.Specular = Specular;
	GBuffer.Roughness = Roughness;
	GBuffer.Anisotropy = Anisotropy;
	GBuffer.ShadingModelID = ShadingModel;

	
	
	
	if (false)
	{
	}














#line  84 "/Engine/Private/ShadingModelsMaterial.ush"

#line 118 "/Engine/Private/ShadingModelsMaterial.ush"























#line 203 "/Engine/Private/ShadingModelsMaterial.ush"

}

#line 25 "/Engine/Private/LightGridCommon.ush"
uint GetCulledLightDataGrid(uint GridIndex)
{

	return TranslucentBasePass_Shared_Forward_CulledLightDataGrid16Bit[GridIndex];



}

#line 45 "/Engine/Private/LightGridCommon.ush"
struct FLightGridData
{
	uint LightGridPixelSizeShift;
	float3 LightGridZParams;
	int3 CulledGridSize;
};

#line 52 "/Engine/Private/LightGridCommon.ush"
FLightGridData GetLightGridData(uint EyeIndex)
{
	FLightGridData Result;







		Result.LightGridPixelSizeShift = TranslucentBasePass_Shared_Forward_LightGridPixelSizeShift;
		Result.LightGridZParams = TranslucentBasePass_Shared_Forward_LightGridZParams;
		Result.CulledGridSize = TranslucentBasePass_Shared_Forward_CulledGridSize;











	return Result;
}

#line 79 "/Engine/Private/LightGridCommon.ush"
uint3 ComputeLightGridCellCoordinate(uint2 PixelPos, float SceneDepth, uint EyeIndex)
{
	const FLightGridData GridData = GetLightGridData(EyeIndex);
	uint ZSlice = (uint)(max(0, log2(SceneDepth * GridData.LightGridZParams.x + GridData.LightGridZParams.y) * GridData.LightGridZParams.z));
	ZSlice = min(ZSlice, (uint)(GridData.CulledGridSize.z - 1));
	return uint3(PixelPos >> GridData.LightGridPixelSizeShift, ZSlice);
}

#line 87 "/Engine/Private/LightGridCommon.ush"
uint ComputeLightGridCellIndex(uint3 GridCoordinate, uint EyeIndex)
{
	const FLightGridData GridData = GetLightGridData(EyeIndex);
	return (GridCoordinate.z * GridData.CulledGridSize.y + GridCoordinate.y) * GridData.CulledGridSize.x + GridCoordinate.x;
}

#line 93 "/Engine/Private/LightGridCommon.ush"
uint ComputeLightGridCellIndex(uint2 PixelPos, float SceneDepth, uint EyeIndex)
{
	return ComputeLightGridCellIndex(ComputeLightGridCellCoordinate(PixelPos, SceneDepth, EyeIndex), EyeIndex);
}

#line 98 "/Engine/Private/LightGridCommon.ush"
uint ComputeLightGridCellIndex(uint2 PixelPos, float SceneDepth)
{
	return ComputeLightGridCellIndex(PixelPos, SceneDepth, 0);
}

#line 12 "/Engine/Private/ReflectionEnvironmentComposite.ush"
float3 CompositeReflectionCapturesAndSkylightTWS(
	float CompositeAlpha, 
	float3 TranslatedWorldPosition, 
	float3 RayDirection, 
	float Roughness, 
	float IndirectIrradiance, 
	float IndirectSpecularOcclusion,
	float3 ExtraIndirectSpecular,
	uint NumCapturesAffectingTile,
	uint CaptureDataStartIndex, 
	int SingleCaptureIndex,
	bool bCompositeSkylight,
	uint EyeIndex)
{
	float Mip = ComputeReflectionCaptureMipFromRoughness(Roughness, View_ReflectionCubemapMaxMip);
	float4 ImageBasedReflections = float4(0, 0, 0, CompositeAlpha);
	float2 CompositedAverageBrightness = float2(0.0f, 1.0f);


	
	[loop]
	for (uint TileCaptureIndex = 0; TileCaptureIndex < NumCapturesAffectingTile; TileCaptureIndex++) 
	{
		[branch]
		if (ImageBasedReflections.a < 0.001)
		{
			break;
		}

		uint CaptureIndex = 0;



	




	
			CaptureIndex = GetCulledLightDataGrid(CaptureDataStartIndex + TileCaptureIndex);
	
	








		FLWCVector3 CaptureWorldPosition = MakeLWCVector3( ReflectionCaptureSM5_TilePosition[ CaptureIndex ].xyz,  ReflectionCaptureSM5_PositionAndRadius[ CaptureIndex ].xyz);
		float3 CaptureTranslatedWorldPosition = LWCToFloat(LWCAdd(CaptureWorldPosition, ResolvedView.PreViewTranslation));
		float CaptureRadius =  ReflectionCaptureSM5_PositionAndRadius[ CaptureIndex ].w;

		float4 CaptureProperties =  ReflectionCaptureSM5_CaptureProperties[ CaptureIndex ];

		float3 CaptureVector = TranslatedWorldPosition - CaptureTranslatedWorldPosition;
		float CaptureVectorLength = sqrt(dot(CaptureVector, CaptureVector));		
		float NormalizedDistanceToCapture = saturate(CaptureVectorLength / CaptureRadius);

		[branch]
		if (CaptureVectorLength < CaptureRadius)
		{
			float3 ProjectedCaptureVector = RayDirection;
			float4 CaptureOffsetAndAverageBrightness =  ReflectionCaptureSM5_CaptureOffsetAndAverageBrightness[ CaptureIndex ];

			
			float DistanceAlpha = 0;
			
			
			
				
					
					
					[branch] if (CaptureProperties.b > 0)
					
					{
						ProjectedCaptureVector = GetLookupVectorForBoxCapture(RayDirection, TranslatedWorldPosition, float4(CaptureTranslatedWorldPosition, CaptureRadius),
																			  ReflectionCaptureSM5_BoxTransform[ CaptureIndex ],  ReflectionCaptureSM5_BoxScales[ CaptureIndex ], CaptureOffsetAndAverageBrightness.xyz, DistanceAlpha);
					}
				

				
					
					
					else
					
					{
						ProjectedCaptureVector = GetLookupVectorForSphereCapture(RayDirection, TranslatedWorldPosition, float4(CaptureTranslatedWorldPosition, CaptureRadius), NormalizedDistanceToCapture, CaptureOffsetAndAverageBrightness.xyz, DistanceAlpha);
					}
				
			



			float CaptureArrayIndex = CaptureProperties.g;

			{
				float4 Sample = TranslucentBasePass_Shared_Reflection_ReflectionCubemap.SampleLevel(TranslucentBasePass_Shared_Reflection_ReflectionCubemapSampler, float4(ProjectedCaptureVector, CaptureArrayIndex), Mip);

				Sample.rgb *= CaptureProperties.r;
				Sample *= DistanceAlpha;

				
				ImageBasedReflections.rgb += Sample.rgb * ImageBasedReflections.a * IndirectSpecularOcclusion;
				ImageBasedReflections.a *= 1 - Sample.a;

				float AverageBrightness = CaptureOffsetAndAverageBrightness.w;
				CompositedAverageBrightness.x += AverageBrightness * DistanceAlpha * CompositedAverageBrightness.y;
				CompositedAverageBrightness.y *= 1 - DistanceAlpha;
			}
		}
	}

#line 161 "/Engine/Private/ReflectionEnvironmentComposite.ush"


	
	ImageBasedReflections.rgb *= View_PrecomputedIndirectSpecularColorScale;
	CompositedAverageBrightness.x *= Luminance( View_PrecomputedIndirectSpecularColorScale );



	[branch]  
	if (TranslucentBasePass_Shared_Reflection_SkyLightParameters.y > 0 && bCompositeSkylight)
	{
		float SkyAverageBrightness = 1.0f;

		


			float3 SkyLighting = GetSkyLightReflection(RayDirection, Roughness, SkyAverageBrightness);
		

		
		bool bNormalize = TranslucentBasePass_Shared_Reflection_SkyLightParameters.z < 1 && 1;

		[flatten]
		if (bNormalize)
		{
			ImageBasedReflections.rgb += ImageBasedReflections.a * SkyLighting * IndirectSpecularOcclusion;
			CompositedAverageBrightness.x += SkyAverageBrightness * CompositedAverageBrightness.y;
		}
		else
		{
			ExtraIndirectSpecular += SkyLighting * IndirectSpecularOcclusion;
		}
	}



	ImageBasedReflections.rgb *= ComputeMixingWeight(IndirectIrradiance, CompositedAverageBrightness.x, Roughness);


	ImageBasedReflections.rgb += ImageBasedReflections.a * ExtraIndirectSpecular;

	return ImageBasedReflections.rgb;
}

#line 205 "/Engine/Private/ReflectionEnvironmentComposite.ush"
float3 CompositeReflectionCapturesAndSkylightTWS(
	float CompositeAlpha, 
	float3 TranslatedWorldPosition, 
	float3 RayDirection, 
	float Roughness, 
	float IndirectIrradiance, 
	float IndirectSpecularOcclusion,
	float3 ExtraIndirectSpecular,
	uint NumCapturesAffectingTile,
	uint CaptureDataStartIndex,
	int SingleCaptureIndex,
	bool bCompositeSkylight)
{
	return CompositeReflectionCapturesAndSkylightTWS(
		CompositeAlpha, 
		TranslatedWorldPosition, 
		RayDirection, 
		Roughness, 
		IndirectIrradiance, 
		IndirectSpecularOcclusion, 
		ExtraIndirectSpecular, 
		NumCapturesAffectingTile, 
		CaptureDataStartIndex,
		SingleCaptureIndex,
		bCompositeSkylight,
		0);
}

#line 395 "/Engine/Private/ForwardLightingCommon.ush"
float3 GetImageBasedReflectionSpecular(FMaterialPixelParameters MaterialParameters, float3 RayDirection, float Roughness, float IndirectIrradiance, uint GridIndex, int SingleCaptureIndex, uint EyeIndex)
{
	float3 SpecularIBL;
	bool bUseLumenFrontLayerReflection = false;


	
	bUseLumenFrontLayerReflection = UseFrontLayerReflection(MaterialParameters.ViewBufferUV, MaterialParameters.ScreenPosition.w);

	FRadianceCacheCoverage LumenRadianceCacheCoverage = InitRadianceCacheCoverage();
	LumenRadianceCacheCoverage.bValid = false;

	
	if (TranslucentBasePass_FinalProbeResolution > 0 && !bUseLumenFrontLayerReflection)
	{
		float ClipmapDitherRandom = InterleavedGradientNoise(MaterialParameters.SvPosition.xy, View_StateFrameIndexMod8);
		LumenRadianceCacheCoverage = GetRadianceCacheCoverage( LWCToFloat( MaterialParameters.AbsoluteWorldPosition ), RayDirection, ClipmapDitherRandom);
	}

	if (bUseLumenFrontLayerReflection)
	{
		SpecularIBL = SampleFrontLayerReflection(MaterialParameters.ViewBufferUV);
	}
	else if (LumenRadianceCacheCoverage.bValid)
	{
		float ConeHalfAngle = 0;
		SpecularIBL = SampleRadianceCacheInterpolated(LumenRadianceCacheCoverage,  LWCToFloat( MaterialParameters.AbsoluteWorldPosition ), RayDirection, ConeHalfAngle);
	}
	
	else

	{
		uint NumLocalReflectionCaptures = 0;
		uint DataStartIndex = 0;


		





				uint NumCulledEntryIndex = (TranslucentBasePass_Shared_Forward_NumGridCells + GridIndex) * 2;
				NumLocalReflectionCaptures = min(TranslucentBasePass_Shared_Forward_NumCulledLightsGrid[NumCulledEntryIndex + 0], TranslucentBasePass_Shared_Forward_NumReflectionCaptures);
				DataStartIndex = TranslucentBasePass_Shared_Forward_NumCulledLightsGrid[NumCulledEntryIndex + 1];

		










		const bool bCompositeSkylight = true;
		SpecularIBL = CompositeReflectionCapturesAndSkylightTWS(
			1.0f, 
			MaterialParameters.WorldPosition_CamRelative, 
			RayDirection, 
			Roughness, 
			IndirectIrradiance, 
			1.0f, 
			0.0f, 
			NumLocalReflectionCaptures, 
			DataStartIndex, 
			SingleCaptureIndex,
			bCompositeSkylight,
			EyeIndex);
	}


	if( View_CameraCut == 0 && TranslucentBasePass_SSRQuality > 0 && !bUseLumenFrontLayerReflection)
	{
		float StepOffset = InterleavedGradientNoise( MaterialParameters.SvPosition.xy, View_StateFrameIndexMod8 );
		StepOffset -= 0.5;

		bool bDebugPrint = false;

		float3 HitUVz;
		float Level = 0;

		bool bHit = RayCast(
			TranslucentBasePass_HZBTexture, TranslucentBasePass_HZBSampler,
			MaterialParameters.WorldPosition_CamRelative, RayDirection, Roughness, MaterialParameters.ScreenPosition.w,
			12, StepOffset,
			TranslucentBasePass_HZBUvFactorAndInvFactor,
			bDebugPrint,
			HitUVz,
			Level
		);

		[branch] if( bHit )
		{
			float2 SampleUV;
			float Vignette;
			ReprojectHit(TranslucentBasePass_PrevScreenPositionScaleBias, HitUVz, SampleUV, Vignette);

			SampleUV = clamp(SampleUV, TranslucentBasePass_PrevSceneColorBilinearUVMin, TranslucentBasePass_PrevSceneColorBilinearUVMax);

			float4 SSR = SampleScreenColor( 
				TranslucentBasePass_PrevSceneColor, 
				TranslucentBasePass_PrevSceneColorSampler,  
				SampleUV);

			SSR *= Vignette * saturate( 2 - 6.6 * Roughness );

			SSR.rgb *= TranslucentBasePass_PrevSceneColorPreExposureInv;
			SpecularIBL.rgb = SpecularIBL.rgb * (1 - SSR.a) + SSR.rgb;
		}
	}


	float3 SpecularLighting = SpecularIBL.rgb;

	

	
	[branch]
	if (abs(dot(TranslucentBasePass_Shared_PlanarReflection_ReflectionPlane.xyz, 1)) > .0001f)
	{
		
		float4 PlanarReflection = ComputePlanarReflections(MaterialParameters.WorldPosition_CamRelative, MaterialParameters.WorldNormal, Roughness, TranslucentBasePass_Shared_Reflection_ReflectionCubemapSampler);
		
		SpecularLighting = PlanarReflection.rgb + (1 - PlanarReflection.a) * SpecularLighting;
	}


	return SpecularLighting;
}

#line 528 "/Engine/Private/ForwardLightingCommon.ush"
float3 GetImageBasedReflectionLighting(FMaterialPixelParameters MaterialParameters, float Roughness, float3 SpecularColor, float IndirectIrradiance, uint GridIndex, int SingleCaptureIndex, uint EyeIndex)
{
	float3 N = MaterialParameters.WorldNormal;
	float3 V = MaterialParameters.CameraVector;

	float3 RayDirection = 2 * dot(V, N) * N - V;
	float NoV = saturate(dot(N, V));

	const float3 SpecularLighting = GetImageBasedReflectionSpecular(MaterialParameters, RayDirection, Roughness, IndirectIrradiance, GridIndex, SingleCaptureIndex, EyeIndex);
		



	SpecularColor = EnvBRDFApprox(SpecularColor, Roughness, NoV);

	return SpecularLighting * SpecularColor;
}

#line 546 "/Engine/Private/ForwardLightingCommon.ush"
float3 GetImageBasedReflectionLighting(FMaterialPixelParameters MaterialParameters, float Roughness, float3 SpecularColor, float IndirectIrradiance, uint GridIndex, int SingleCaptureIndex)
{
	return GetImageBasedReflectionLighting(MaterialParameters, Roughness, SpecularColor, IndirectIrradiance, GridIndex, SingleCaptureIndex, 0);
}

#line 201 "/Engine/Private/BasePassPixelShader.usf"
float3 GetTranslucencyVolumeLighting(
	FMaterialPixelParameters MaterialParameters, 
	FPixelMaterialInputs PixelMaterialInputs,
	FSharedBasePassInterpolants BasePassInterpolants, 
	FGBufferData GBuffer, 
	float IndirectIrradiance)
{
	float4 VolumeLighting;
	float3 InterpolatedLighting = 0;

	float3 InnerVolumeUVs;
	float3 OuterVolumeUVs;
	float FinalLerpFactor;
	ComputeVolumeUVs(MaterialParameters.WorldPosition_CamRelative, MaterialParameters.LightingPositionOffset, InnerVolumeUVs, OuterVolumeUVs, FinalLerpFactor);

	








	
		float4 AmbientLightingVector = GetAmbientLightingVectorFromTranslucentLightingVolume(InnerVolumeUVs, OuterVolumeUVs, FinalLerpFactor);
		float3 DirectionalLightingVector = GetDirectionalLightingVectorFromTranslucentLightingVolume(InnerVolumeUVs, OuterVolumeUVs, FinalLerpFactor);
		GetVolumeLightingDirectional(AmbientLightingVector, DirectionalLightingVector, MaterialParameters.WorldNormal, GBuffer.DiffuseColor, GetMaterialTranslucencyDirectionalLightingIntensity(), InterpolatedLighting, VolumeLighting);

	






	
#line 297 "/Engine/Private/BasePassPixelShader.usf"


	return InterpolatedLighting;
}

#line 305 "/Engine/Private/BasePassPixelShader.usf"
void GetSkyLighting(FMaterialPixelParameters MaterialParameters, float LightmapVTPageTableResult, bool bEvaluateBackface, float3 WorldNormal, float2 LightmapUV, uint LightmapDataIndex, float3 SkyOcclusionUV3D, out float3 OutDiffuseLighting, out float3 OutSubsurfaceLighting)
{
	OutDiffuseLighting = 0;
	OutSubsurfaceLighting = 0;


	if (IsLumenTranslucencyGIEnabled())
	{
		
		FTwoBandSHVectorRGB TranslucencyGISH = GetTranslucencyGIVolumeLighting(MaterialParameters.AbsoluteWorldPosition, ResolvedView.WorldToClip, true);

		










			
			FTwoBandSHVector DiffuseTransferSH = CalcDiffuseTransferSH(WorldNormal, 1);
			OutDiffuseLighting += max(float3(0,0,0), DotSH(TranslucencyGISH, DiffuseTransferSH)) / PI;

			






		
	}
	else

	if (TranslucentBasePass_Shared_UseBasePassSkylight > 0)
	{

	
		float SkyVisibility = 1;
		float GeometryTerm = 1;
		float3 SkyLightingNormal = WorldNormal;
	
		
			[branch]
			if (ShouldSkyLightApplyPrecomputedBentNormalShadowing())
			{
				float3 NormalizedBentNormal = SkyLightingNormal;

				







					
					float4 WorldSkyBentNormalAndOcclusion = GetSkyBentNormalAndOcclusion(LightmapVTPageTableResult, ScaleLightmapUV(LightmapUV, float2(1.0f, 2.0f)), LightmapDataIndex, MaterialParameters.SvPosition.xy);
					
					NormalizedBentNormal = normalize(WorldSkyBentNormalAndOcclusion.xyz);
					SkyVisibility = WorldSkyBentNormalAndOcclusion.w;

				










				



				
					
					float BentNormalWeightFactor = 1 - (1 - SkyVisibility) * (1 - SkyVisibility);

					
					
					
					
					SkyLightingNormal = lerp(NormalizedBentNormal, WorldNormal, BentNormalWeightFactor);

					float DotProductFactor = lerp(saturate(dot(NormalizedBentNormal, WorldNormal)), 1, BentNormalWeightFactor);
					
					GeometryTerm = DotProductFactor;
				
			}
		
			
		
		float3 DiffuseLookup = GetSkySHDiffuse(SkyLightingNormal) * ResolvedView.SkyLightColor.rgb;

		
		OutDiffuseLighting += DiffuseLookup * (SkyVisibility * GeometryTerm);

		







	}
}

#line 428 "/Engine/Private/BasePassPixelShader.usf"
void GetPrecomputedIndirectLightingAndSkyLight(
	FMaterialPixelParameters MaterialParameters, 
	FVertexFactoryInterpolantsVSToPS Interpolants,
	FSharedBasePassInterpolants BasePassInterpolants,
	float LightmapVTPageTableResult,
	bool bEvaluateBackface,
	float3 DiffuseDir,
	float3 VolumetricLightmapBrickTextureUVs,
	out float3 OutDiffuseLighting,
	out float3 OutSubsurfaceLighting,
	out float OutIndirectIrradiance)
{
	OutIndirectIrradiance = 0;
	OutDiffuseLighting = 0;
	OutSubsurfaceLighting = 0;
	float2 SkyOcclusionUV = (float2)0;
	uint SkyOcclusionDataIndex = 0u;

	
#line 592 "/Engine/Private/BasePassPixelShader.usf"

		float2 LightmapUV0, LightmapUV1;
		uint LightmapDataIndex;
		GetLightMapCoordinates(Interpolants, LightmapUV0, LightmapUV1, LightmapDataIndex);
		SkyOcclusionUV = LightmapUV0;
		SkyOcclusionDataIndex = LightmapDataIndex;
		GetLightMapColorHQ(LightmapVTPageTableResult, LightmapUV0, LightmapUV1, LightmapDataIndex, DiffuseDir, MaterialParameters.SvPosition.xy, bEvaluateBackface, OutDiffuseLighting, OutSubsurfaceLighting);

	
	







	
	OutDiffuseLighting *= View_PrecomputedIndirectLightingColorScale;
	OutSubsurfaceLighting *= View_PrecomputedIndirectLightingColorScale;

	float3 SkyDiffuseLighting;
	float3 SkySubsurfaceLighting;
	GetSkyLighting(MaterialParameters, LightmapVTPageTableResult, bEvaluateBackface, DiffuseDir, SkyOcclusionUV, SkyOcclusionDataIndex, VolumetricLightmapBrickTextureUVs, SkyDiffuseLighting, SkySubsurfaceLighting);

	OutSubsurfaceLighting += SkySubsurfaceLighting;

	
	OutDiffuseLighting += SkyDiffuseLighting;

	
		OutIndirectIrradiance = Luminance(OutDiffuseLighting);
	
}

#line 699 "/Engine/Private/BasePassPixelShader.usf"
uint GetDiffuseIndirectSampleOcclusion(FGBufferData GBuffer, float3 V, float3 WorldNormal, float3 WorldBentNormal, float2 SvPosition, float MaterialAO)
{
	uint DiffuseIndirectSampleOcclusion = 0;
#line 728 "/Engine/Private/BasePassPixelShader.usf"

	return DiffuseIndirectSampleOcclusion;
}

#line 757 "/Engine/Private/BasePassPixelShader.usf"
void FPixelShaderInOut_MainPS(
	FVertexFactoryInterpolantsVSToPS Interpolants,
	FSharedBasePassInterpolants BasePassInterpolants,
	in FPixelShaderIn In,
	inout FPixelShaderOut Out)
{




	const uint EyeIndex = 0;
	ResolvedView = ResolveView();


	
	float4 OutVelocity = 0;
	
	
	float4 OutGBufferD = 0;
	
	
	float4 OutGBufferE = 0;
	
	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Interpolants, In.SvPosition);
	FPixelMaterialInputs PixelMaterialInputs;

	float LightmapVTPageTableResult = (float)0.0f;








	











	{
		float4 ScreenPosition = SvPositionToResolvedScreenPosition(In.SvPosition);
		float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(In.SvPosition);
		CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, In.SvPosition, ScreenPosition, In.bIsFrontFace, TranslatedWorldPosition, BasePassInterpolants.PixelPositionExcludingWPO);
	}





















	const bool bEditorWeightedZBuffering = false;






	

	if (!bEditorWeightedZBuffering)
	{



		GetMaterialCoverageAndClipping(MaterialParameters, PixelMaterialInputs);

	}


	const float Dither = InterleavedGradientNoise(MaterialParameters.SvPosition.xy, View_StateFrameIndexMod8);


	
	float3 BaseColor = GetMaterialBaseColor(PixelMaterialInputs);
	float  Metallic = GetMaterialMetallic(PixelMaterialInputs);
	float  Specular = GetMaterialSpecular(PixelMaterialInputs);

	float Roughness = GetMaterialRoughness(PixelMaterialInputs);
	float Anisotropy = GetMaterialAnisotropy(PixelMaterialInputs);
	uint ShadingModel = GetMaterialShadingModel(PixelMaterialInputs);
	float Opacity = GetMaterialOpacity(PixelMaterialInputs);











	float MaterialAO = GetMaterialAmbientOcclusion(PixelMaterialInputs);

	
	float3 SubsurfaceColor = 0;
	
	float SubsurfaceProfile = 0;

#line 902 "/Engine/Private/BasePassPixelShader.usf"












#line 943 "/Engine/Private/BasePassPixelShader.usf"


	float DBufferOpacity = 1.0f;
#line 975 "/Engine/Private/BasePassPixelShader.usf"


	const float BaseMaterialCoverageOverWater = Opacity;
	const float WaterVisibility = 1.0 - BaseMaterialCoverageOverWater;

	float3 VolumetricLightmapBrickTextureUVs;





	FGBufferData GBuffer = (FGBufferData)0;

	GBuffer.GBufferAO = MaterialAO;
	GBuffer.PerObjectGBufferData = GetPrimitive_PerObjectGBufferData(MaterialParameters.PrimitiveId);
	GBuffer.Depth = MaterialParameters.ScreenPosition.w;
	GBuffer.PrecomputedShadowFactors = GetPrecomputedShadowMasks(LightmapVTPageTableResult, Interpolants, MaterialParameters, VolumetricLightmapBrickTextureUVs);


	
	SetGBufferForShadingModel(
		GBuffer,
		MaterialParameters,
		Opacity,
		BaseColor,
		Metallic,
		Specular,
		Roughness,
		Anisotropy,
		SubsurfaceColor,
		SubsurfaceProfile,
		Dither,
		ShadingModel
		);


	
#line 1039 "/Engine/Private/BasePassPixelShader.usf"









#line 1067 "/Engine/Private/BasePassPixelShader.usf"


	const bool bChecker = CheckerFromPixelPos(MaterialParameters.SvPosition.xy);


	
	GBuffer.SpecularColor = ComputeF0(Specular, BaseColor, Metallic);





















	GBuffer.DiffuseColor = BaseColor - BaseColor * Metallic;


	{
		
		GBuffer.DiffuseColor = GBuffer.DiffuseColor * View_DiffuseOverrideParameter.w + View_DiffuseOverrideParameter.xyz;
		GBuffer.SpecularColor = GBuffer.SpecularColor * View_SpecularOverrideParameter.w + View_SpecularOverrideParameter.xyz;
	}


    
	if (View_RenderingReflectionCaptureMask) 
	
	{
		EnvBRDFApproxFullyRough(GBuffer.DiffuseColor, GBuffer.SpecularColor);
		
	}

	float3 InputBentNormal = MaterialParameters.WorldNormal;
			
	
	[branch] if( GBuffer.ShadingModelID == 4 && 0)
	{
		const float2 oct1 = ((float2(GBuffer.CustomData.a, GBuffer.CustomData.z) * 4) - (512.0/255.0)) + UnitVectorToOctahedron(GBuffer.WorldNormal);
		InputBentNormal = OctahedronToUnitVector(oct1);
	}
	
	const FShadingOcclusion ShadingOcclusion = ApplyBentNormal(MaterialParameters.CameraVector, InputBentNormal, GetWorldBentNormalZero(MaterialParameters), GBuffer.Roughness, MaterialAO);

	
	GBuffer.GBufferAO = AOMultiBounce( Luminance( GBuffer.SpecularColor ), ShadingOcclusion.SpecOcclusion ).g;
	
	GBuffer.DiffuseIndirectSampleOcclusion = GetDiffuseIndirectSampleOcclusion(GBuffer, MaterialParameters.CameraVector, MaterialParameters.WorldNormal, GetWorldBentNormalZero(MaterialParameters), In.SvPosition.xy, MaterialAO);
	


	float3 DiffuseColor = 0;
	float3 Color = 0;
	float IndirectIrradiance = 0;

	float3 ColorSeparateSpecular = 0;
	float3 ColorSeparateEmissive = 0;

	float3 DiffuseIndirectLighting = 0;
	float3 SubsurfaceIndirectLighting = 0;

	float3 SeparatedWaterMainDirLightLuminance = float3(0, 0, 0); 



	

		float3 DiffuseDir = ShadingOcclusion.BentNormal;
		float3 DiffuseColorForIndirect = GBuffer.DiffuseColor;

		








		






		












		const bool bEvaluateBackface = GetShadingModelRequiresBackfaceLighting(GBuffer.ShadingModelID);
		GetPrecomputedIndirectLightingAndSkyLight(MaterialParameters, Interpolants, BasePassInterpolants, LightmapVTPageTableResult, bEvaluateBackface, DiffuseDir, VolumetricLightmapBrickTextureUVs, DiffuseIndirectLighting, SubsurfaceIndirectLighting, IndirectIrradiance);

		float IndirectOcclusion = 1.0f;
		float2 NearestResolvedDepthScreenUV = 0;
		float DirectionalLightShadow = 1.0f;
		float DirectionalLightCloudShadow = 1.0f;

		










		DiffuseColor += (DiffuseIndirectLighting * DiffuseColorForIndirect + SubsurfaceIndirectLighting * SubsurfaceColor) * AOMultiBounce( GBuffer.BaseColor, ShadingOcclusion.DiffOcclusion );









		




			uint GridIndex = 0;

			
				GridIndex = ComputeLightGridCellIndex((uint2)((MaterialParameters.SvPosition.xy - ResolvedView.ViewRectMin.xy) * View_LightProbeSizeRatioAndInvSizeRatio.zw), MaterialParameters.SvPosition.w, EyeIndex);

				



				
#line 1260 "/Engine/Private/BasePassPixelShader.usf"

			
				
			
				if (GBuffer.ShadingModelID != 7)
				{
					int SingleCaptureIndex = GetPrimitiveData(MaterialParameters).SingleCaptureIndex;

					float3 ReflectionColor = GetImageBasedReflectionLighting(MaterialParameters, GBuffer.Roughness, GBuffer.SpecularColor, IndirectIrradiance, GridIndex, SingleCaptureIndex, EyeIndex) 
						* IndirectOcclusion
						* AOMultiBounce(GBuffer.SpecularColor, ShadingOcclusion.SpecOcclusion);

					


						Color += ReflectionColor;
					
				}
			
		
	









	
		float4 HeightFogging = BasePassInterpolants.VertexFog;
	





	float4 Fogging = HeightFogging;


	if (TranslucentBasePass_Shared_Fog_ApplyVolumetricFog > 0) 
	{
		float3 VolumeUV = ComputeVolumeUV(MaterialParameters.AbsoluteWorldPosition, ResolvedView.WorldToClip);
		Fogging = CombineVolumetricFog(HeightFogging, VolumeUV, EyeIndex, GBuffer.Depth);
	}







#line 1328 "/Engine/Private/BasePassPixelShader.usf"















	float3 Emissive = 0;


	

	if (GBuffer.ShadingModelID == 1 || GBuffer.ShadingModelID == 2)
	{
		Color += GetTranslucencyVolumeLighting(MaterialParameters, PixelMaterialInputs, BasePassInterpolants, GBuffer, IndirectIrradiance);
	}


	
		float3 GBufferDiffuseColor = GBuffer.DiffuseColor;
		float3 GBufferSpecularColor = GBuffer.SpecularColor;
		EnvBRDFApproxFullyRough(GBufferDiffuseColor, GBufferSpecularColor);
		Color = lerp(Color, GBufferDiffuseColor, View_UnlitViewmodeMask);
	

	Emissive = GetMaterialEmissive(PixelMaterialInputs);




	float3 OutOfBoundsMaskLuminance = 0;
	
	
	
		
		[branch]
		if (View_OutOfBoundsMask > 0)
		{
			FPrimitiveSceneData PrimitiveData = GetPrimitiveData(MaterialParameters);

			float3 ObjectBounds =
				float3(
					PrimitiveData.ObjectBoundsX,
					PrimitiveData.ObjectBoundsY,
					PrimitiveData.ObjectBoundsZ
				);

			if (any(abs(LWCToFloat(LWCSubtract(MaterialParameters.AbsoluteWorldPosition, PrimitiveData.ObjectWorldPosition))) > ObjectBounds + 1))
			{
				float Gradient = LWCFrac(LWCDivide(LWCDot(MaterialParameters.AbsoluteWorldPosition, float3(.577f, .577f, .577f)), 500.0f));
				OutOfBoundsMaskLuminance = lerp(float3(1,1,0), float3(0,1,1), Gradient.xxx > .5f);
				Emissive = OutOfBoundsMaskLuminance;
				Opacity = 1;
			}
			else if (PrimitiveData.MaxWPOExtent > 0.0f)
			{
				
				const float3 OffsetAmt = abs(MaterialParameters.WorldPosition_CamRelative - MaterialParameters.WorldPosition_NoOffsets_CamRelative);
				const float MaxOffsetDim = max3(OffsetAmt.x, OffsetAmt.y, OffsetAmt.z);
				const float Proximity = 1.0f - saturate(abs(MaxOffsetDim - PrimitiveData.MaxWPOExtent) / 0.05f);
				Emissive = Proximity * float3(1, 0 ,1);
				Opacity = sign(Proximity);
			}
		}
		
	











 	
	
	Color += DiffuseColor;



	Color += Emissive;




#line 1469 "/Engine/Private/BasePassPixelShader.usf"


#line 1487 "/Engine/Private/BasePassPixelShader.usf"






	bool bStrataSubsurfaceEnable = false;
#line 1798 "/Engine/Private/BasePassPixelShader.usf"


	
#line 1865 "/Engine/Private/BasePassPixelShader.usf"

		Out.MRT[0] = float4(Color * Fogging.a + Fogging.rgb, Opacity);
		Out.MRT[0] =  ( Out.MRT[0] );
	
#line 1905 "/Engine/Private/BasePassPixelShader.usf"


	
#line 1975 "/Engine/Private/BasePassPixelShader.usf"


		
		



	

	if(bEditorWeightedZBuffering)
	{
		Out.MRT[0].a = 1;

		




		











			
			clip(Out.MRT[0].a - GetMaterialOpacityMaskClipValue());
		
	}






	const float ViewPreExposure = View_PreExposure;

	
	
	
	
	
		Out.MRT[0].rgb  *= ViewPreExposure;
	




	
	
#line 2080 "/Engine/Private/BasePassPixelShader.usf"


	
	
	
	Out.MRT[0].xyz = min(Out.MRT[0].xyz, Max10BitsFloat.xxx * 0.5f);

#line 2101 "/Engine/Private/BasePassPixelShader.usf"


















}

#line 12 "/Engine/Private/PixelShaderOutputCommon.ush"
void MainPS
	(




		FVertexFactoryInterpolantsVSToPS Interpolants,



		FSharedBasePassInterpolants BasePassInterpolants,




		in   float4 SvPosition : SV_Position		

		, in bool bIsFrontFace : SV_IsFrontFace


	


		, out float4 OutTarget0 : SV_Target0
	


















#line  83 "/Engine/Private/PixelShaderOutputCommon.ush"




















		
		 







	)
{
	










	FPixelShaderIn PixelShaderIn = (FPixelShaderIn)0;
	FPixelShaderOut PixelShaderOut = (FPixelShaderOut)0;










	PixelShaderIn.SvPosition = SvPosition;
	PixelShaderIn.bIsFrontFace = bIsFrontFace;


	FPixelShaderInOut_MainPS(Interpolants, BasePassInterpolants, PixelShaderIn, PixelShaderOut);









	OutTarget0 = PixelShaderOut.MRT[0];














#line 196 "/Engine/Private/PixelShaderOutputCommon.ush"



























}



#if 0 /*BEGIN_RESOURCE_TABLES*/
View, 376963194
Strata, 158337041
DrawRectangleParameters, 3145984
InstancedView, 450888449
MobileReflectionCapture, 2425088
InstanceVF, 104204038
SingleLayerWater, 1641252
PrimitiveDither, 1048832
PrimitiveFade, 1048832
DeferredDecal, 2097668
SceneTexturesStruct, 158338568
MobileSceneTextures, 147131313
Primitive, 50331904
Scene, 273683233
InstanceCulling, 3146265
SpeedTreeData, 39846144
Atmosphere, 11534592
BlueNoise, 3473677
OpaqueBasePass, 159911720
BasePass, 148439296
TranslucentBasePass, 274269473
LightmapResourceCluster, 226692878
PrecomputedLightingBuffer, 15728896
IndirectLightingCache, 69011717
ReflectionStruct, 206569728
PlanarReflectionStruct, 22348032
FogStruct, 96995368
ReflectionCaptureES31, 943719169
ReflectionCaptureSM5, -1076886783
LumenGIVolumeStruct, 188746712
TranslucentSelfShadow, 93653256
ForwardLightData, 466097176
DeferredLightUniforms, 10486016
VirtualShadowMap, 277877352
MobileBasePass, 118234733
Nanite, 164563880
NaniteRayTracing, 4588345
ShaderPrintData, 5243136
LocalVFLooseParameters, 2490654
LocalVF, 105252632
InstancedVFLooseParameters, 6291712
Material, 35654656
NULL, 0
View_MaterialTextureBilinearWrapedSampler, View, 8, 0
View_MaterialTextureBilinearClampedSampler, View, 8, 1
View_VolumetricLightmapIndirectionTexture, View, 5, 2
View_VolumetricLightmapBrickAmbientVector, View, 5, 3
View_VolumetricLightmapBrickSHCoefficients0, View, 5, 4
View_VolumetricLightmapBrickSHCoefficients1, View, 5, 5
View_VolumetricLightmapBrickSHCoefficients2, View, 5, 6
View_VolumetricLightmapBrickSHCoefficients3, View, 5, 7
View_VolumetricLightmapBrickSHCoefficients4, View, 5, 8
View_VolumetricLightmapBrickSHCoefficients5, View, 5, 9
View_SkyBentNormalBrickTexture, View, 5, 10
View_DirectionalLightShadowingBrickTexture, View, 5, 11
View_VolumetricLightmapBrickAmbientVectorSampler, View, 8, 12
View_VolumetricLightmapTextureSampler0, View, 8, 13
View_VolumetricLightmapTextureSampler1, View, 8, 14
View_VolumetricLightmapTextureSampler2, View, 8, 15
View_VolumetricLightmapTextureSampler3, View, 8, 16
View_VolumetricLightmapTextureSampler4, View, 8, 17
View_VolumetricLightmapTextureSampler5, View, 8, 18
View_SkyBentNormalTextureSampler, View, 8, 19
View_DirectionalLightShadowingTextureSampler, View, 8, 20
View_GlobalDistanceFieldPageAtlasTexture, View, 5, 21
View_GlobalDistanceFieldCoverageAtlasTexture, View, 5, 22
View_GlobalDistanceFieldPageTableTexture, View, 5, 23
View_GlobalDistanceFieldMipTexture, View, 5, 24
View_GlobalDistanceFieldPageAtlasTextureSampler, View, 8, 25
View_GlobalDistanceFieldCoverageAtlasTextureSampler, View, 8, 26
View_GlobalDistanceFieldMipTextureSampler, View, 8, 27
View_AtmosphereTransmittanceTexture, View, 5, 28
View_AtmosphereTransmittanceTextureSampler, View, 8, 29
View_AtmosphereIrradianceTexture, View, 5, 30
View_AtmosphereIrradianceTextureSampler, View, 8, 31
View_AtmosphereInscatterTexture, View, 5, 32
View_AtmosphereInscatterTextureSampler, View, 8, 33
View_PerlinNoiseGradientTexture, View, 5, 34
View_PerlinNoiseGradientTextureSampler, View, 8, 35
View_PerlinNoise3DTexture, View, 5, 36
View_PerlinNoise3DTextureSampler, View, 8, 37
View_SobolSamplingTexture, View, 5, 38
View_SharedPointWrappedSampler, View, 8, 39
View_SharedPointClampedSampler, View, 8, 40
View_SharedBilinearWrappedSampler, View, 8, 41
View_SharedBilinearClampedSampler, View, 8, 42
View_SharedBilinearAnisoClampedSampler, View, 8, 43
View_SharedTrilinearWrappedSampler, View, 8, 44
View_SharedTrilinearClampedSampler, View, 8, 45
View_PreIntegratedBRDF, View, 5, 46
View_PreIntegratedBRDFSampler, View, 8, 47
View_SkyIrradianceEnvironmentMap, View, 6, 48
View_TransmittanceLutTexture, View, 5, 49
View_TransmittanceLutTextureSampler, View, 8, 50
View_SkyViewLutTexture, View, 5, 51
View_SkyViewLutTextureSampler, View, 8, 52
View_DistantSkyLightLutTexture, View, 5, 53
View_DistantSkyLightLutTextureSampler, View, 8, 54
View_CameraAerialPerspectiveVolume, View, 5, 55
View_CameraAerialPerspectiveVolumeSampler, View, 8, 56
View_CameraAerialPerspectiveVolumeMieOnly, View, 5, 57
View_CameraAerialPerspectiveVolumeMieOnlySampler, View, 8, 58
View_CameraAerialPerspectiveVolumeRayOnly, View, 5, 59
View_CameraAerialPerspectiveVolumeRayOnlySampler, View, 8, 60
View_HairScatteringLUTTexture, View, 5, 61
View_HairScatteringLUTSampler, View, 8, 62
View_GGXLTCMatTexture, View, 5, 63
View_GGXLTCMatSampler, View, 8, 64
View_GGXLTCAmpTexture, View, 5, 65
View_GGXLTCAmpSampler, View, 8, 66
View_SheenLTCTexture, View, 5, 67
View_SheenLTCSampler, View, 8, 68
View_ShadingEnergyGGXSpecTexture, View, 5, 69
View_ShadingEnergyGGXGlassTexture, View, 5, 70
View_ShadingEnergyClothSpecTexture, View, 5, 71
View_ShadingEnergyDiffuseTexture, View, 5, 72
View_ShadingEnergySampler, View, 8, 73
View_GlintTexture, View, 5, 74
View_GlintSampler, View, 8, 75
View_SimpleVolumeTexture, View, 5, 76
View_SimpleVolumeTextureSampler, View, 8, 77
View_SimpleVolumeEnvTexture, View, 5, 78
View_SimpleVolumeEnvTextureSampler, View, 8, 79
View_SSProfilesTexture, View, 5, 80
View_SSProfilesSampler, View, 8, 81
View_SSProfilesTransmissionSampler, View, 8, 82
View_SSProfilesPreIntegratedTexture, View, 5, 83
View_SSProfilesPreIntegratedSampler, View, 8, 84
View_SpecularProfileTexture, View, 5, 85
View_SpecularProfileSampler, View, 8, 86
View_WaterIndirection, View, 6, 87
View_WaterData, View, 6, 88
View_RectLightAtlasTexture, View, 5, 89
View_RectLightAtlasSampler, View, 8, 90
View_IESAtlasTexture, View, 5, 91
View_IESAtlasSampler, View, 8, 92
View_LandscapeWeightmapSampler, View, 8, 93
View_LandscapeIndirection, View, 6, 94
View_LandscapePerComponentData, View, 6, 95
View_VTFeedbackBuffer, View, 7, 96
View_PhysicsFieldClipmapBuffer, View, 6, 97
Strata_MaterialTextureArray, Strata, 9, 0
Strata_TopLayerTexture, Strata, 9, 1
Strata_OpaqueRoughRefractionTexture, Strata, 9, 2
Strata_BSDFOffsetTexture, Strata, 9, 3
Strata_BSDFTileTexture, Strata, 9, 4
Strata_BSDFTileCountBuffer, Strata, 16, 5
MobileReflectionCapture_Texture, MobileReflectionCapture, 5, 0
MobileReflectionCapture_TextureSampler, MobileReflectionCapture, 8, 1
InstanceVF_VertexFetch_InstanceOriginBuffer, InstanceVF, 6, 0
InstanceVF_VertexFetch_InstanceTransformBuffer, InstanceVF, 6, 1
InstanceVF_VertexFetch_InstanceLightmapBuffer, InstanceVF, 6, 2
InstanceVF_InstanceCustomDataBuffer, InstanceVF, 6, 3
SingleLayerWater_SceneColorWithoutSingleLayerWaterTexture, SingleLayerWater, 9, 0
SingleLayerWater_SceneColorWithoutSingleLayerWaterSampler, SingleLayerWater, 8, 1
SingleLayerWater_SceneDepthWithoutSingleLayerWaterTexture, SingleLayerWater, 9, 2
SingleLayerWater_SceneDepthWithoutSingleLayerWaterSampler, SingleLayerWater, 8, 3
SingleLayerWater_CustomDepthTexture, SingleLayerWater, 9, 4
SingleLayerWater_CustomStencilTexture, SingleLayerWater, 12, 5
SingleLayerWater_CustomDepthSampler, SingleLayerWater, 8, 6
SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapTexture, SingleLayerWater, 9, 7
SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapSampler, SingleLayerWater, 8, 8
SingleLayerWater_BlueNoise_ScalarTexture, SingleLayerWater, 5, 9
SingleLayerWater_BlueNoise_Vec2Texture, SingleLayerWater, 5, 10
DeferredDecal_PreviousFrameNormal, DeferredDecal, 5, 0
SceneTexturesStruct_SceneColorTexture, SceneTexturesStruct, 9, 0
SceneTexturesStruct_SceneDepthTexture, SceneTexturesStruct, 9, 1
SceneTexturesStruct_ScenePartialDepthTexture, SceneTexturesStruct, 9, 2
SceneTexturesStruct_GBufferATexture, SceneTexturesStruct, 9, 3
SceneTexturesStruct_GBufferBTexture, SceneTexturesStruct, 9, 4
SceneTexturesStruct_GBufferCTexture, SceneTexturesStruct, 9, 5
SceneTexturesStruct_GBufferDTexture, SceneTexturesStruct, 9, 6
SceneTexturesStruct_GBufferETexture, SceneTexturesStruct, 9, 7
SceneTexturesStruct_GBufferFTexture, SceneTexturesStruct, 9, 8
SceneTexturesStruct_GBufferVelocityTexture, SceneTexturesStruct, 9, 9
SceneTexturesStruct_ScreenSpaceAOTexture, SceneTexturesStruct, 9, 10
SceneTexturesStruct_CustomDepthTexture, SceneTexturesStruct, 9, 11
SceneTexturesStruct_CustomStencilTexture, SceneTexturesStruct, 12, 12
SceneTexturesStruct_PointClampSampler, SceneTexturesStruct, 8, 13
MobileSceneTextures_SceneColorTexture, MobileSceneTextures, 9, 0
MobileSceneTextures_SceneColorTextureSampler, MobileSceneTextures, 8, 1
MobileSceneTextures_SceneDepthTexture, MobileSceneTextures, 9, 2
MobileSceneTextures_SceneDepthTextureSampler, MobileSceneTextures, 8, 3
MobileSceneTextures_ScenePartialDepthTexture, MobileSceneTextures, 9, 4
MobileSceneTextures_ScenePartialDepthTextureSampler, MobileSceneTextures, 8, 5
MobileSceneTextures_CustomDepthTexture, MobileSceneTextures, 9, 6
MobileSceneTextures_CustomDepthTextureSampler, MobileSceneTextures, 8, 7
MobileSceneTextures_CustomStencilTexture, MobileSceneTextures, 12, 8
MobileSceneTextures_SceneVelocityTexture, MobileSceneTextures, 9, 9
MobileSceneTextures_SceneVelocityTextureSampler, MobileSceneTextures, 8, 10
MobileSceneTextures_GBufferATexture, MobileSceneTextures, 9, 11
MobileSceneTextures_GBufferBTexture, MobileSceneTextures, 9, 12
MobileSceneTextures_GBufferCTexture, MobileSceneTextures, 9, 13
MobileSceneTextures_GBufferDTexture, MobileSceneTextures, 9, 14
MobileSceneTextures_SceneDepthAuxTexture, MobileSceneTextures, 9, 15
MobileSceneTextures_LocalLightTextureA, MobileSceneTextures, 9, 16
MobileSceneTextures_LocalLightTextureB, MobileSceneTextures, 9, 17
MobileSceneTextures_GBufferATextureSampler, MobileSceneTextures, 8, 18
MobileSceneTextures_GBufferBTextureSampler, MobileSceneTextures, 8, 19
MobileSceneTextures_GBufferCTextureSampler, MobileSceneTextures, 8, 20
MobileSceneTextures_GBufferDTextureSampler, MobileSceneTextures, 8, 21
MobileSceneTextures_SceneDepthAuxTextureSampler, MobileSceneTextures, 8, 22
Scene_GPUScene_GPUSceneInstanceSceneData, Scene, 16, 0
Scene_GPUScene_GPUSceneInstancePayloadData, Scene, 16, 1
Scene_GPUScene_GPUScenePrimitiveSceneData, Scene, 16, 2
Scene_GPUScene_GPUSceneLightmapData, Scene, 16, 3
Scene_GPUScene_GPUSceneLightData, Scene, 16, 4
InstanceCulling_InstanceIdsBuffer, InstanceCulling, 16, 0
InstanceCulling_PageInfoBuffer, InstanceCulling, 16, 1
BlueNoise_ScalarTexture, BlueNoise, 5, 0
BlueNoise_Vec2Texture, BlueNoise, 5, 1
OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlas, OpaqueBasePass, 9, 0
OpaqueBasePass_Shared_Forward_ShadowmapSampler, OpaqueBasePass, 8, 1
OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowmap, OpaqueBasePass, 5, 2
OpaqueBasePass_Shared_Forward_StaticShadowmapSampler, OpaqueBasePass, 8, 3
OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer, OpaqueBasePass, 16, 4
OpaqueBasePass_Shared_Forward_NumCulledLightsGrid, OpaqueBasePass, 16, 5
OpaqueBasePass_Shared_Forward_CulledLightDataGrid32Bit, OpaqueBasePass, 16, 6
OpaqueBasePass_Shared_Forward_CulledLightDataGrid16Bit, OpaqueBasePass, 16, 7
OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas, OpaqueBasePass, 9, 8
OpaqueBasePass_Shared_ForwardISR_ShadowmapSampler, OpaqueBasePass, 8, 9
OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap, OpaqueBasePass, 5, 10
OpaqueBasePass_Shared_ForwardISR_StaticShadowmapSampler, OpaqueBasePass, 8, 11
OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer, OpaqueBasePass, 16, 12
OpaqueBasePass_Shared_ForwardISR_NumCulledLightsGrid, OpaqueBasePass, 16, 13
OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid32Bit, OpaqueBasePass, 16, 14
OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid16Bit, OpaqueBasePass, 16, 15
OpaqueBasePass_Shared_Reflection_SkyLightCubemap, OpaqueBasePass, 9, 16
OpaqueBasePass_Shared_Reflection_SkyLightCubemapSampler, OpaqueBasePass, 8, 17
OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap, OpaqueBasePass, 5, 18
OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler, OpaqueBasePass, 8, 19
OpaqueBasePass_Shared_Reflection_ReflectionCubemap, OpaqueBasePass, 5, 20
OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler, OpaqueBasePass, 8, 21
OpaqueBasePass_Shared_Reflection_PreIntegratedGF, OpaqueBasePass, 5, 22
OpaqueBasePass_Shared_Reflection_PreIntegratedGFSampler, OpaqueBasePass, 8, 23
OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionTexture, OpaqueBasePass, 5, 24
OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionSampler, OpaqueBasePass, 8, 25
OpaqueBasePass_Shared_Fog_FogInscatteringColorCubemap, OpaqueBasePass, 5, 26
OpaqueBasePass_Shared_Fog_FogInscatteringColorSampler, OpaqueBasePass, 8, 27
OpaqueBasePass_Shared_Fog_IntegratedLightScattering, OpaqueBasePass, 9, 28
OpaqueBasePass_Shared_Fog_IntegratedLightScatteringSampler, OpaqueBasePass, 8, 29
OpaqueBasePass_Shared_FogISR_FogInscatteringColorCubemap, OpaqueBasePass, 5, 30
OpaqueBasePass_Shared_FogISR_FogInscatteringColorSampler, OpaqueBasePass, 8, 31
OpaqueBasePass_Shared_FogISR_IntegratedLightScattering, OpaqueBasePass, 9, 32
OpaqueBasePass_Shared_FogISR_IntegratedLightScatteringSampler, OpaqueBasePass, 8, 33
OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs, OpaqueBasePass, 13, 34
OpaqueBasePass_Strata_OpaqueRoughRefractionTextureUAV, OpaqueBasePass, 13, 35
OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture, OpaqueBasePass, 9, 36
OpaqueBasePass_IndirectOcclusionTexture, OpaqueBasePass, 9, 37
OpaqueBasePass_ResolvedSceneDepthTexture, OpaqueBasePass, 9, 38
OpaqueBasePass_DBufferATexture, OpaqueBasePass, 9, 39
OpaqueBasePass_DBufferBTexture, OpaqueBasePass, 9, 40
OpaqueBasePass_DBufferCTexture, OpaqueBasePass, 9, 41
OpaqueBasePass_DBufferRenderMask, OpaqueBasePass, 9, 42
OpaqueBasePass_DBufferATextureSampler, OpaqueBasePass, 8, 43
OpaqueBasePass_DBufferBTextureSampler, OpaqueBasePass, 8, 44
OpaqueBasePass_DBufferCTextureSampler, OpaqueBasePass, 8, 45
OpaqueBasePass_PreIntegratedGFTexture, OpaqueBasePass, 5, 46
OpaqueBasePass_PreIntegratedGFSampler, OpaqueBasePass, 8, 47
OpaqueBasePass_EyeAdaptationBuffer, OpaqueBasePass, 16, 48
BasePass_Forward_DirectionalLightShadowmapAtlas, BasePass, 9, 0
BasePass_Forward_ShadowmapSampler, BasePass, 8, 1
BasePass_Forward_DirectionalLightStaticShadowmap, BasePass, 5, 2
BasePass_Forward_StaticShadowmapSampler, BasePass, 8, 3
BasePass_Forward_ForwardLocalLightBuffer, BasePass, 16, 4
BasePass_Forward_NumCulledLightsGrid, BasePass, 16, 5
BasePass_Forward_CulledLightDataGrid32Bit, BasePass, 16, 6
BasePass_Forward_CulledLightDataGrid16Bit, BasePass, 16, 7
BasePass_ForwardISR_DirectionalLightShadowmapAtlas, BasePass, 9, 8
BasePass_ForwardISR_ShadowmapSampler, BasePass, 8, 9
BasePass_ForwardISR_DirectionalLightStaticShadowmap, BasePass, 5, 10
BasePass_ForwardISR_StaticShadowmapSampler, BasePass, 8, 11
BasePass_ForwardISR_ForwardLocalLightBuffer, BasePass, 16, 12
BasePass_ForwardISR_NumCulledLightsGrid, BasePass, 16, 13
BasePass_ForwardISR_CulledLightDataGrid32Bit, BasePass, 16, 14
BasePass_ForwardISR_CulledLightDataGrid16Bit, BasePass, 16, 15
BasePass_Reflection_SkyLightCubemap, BasePass, 9, 16
BasePass_Reflection_SkyLightCubemapSampler, BasePass, 8, 17
BasePass_Reflection_SkyLightBlendDestinationCubemap, BasePass, 5, 18
BasePass_Reflection_SkyLightBlendDestinationCubemapSampler, BasePass, 8, 19
BasePass_Reflection_ReflectionCubemap, BasePass, 5, 20
BasePass_Reflection_ReflectionCubemapSampler, BasePass, 8, 21
BasePass_Reflection_PreIntegratedGF, BasePass, 5, 22
BasePass_Reflection_PreIntegratedGFSampler, BasePass, 8, 23
BasePass_PlanarReflection_PlanarReflectionTexture, BasePass, 5, 24
BasePass_PlanarReflection_PlanarReflectionSampler, BasePass, 8, 25
BasePass_Fog_FogInscatteringColorCubemap, BasePass, 5, 26
BasePass_Fog_FogInscatteringColorSampler, BasePass, 8, 27
BasePass_Fog_IntegratedLightScattering, BasePass, 9, 28
BasePass_Fog_IntegratedLightScatteringSampler, BasePass, 8, 29
BasePass_FogISR_FogInscatteringColorCubemap, BasePass, 5, 30
BasePass_FogISR_FogInscatteringColorSampler, BasePass, 8, 31
BasePass_FogISR_IntegratedLightScattering, BasePass, 9, 32
BasePass_FogISR_IntegratedLightScatteringSampler, BasePass, 8, 33
TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapAtlas, TranslucentBasePass, 9, 0
TranslucentBasePass_Shared_Forward_ShadowmapSampler, TranslucentBasePass, 8, 1
TranslucentBasePass_Shared_Forward_DirectionalLightStaticShadowmap, TranslucentBasePass, 5, 2
TranslucentBasePass_Shared_Forward_StaticShadowmapSampler, TranslucentBasePass, 8, 3
TranslucentBasePass_Shared_Forward_ForwardLocalLightBuffer, TranslucentBasePass, 16, 4
TranslucentBasePass_Shared_Forward_NumCulledLightsGrid, TranslucentBasePass, 16, 5
TranslucentBasePass_Shared_Forward_CulledLightDataGrid32Bit, TranslucentBasePass, 16, 6
TranslucentBasePass_Shared_Forward_CulledLightDataGrid16Bit, TranslucentBasePass, 16, 7
TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas, TranslucentBasePass, 9, 8
TranslucentBasePass_Shared_ForwardISR_ShadowmapSampler, TranslucentBasePass, 8, 9
TranslucentBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap, TranslucentBasePass, 5, 10
TranslucentBasePass_Shared_ForwardISR_StaticShadowmapSampler, TranslucentBasePass, 8, 11
TranslucentBasePass_Shared_ForwardISR_ForwardLocalLightBuffer, TranslucentBasePass, 16, 12
TranslucentBasePass_Shared_ForwardISR_NumCulledLightsGrid, TranslucentBasePass, 16, 13
TranslucentBasePass_Shared_ForwardISR_CulledLightDataGrid32Bit, TranslucentBasePass, 16, 14
TranslucentBasePass_Shared_ForwardISR_CulledLightDataGrid16Bit, TranslucentBasePass, 16, 15
TranslucentBasePass_Shared_Reflection_SkyLightCubemap, TranslucentBasePass, 9, 16
TranslucentBasePass_Shared_Reflection_SkyLightCubemapSampler, TranslucentBasePass, 8, 17
TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap, TranslucentBasePass, 5, 18
TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler, TranslucentBasePass, 8, 19
TranslucentBasePass_Shared_Reflection_ReflectionCubemap, TranslucentBasePass, 5, 20
TranslucentBasePass_Shared_Reflection_ReflectionCubemapSampler, TranslucentBasePass, 8, 21
TranslucentBasePass_Shared_Reflection_PreIntegratedGF, TranslucentBasePass, 5, 22
TranslucentBasePass_Shared_Reflection_PreIntegratedGFSampler, TranslucentBasePass, 8, 23
TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionTexture, TranslucentBasePass, 5, 24
TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionSampler, TranslucentBasePass, 8, 25
TranslucentBasePass_Shared_Fog_FogInscatteringColorCubemap, TranslucentBasePass, 5, 26
TranslucentBasePass_Shared_Fog_FogInscatteringColorSampler, TranslucentBasePass, 8, 27
TranslucentBasePass_Shared_Fog_IntegratedLightScattering, TranslucentBasePass, 9, 28
TranslucentBasePass_Shared_Fog_IntegratedLightScatteringSampler, TranslucentBasePass, 8, 29
TranslucentBasePass_Shared_FogISR_FogInscatteringColorCubemap, TranslucentBasePass, 5, 30
TranslucentBasePass_Shared_FogISR_FogInscatteringColorSampler, TranslucentBasePass, 8, 31
TranslucentBasePass_Shared_FogISR_IntegratedLightScattering, TranslucentBasePass, 9, 32
TranslucentBasePass_Shared_FogISR_IntegratedLightScatteringSampler, TranslucentBasePass, 8, 33
TranslucentBasePass_SceneTextures_SceneColorTexture, TranslucentBasePass, 9, 34
TranslucentBasePass_SceneTextures_SceneDepthTexture, TranslucentBasePass, 9, 35
TranslucentBasePass_SceneTextures_ScenePartialDepthTexture, TranslucentBasePass, 9, 36
TranslucentBasePass_SceneTextures_GBufferATexture, TranslucentBasePass, 9, 37
TranslucentBasePass_SceneTextures_GBufferBTexture, TranslucentBasePass, 9, 38
TranslucentBasePass_SceneTextures_GBufferCTexture, TranslucentBasePass, 9, 39
TranslucentBasePass_SceneTextures_GBufferDTexture, TranslucentBasePass, 9, 40
TranslucentBasePass_SceneTextures_GBufferETexture, TranslucentBasePass, 9, 41
TranslucentBasePass_SceneTextures_GBufferFTexture, TranslucentBasePass, 9, 42
TranslucentBasePass_SceneTextures_GBufferVelocityTexture, TranslucentBasePass, 9, 43
TranslucentBasePass_SceneTextures_ScreenSpaceAOTexture, TranslucentBasePass, 9, 44
TranslucentBasePass_SceneTextures_CustomDepthTexture, TranslucentBasePass, 9, 45
TranslucentBasePass_SceneTextures_CustomStencilTexture, TranslucentBasePass, 12, 46
TranslucentBasePass_SceneTextures_PointClampSampler, TranslucentBasePass, 8, 47
TranslucentBasePass_Strata_MaterialTextureArray, TranslucentBasePass, 9, 48
TranslucentBasePass_Strata_TopLayerTexture, TranslucentBasePass, 9, 49
TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapTexture, TranslucentBasePass, 9, 50
TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapSampler, TranslucentBasePass, 8, 51
TranslucentBasePass_OIT_OutOITSampleCount, TranslucentBasePass, 13, 52
TranslucentBasePass_OIT_OutOITSampleColor, TranslucentBasePass, 13, 53
TranslucentBasePass_OIT_OutOITSampleTrans, TranslucentBasePass, 13, 54
TranslucentBasePass_OIT_OutOITSampleDepth, TranslucentBasePass, 13, 55
TranslucentBasePass_HZBTexture, TranslucentBasePass, 9, 56
TranslucentBasePass_HZBSampler, TranslucentBasePass, 8, 57
TranslucentBasePass_PrevSceneColor, TranslucentBasePass, 12, 58
TranslucentBasePass_PrevSceneColorSampler, TranslucentBasePass, 8, 59
TranslucentBasePass_VolumetricCloudColor, TranslucentBasePass, 9, 60
TranslucentBasePass_VolumetricCloudColorSampler, TranslucentBasePass, 8, 61
TranslucentBasePass_VolumetricCloudDepth, TranslucentBasePass, 9, 62
TranslucentBasePass_VolumetricCloudDepthSampler, TranslucentBasePass, 8, 63
TranslucentBasePass_TranslucencyLightingVolumeAmbientInner, TranslucentBasePass, 9, 64
TranslucentBasePass_TranslucencyLightingVolumeAmbientOuter, TranslucentBasePass, 9, 65
TranslucentBasePass_TranslucencyLightingVolumeDirectionalInner, TranslucentBasePass, 9, 66
TranslucentBasePass_TranslucencyLightingVolumeDirectionalOuter, TranslucentBasePass, 9, 67
TranslucentBasePass_RadianceProbeIndirectionTexture, TranslucentBasePass, 9, 68
TranslucentBasePass_RadianceCacheFinalRadianceAtlas, TranslucentBasePass, 9, 69
TranslucentBasePass_RadianceCacheFinalIrradianceAtlas, TranslucentBasePass, 9, 70
TranslucentBasePass_RadianceCacheProbeOcclusionAtlas, TranslucentBasePass, 9, 71
TranslucentBasePass_RadianceCacheDepthAtlas, TranslucentBasePass, 9, 72
TranslucentBasePass_ProbeWorldOffset, TranslucentBasePass, 16, 73
TranslucentBasePass_Radiance, TranslucentBasePass, 9, 74
TranslucentBasePass_Normal, TranslucentBasePass, 9, 75
TranslucentBasePass_SceneDepth, TranslucentBasePass, 9, 76
TranslucentBasePass_TranslucencyGIVolume0, TranslucentBasePass, 9, 77
TranslucentBasePass_TranslucencyGIVolume1, TranslucentBasePass, 9, 78
TranslucentBasePass_TranslucencyGIVolumeHistory0, TranslucentBasePass, 9, 79
TranslucentBasePass_TranslucencyGIVolumeHistory1, TranslucentBasePass, 9, 80
TranslucentBasePass_TranslucencyGIVolumeSampler, TranslucentBasePass, 8, 81
TranslucentBasePass_PreIntegratedGFTexture, TranslucentBasePass, 5, 82
TranslucentBasePass_PreIntegratedGFSampler, TranslucentBasePass, 8, 83
TranslucentBasePass_EyeAdaptationBuffer, TranslucentBasePass, 16, 84
TranslucentBasePass_SceneColorCopyTexture, TranslucentBasePass, 9, 85
TranslucentBasePass_SceneColorCopySampler, TranslucentBasePass, 8, 86
TranslucentBasePass_BlueNoise_ScalarTexture, TranslucentBasePass, 5, 87
TranslucentBasePass_BlueNoise_Vec2Texture, TranslucentBasePass, 5, 88
LightmapResourceCluster_LightMapTexture, LightmapResourceCluster, 5, 0
LightmapResourceCluster_SkyOcclusionTexture, LightmapResourceCluster, 5, 1
LightmapResourceCluster_AOMaterialMaskTexture, LightmapResourceCluster, 5, 2
LightmapResourceCluster_StaticShadowTexture, LightmapResourceCluster, 5, 3
LightmapResourceCluster_VTLightMapTexture, LightmapResourceCluster, 6, 4
LightmapResourceCluster_VTLightMapTexture_1, LightmapResourceCluster, 6, 5
LightmapResourceCluster_VTSkyOcclusionTexture, LightmapResourceCluster, 6, 6
LightmapResourceCluster_VTAOMaterialMaskTexture, LightmapResourceCluster, 6, 7
LightmapResourceCluster_VTStaticShadowTexture, LightmapResourceCluster, 6, 8
LightmapResourceCluster_LightMapSampler, LightmapResourceCluster, 8, 9
LightmapResourceCluster_LightMapSampler_1, LightmapResourceCluster, 8, 10
LightmapResourceCluster_SkyOcclusionSampler, LightmapResourceCluster, 8, 11
LightmapResourceCluster_AOMaterialMaskSampler, LightmapResourceCluster, 8, 12
LightmapResourceCluster_StaticShadowTextureSampler, LightmapResourceCluster, 8, 13
LightmapResourceCluster_LightmapVirtualTexturePageTable0, LightmapResourceCluster, 5, 14
LightmapResourceCluster_LightmapVirtualTexturePageTable1, LightmapResourceCluster, 5, 15
IndirectLightingCache_IndirectLightingCacheTexture0, IndirectLightingCache, 5, 0
IndirectLightingCache_IndirectLightingCacheTexture1, IndirectLightingCache, 5, 1
IndirectLightingCache_IndirectLightingCacheTexture2, IndirectLightingCache, 5, 2
IndirectLightingCache_IndirectLightingCacheTextureSampler0, IndirectLightingCache, 8, 3
IndirectLightingCache_IndirectLightingCacheTextureSampler1, IndirectLightingCache, 8, 4
IndirectLightingCache_IndirectLightingCacheTextureSampler2, IndirectLightingCache, 8, 5
ReflectionStruct_SkyLightCubemap, ReflectionStruct, 9, 0
ReflectionStruct_SkyLightCubemapSampler, ReflectionStruct, 8, 1
ReflectionStruct_SkyLightBlendDestinationCubemap, ReflectionStruct, 5, 2
ReflectionStruct_SkyLightBlendDestinationCubemapSampler, ReflectionStruct, 8, 3
ReflectionStruct_ReflectionCubemap, ReflectionStruct, 5, 4
ReflectionStruct_ReflectionCubemapSampler, ReflectionStruct, 8, 5
ReflectionStruct_PreIntegratedGF, ReflectionStruct, 5, 6
ReflectionStruct_PreIntegratedGFSampler, ReflectionStruct, 8, 7
PlanarReflectionStruct_PlanarReflectionTexture, PlanarReflectionStruct, 5, 0
PlanarReflectionStruct_PlanarReflectionSampler, PlanarReflectionStruct, 8, 1
FogStruct_FogInscatteringColorCubemap, FogStruct, 5, 0
FogStruct_FogInscatteringColorSampler, FogStruct, 8, 1
FogStruct_IntegratedLightScattering, FogStruct, 9, 2
FogStruct_IntegratedLightScatteringSampler, FogStruct, 8, 3
LumenGIVolumeStruct_RadianceProbeIndirectionTexture, LumenGIVolumeStruct, 9, 0
LumenGIVolumeStruct_RadianceCacheFinalRadianceAtlas, LumenGIVolumeStruct, 9, 1
LumenGIVolumeStruct_RadianceCacheFinalIrradianceAtlas, LumenGIVolumeStruct, 9, 2
LumenGIVolumeStruct_RadianceCacheProbeOcclusionAtlas, LumenGIVolumeStruct, 9, 3
LumenGIVolumeStruct_RadianceCacheDepthAtlas, LumenGIVolumeStruct, 9, 4
LumenGIVolumeStruct_ProbeWorldOffset, LumenGIVolumeStruct, 16, 5
LumenGIVolumeStruct_Radiance, LumenGIVolumeStruct, 9, 6
LumenGIVolumeStruct_Normal, LumenGIVolumeStruct, 9, 7
LumenGIVolumeStruct_SceneDepth, LumenGIVolumeStruct, 9, 8
LumenGIVolumeStruct_TranslucencyGIVolume0, LumenGIVolumeStruct, 9, 9
LumenGIVolumeStruct_TranslucencyGIVolume1, LumenGIVolumeStruct, 9, 10
LumenGIVolumeStruct_TranslucencyGIVolumeHistory0, LumenGIVolumeStruct, 9, 11
LumenGIVolumeStruct_TranslucencyGIVolumeHistory1, LumenGIVolumeStruct, 9, 12
LumenGIVolumeStruct_TranslucencyGIVolumeSampler, LumenGIVolumeStruct, 8, 13
TranslucentSelfShadow_Transmission0, TranslucentSelfShadow, 5, 0
TranslucentSelfShadow_Transmission1, TranslucentSelfShadow, 5, 1
TranslucentSelfShadow_Transmission0Sampler, TranslucentSelfShadow, 8, 2
TranslucentSelfShadow_Transmission1Sampler, TranslucentSelfShadow, 8, 3
ForwardLightData_DirectionalLightShadowmapAtlas, ForwardLightData, 9, 0
ForwardLightData_ShadowmapSampler, ForwardLightData, 8, 1
ForwardLightData_DirectionalLightStaticShadowmap, ForwardLightData, 5, 2
ForwardLightData_StaticShadowmapSampler, ForwardLightData, 8, 3
ForwardLightData_ForwardLocalLightBuffer, ForwardLightData, 16, 4
ForwardLightData_NumCulledLightsGrid, ForwardLightData, 16, 5
ForwardLightData_CulledLightDataGrid32Bit, ForwardLightData, 16, 6
ForwardLightData_CulledLightDataGrid16Bit, ForwardLightData, 16, 7
VirtualShadowMap_ProjectionData, VirtualShadowMap, 16, 0
VirtualShadowMap_PageTable, VirtualShadowMap, 16, 1
VirtualShadowMap_PageFlags, VirtualShadowMap, 16, 2
VirtualShadowMap_PageRectBounds, VirtualShadowMap, 16, 3
VirtualShadowMap_PhysicalPagePool, VirtualShadowMap, 9, 4
MobileBasePass_Fog_FogInscatteringColorCubemap, MobileBasePass, 5, 0
MobileBasePass_Fog_FogInscatteringColorSampler, MobileBasePass, 8, 1
MobileBasePass_Fog_IntegratedLightScattering, MobileBasePass, 9, 2
MobileBasePass_Fog_IntegratedLightScatteringSampler, MobileBasePass, 8, 3
MobileBasePass_Forward_DirectionalLightShadowmapAtlas, MobileBasePass, 9, 4
MobileBasePass_Forward_ShadowmapSampler, MobileBasePass, 8, 5
MobileBasePass_Forward_DirectionalLightStaticShadowmap, MobileBasePass, 5, 6
MobileBasePass_Forward_StaticShadowmapSampler, MobileBasePass, 8, 7
MobileBasePass_Forward_ForwardLocalLightBuffer, MobileBasePass, 16, 8
MobileBasePass_Forward_NumCulledLightsGrid, MobileBasePass, 16, 9
MobileBasePass_Forward_CulledLightDataGrid32Bit, MobileBasePass, 16, 10
MobileBasePass_Forward_CulledLightDataGrid16Bit, MobileBasePass, 16, 11
MobileBasePass_ForwardMMV_DirectionalLightShadowmapAtlas, MobileBasePass, 9, 12
MobileBasePass_ForwardMMV_ShadowmapSampler, MobileBasePass, 8, 13
MobileBasePass_ForwardMMV_DirectionalLightStaticShadowmap, MobileBasePass, 5, 14
MobileBasePass_ForwardMMV_StaticShadowmapSampler, MobileBasePass, 8, 15
MobileBasePass_ForwardMMV_ForwardLocalLightBuffer, MobileBasePass, 16, 16
MobileBasePass_ForwardMMV_NumCulledLightsGrid, MobileBasePass, 16, 17
MobileBasePass_ForwardMMV_CulledLightDataGrid32Bit, MobileBasePass, 16, 18
MobileBasePass_ForwardMMV_CulledLightDataGrid16Bit, MobileBasePass, 16, 19
MobileBasePass_PlanarReflection_PlanarReflectionTexture, MobileBasePass, 5, 20
MobileBasePass_PlanarReflection_PlanarReflectionSampler, MobileBasePass, 8, 21
MobileBasePass_SceneTextures_SceneColorTexture, MobileBasePass, 9, 22
MobileBasePass_SceneTextures_SceneColorTextureSampler, MobileBasePass, 8, 23
MobileBasePass_SceneTextures_SceneDepthTexture, MobileBasePass, 9, 24
MobileBasePass_SceneTextures_SceneDepthTextureSampler, MobileBasePass, 8, 25
MobileBasePass_SceneTextures_ScenePartialDepthTexture, MobileBasePass, 9, 26
MobileBasePass_SceneTextures_ScenePartialDepthTextureSampler, MobileBasePass, 8, 27
MobileBasePass_SceneTextures_CustomDepthTexture, MobileBasePass, 9, 28
MobileBasePass_SceneTextures_CustomDepthTextureSampler, MobileBasePass, 8, 29
MobileBasePass_SceneTextures_CustomStencilTexture, MobileBasePass, 12, 30
MobileBasePass_SceneTextures_SceneVelocityTexture, MobileBasePass, 9, 31
MobileBasePass_SceneTextures_SceneVelocityTextureSampler, MobileBasePass, 8, 32
MobileBasePass_SceneTextures_GBufferATexture, MobileBasePass, 9, 33
MobileBasePass_SceneTextures_GBufferBTexture, MobileBasePass, 9, 34
MobileBasePass_SceneTextures_GBufferCTexture, MobileBasePass, 9, 35
MobileBasePass_SceneTextures_GBufferDTexture, MobileBasePass, 9, 36
MobileBasePass_SceneTextures_SceneDepthAuxTexture, MobileBasePass, 9, 37
MobileBasePass_SceneTextures_LocalLightTextureA, MobileBasePass, 9, 38
MobileBasePass_SceneTextures_LocalLightTextureB, MobileBasePass, 9, 39
MobileBasePass_SceneTextures_GBufferATextureSampler, MobileBasePass, 8, 40
MobileBasePass_SceneTextures_GBufferBTextureSampler, MobileBasePass, 8, 41
MobileBasePass_SceneTextures_GBufferCTextureSampler, MobileBasePass, 8, 42
MobileBasePass_SceneTextures_GBufferDTextureSampler, MobileBasePass, 8, 43
MobileBasePass_SceneTextures_SceneDepthAuxTextureSampler, MobileBasePass, 8, 44
MobileBasePass_QuadOverdraw, MobileBasePass, 13, 45
MobileBasePass_ReflectionsParameters_SkyLightCubemap, MobileBasePass, 9, 46
MobileBasePass_ReflectionsParameters_SkyLightCubemapSampler, MobileBasePass, 8, 47
MobileBasePass_ReflectionsParameters_SkyLightBlendDestinationCubemap, MobileBasePass, 5, 48
MobileBasePass_ReflectionsParameters_SkyLightBlendDestinationCubemapSampler, MobileBasePass, 8, 49
MobileBasePass_ReflectionsParameters_ReflectionCubemap, MobileBasePass, 5, 50
MobileBasePass_ReflectionsParameters_ReflectionCubemapSampler, MobileBasePass, 8, 51
MobileBasePass_ReflectionsParameters_PreIntegratedGF, MobileBasePass, 5, 52
MobileBasePass_ReflectionsParameters_PreIntegratedGFSampler, MobileBasePass, 8, 53
MobileBasePass_PreIntegratedGFTexture, MobileBasePass, 5, 54
MobileBasePass_PreIntegratedGFSampler, MobileBasePass, 8, 55
MobileBasePass_EyeAdaptationBuffer, MobileBasePass, 16, 56
MobileBasePass_RWOcclusionBufferUAV, MobileBasePass, 17, 57
MobileBasePass_AmbientOcclusionTexture, MobileBasePass, 9, 58
MobileBasePass_AmbientOcclusionSampler, MobileBasePass, 8, 59
MobileBasePass_ScreenSpaceShadowMaskTexture, MobileBasePass, 9, 60
MobileBasePass_ScreenSpaceShadowMaskSampler, MobileBasePass, 8, 61
Nanite_ClusterPageData, Nanite, 16, 0
Nanite_VisibleClustersSWHW, Nanite, 16, 1
Nanite_HierarchyBuffer, Nanite, 16, 2
Nanite_MaterialTileRemap, Nanite, 16, 3
Nanite_MaterialDepthTable, Nanite, 6, 4
Nanite_ShadingMask, Nanite, 9, 5
Nanite_VisBuffer64, Nanite, 9, 6
Nanite_DbgBuffer64, Nanite, 9, 7
Nanite_DbgBuffer32, Nanite, 9, 8
Nanite_RayTracingDataBuffer, Nanite, 16, 9
Nanite_ShadingBinMeta, Nanite, 16, 10
Nanite_ShadingBinData, Nanite, 16, 11
Nanite_MultiViewIndices, Nanite, 16, 12
Nanite_MultiViewRectScaleOffsets, Nanite, 16, 13
Nanite_InViews, Nanite, 16, 14
NaniteRayTracing_ClusterPageData, NaniteRayTracing, 6, 0
NaniteRayTracing_HierarchyBuffer, NaniteRayTracing, 6, 1
NaniteRayTracing_RayTracingDataBuffer, NaniteRayTracing, 6, 2
LocalVFLooseParameters_GPUSkinPassThroughPositionBuffer, LocalVFLooseParameters, 6, 0
LocalVFLooseParameters_GPUSkinPassThroughPreviousPositionBuffer, LocalVFLooseParameters, 6, 1
LocalVF_VertexFetch_TexCoordBuffer, LocalVF, 6, 0
LocalVF_VertexFetch_PositionBuffer, LocalVF, 6, 1
LocalVF_VertexFetch_PreSkinPositionBuffer, LocalVF, 6, 2
LocalVF_VertexFetch_PackedTangentsBuffer, LocalVF, 6, 3
LocalVF_VertexFetch_ColorComponentsBuffer, LocalVF, 6, 4
Material_Texture2D_0, Material, 5, 0
Material_Texture2D_0Sampler, Material, 8, 1
Material_Texture2D_1, Material, 5, 2
Material_Texture2D_1Sampler, Material, 8, 3
Material_Texture2D_2, Material, 5, 4
Material_Texture2D_2Sampler, Material, 8, 5
Material_Texture2D_3, Material, 5, 6
Material_Texture2D_3Sampler, Material, 8, 7
Material_Texture2D_4, Material, 5, 8
Material_Texture2D_4Sampler, Material, 8, 9
Material_Texture2D_5, Material, 5, 10
Material_Texture2D_5Sampler, Material, 8, 11
Material_Texture2D_6, Material, 5, 12
Material_Texture2D_6Sampler, Material, 8, 13
Material_Wrap_WorldGroupSettings, Material, 8, 14
Material_Clamp_WorldGroupSettings, Material, 8, 15
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
#if 0 /*DIRECT COMPILE*/
-directcompile -format=PCD3D_SM5 -entry=MainPS -shaderPlatformName=PCD3D_SM5 -ps C:/Root_2023/MythicMenagerie_Simurgh/MM_S_Proj/Saved/ShaderDebugInfo/PCD3D_SM5/MM_Water_Master_b8d28c2ba1c6d8fa/Default/FLocalVertexFactory/TBasePassPSTLightMapPolicyHQSkylight/0/BasePassPixelShader.usf -cflags=8589938688 -nocrashreports
#endif /*DIRECT COMPILE*/
